#if !defined (_P1_H)
#define _P1_H
#endif

#include <stdio.h>


// Algunas constantes útiles
#define UINTSZ 4 //Tamaño del unsigned int
#define EXITO 1
#define FRACASO 0 
#define BLSZ 1024
#define MAXBLNUM 4096 //Número máximo de bloques del fichero

typedef struct {
   unsigned int blid;
   char datos_bl[BLSZ - UINTSZ];
} BLTIPO;

typedef struct {
   unsigned int blid;
   unsigned int ocupacion;
   char extra_info[BLSZ - 2*UINTSZ];
} CABFTIPO;

/****************PROTOTIPOS*******************/
char AccesoDirecto(void);
char CreaFichero(char *filename, void *bloque, unsigned blsz);
char EjercicioP1_1(void);
char EjercicioP1_2(void);
char EjercicioP1_3(char *filename, unsigned numbytes, char valorbyte);
char EjercicioP1_5(char *filename);
char EscribeBloque(void *bl, unsigned blsz, unsigned long blid, FILE *fp);
char EscrituraSecuencial(unsigned int numbl);
unsigned long FileSz(FILE *fp); //Implementada
char LecturaSecuencial(void);
char LeeBloque(void *bl, unsigned blsz, unsigned long blid, FILE *fp);
void Permutacion (unsigned Cards[], unsigned Size); // Implementada
char TestPrincipal(void); //Implementada

/************IMPLEMENTACIÓN *****************/

char TestPrincipal(void){
    char sz;
    sz = sizeof(unsigned int);
    if (sz == UINTSZ) return EXITO;
    printf("\nError: declaración de UINTSZ");
    printf(" a %d modifíquela por %d", UINTSZ, sz);
    printf("Introduce un carácter para continuar...");
    scanf("%c",&c);
    return FRACASO;
}

unsigned long FileSz(FILE *fp){
    fseek(fp,0L,SEEK_END);
    return (ftell(fp));
}    

//Desordena el array Cards de enteros sin signo
//El segundo parámetro indica el número de elementos del array
void Permutacion (unsigned Cards[], unsigned Size) {
  unsigned int TopHalf, BottomHalf, NewIdx, i, NumToMove;
  unsigned int *NewDeck;
  NewDeck = (unsigned int *)malloc(Size * sizeof(unsigned int));
  NewIdx = 0;
  TopHalf = 0;
  BottomHalf = Size / 2;
  srand(time(0L)|getpid()); 
  while (TopHalf < Size / 2 || BottomHalf < Size) {
    if (rand() % 2) {
      NumToMove = (rand() % 3) + 1;
      for (i = 0; i < NumToMove && TopHalf < Size / 2; i++)
        NewDeck[NewIdx++] = Cards[TopHalf++];
      NumToMove = (rand() % 3) + 1;
      for (i = 0; i < NumToMove && BottomHalf < Size; i++)
        NewDeck[NewIdx++] = Cards[BottomHalf++];
    } else {
      NumToMove = (rand() % 3) + 1;
      for (i = 0; i < NumToMove && BottomHalf < Size; i++)
        NewDeck[NewIdx++] = Cards[BottomHalf++];
      NumToMove = (rand() % 3) + 1;
      for (i = 0; i < NumToMove && TopHalf < Size / 2; i++)
        NewDeck[NewIdx++] = Cards[TopHalf++];
    }
  }
  memcpy(Cards, NewDeck, sizeof(unsigned int) * Size);
  free(NewDeck);
}
