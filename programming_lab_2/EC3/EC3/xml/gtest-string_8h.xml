<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="gtest-string_8h" kind="file">
    <compoundname>gtest-string.h</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="gtest-port_8h" local="no">gtest/internal/gtest-port.h</includes>
    <includedby refid="gtest-message_8h" local="no">Escritorio/EC3/src/gtest/gtest-message.h</includedby>
    <includedby refid="gtest-test-part_8h" local="no">Escritorio/EC3/src/gtest/gtest-test-part.h</includedby>
    <includedby refid="gtest_8h" local="no">Escritorio/EC3/src/gtest/gtest.h</includedby>
    <includedby refid="gtest-filepath_8h" local="no">Escritorio/EC3/src/gtest/internal/gtest-filepath.h</includedby>
    <includedby refid="gtest-internal_8h" local="no">Escritorio/EC3/src/gtest/internal/gtest-internal.h</includedby>
    <includedby refid="gtest-type-util_8h" local="no">Escritorio/EC3/src/gtest/internal/gtest-type-util.h</includedby>
    <incdepgraph>
      <node id="746">
        <label>stdlib.h</label>
      </node>
      <node id="749">
        <label>string</label>
      </node>
      <node id="744">
        <label>string.h</label>
      </node>
      <node id="743">
        <label>Escritorio/EC3/src/gtest/internal/gtest-string.h</label>
        <link refid="gtest-string.h"/>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
      </node>
      <node id="745">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
      </node>
      <node id="750">
        <label>sstream</label>
      </node>
      <node id="748">
        <label>iostream</label>
      </node>
      <node id="747">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="758">
        <label>Escritorio/EC3/src/testcolagen.cpp</label>
        <link refid="testcolagen_8cpp"/>
      </node>
      <node id="764">
        <label>Escritorio/EC3/src/testpuerta.cpp</label>
        <link refid="testpuerta_8cpp"/>
      </node>
      <node id="762">
        <label>Escritorio/EC3/src/testplanta.cpp</label>
        <link refid="testplanta_8cpp"/>
      </node>
      <node id="765">
        <label>Escritorio/EC3/src/gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
      </node>
      <node id="763">
        <label>Escritorio/EC3/src/testprision.cpp</label>
        <link refid="testprision_8cpp"/>
      </node>
      <node id="756">
        <label>Escritorio/EC3/src/testarbol.cpp</label>
        <link refid="testarbol_8cpp"/>
      </node>
      <node id="754">
        <label>Escritorio/EC3/src/ec3.cpp</label>
        <link refid="ec3_8cpp"/>
      </node>
      <node id="760">
        <label>Escritorio/EC3/src/testllave.cpp</label>
        <link refid="testllave_8cpp"/>
      </node>
      <node id="757">
        <label>Escritorio/EC3/src/testcelda.cpp</label>
        <link refid="testcelda_8cpp"/>
      </node>
      <node id="752">
        <label>Escritorio/EC3/src/gtest/gtest-message.h</label>
        <link refid="gtest-message_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
      </node>
      <node id="769">
        <label>Escritorio/EC3/src/gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
      </node>
      <node id="755">
        <label>Escritorio/EC3/src/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h"/>
      </node>
      <node id="768">
        <label>Escritorio/EC3/src/gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h"/>
        <childnode refid="769" relation="include">
        </childnode>
      </node>
      <node id="771">
        <label>Escritorio/EC3/src/gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
      </node>
      <node id="759">
        <label>Escritorio/EC3/src/testgrafo.cpp</label>
        <link refid="testgrafo_8cpp"/>
      </node>
      <node id="751">
        <label>Escritorio/EC3/src/gtest/internal/gtest-string.h</label>
        <link refid="gtest-string.h"/>
        <childnode refid="752" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="753">
        <label>Escritorio/EC3/src/gtest/gtest.h</label>
        <link refid="gtest_8h"/>
        <childnode refid="754" relation="include">
        </childnode>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="756" relation="include">
        </childnode>
        <childnode refid="757" relation="include">
        </childnode>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="762" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
      </node>
      <node id="761">
        <label>Escritorio/EC3/src/testpersona.cpp</label>
        <link refid="testpersona_8cpp"/>
      </node>
      <node id="767">
        <label>Escritorio/EC3/src/gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h"/>
        <childnode refid="752" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>Escritorio/EC3/src/gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h"/>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
      </node>
      <node id="766">
        <label>Escritorio/EC3/src/gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h"/>
        <childnode refid="767" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1String" prot="public">testing::internal::String</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan),<sp/>eefacm@gmail.com<sp/>(Sean<sp/>Mcafee)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>declares<sp/>the<sp/>String<sp/>class<sp/>and<sp/>functions<sp/>used<sp/>internally<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>They<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.<sp/>They<sp/>should<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>by<sp/>code<sp/>external<sp/>to<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>is<sp/>#included<sp/>by<sp/>testing/base/internal/gtest-internal.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>should<sp/>not<sp/>be<sp/>#included<sp/>by<sp/>other<sp/>files.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING<sp/>||<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_STRING<sp/>||<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>String<sp/>-<sp/>a<sp/>UTF-8<sp/>string<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>cannot<sp/>use<sp/>std::string<sp/>as<sp/>Microsoft&apos;s<sp/>STL<sp/>implementation<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visual<sp/>C++<sp/>7.1<sp/>has<sp/>problems<sp/>when<sp/>exception<sp/>is<sp/>disabled.<sp/><sp/>There<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hack<sp/>to<sp/>work<sp/>around<sp/>this,<sp/>but<sp/>we&apos;ve<sp/>seen<sp/>cases<sp/>where<sp/>the<sp/>hack<sp/>fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>work.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Also,<sp/>String<sp/>is<sp/>different<sp/>from<sp/>std::string<sp/>in<sp/>that<sp/>it<sp/>can<sp/>represent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>both<sp/>NULL<sp/>and<sp/>the<sp/>empty<sp/>string,<sp/>while<sp/>std::string<sp/>cannot<sp/>represent</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NULL<sp/>and<sp/>the<sp/>empty<sp/>string<sp/>are<sp/>considered<sp/>different.<sp/><sp/>NULL<sp/>is<sp/>less</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>than<sp/>anything<sp/>(including<sp/>the<sp/>empty<sp/>string)<sp/>except<sp/>itself.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>only<sp/>provides<sp/>minimum<sp/>functionality<sp/>necessary<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>implementing<sp/>Google<sp/>Test.<sp/><sp/>We<sp/>do<sp/>not<sp/>intend<sp/>to<sp/>implement<sp/>a<sp/>full-fledged</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>class<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>purpose<sp/>of<sp/>this<sp/>class<sp/>is<sp/>to<sp/>provide<sp/>a<sp/>substitute<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>on<sp/>platforms<sp/>where<sp/>it<sp/>cannot<sp/>be<sp/>used,<sp/>we<sp/>define<sp/>a<sp/>copy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>constructor<sp/>and<sp/>assignment<sp/>operators<sp/>such<sp/>that<sp/>we<sp/>don&apos;t<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>conditional<sp/>compilation<sp/>in<sp/>a<sp/>lot<sp/>of<sp/>places.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>make<sp/>the<sp/>representation<sp/>efficient,<sp/>the<sp/>d&apos;tor<sp/>of<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>virtual.<sp/><sp/>Therefore<sp/>DO<sp/>NOT<sp/>INHERIT<sp/>FROM<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classtesting_1_1internal_1_1String" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>utility<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>input<sp/>if<sp/>it&apos;s<sp/>not<sp/>NULL,<sp/>otherwise<sp/>returns<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>serves<sp/>two<sp/>purposes:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>1.<sp/>ShowCString(NULL)<sp/>has<sp/>type<sp/>&apos;const<sp/>char<sp/>*&apos;,<sp/>instead<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type<sp/>of<sp/>NULL<sp/>(which<sp/>is<sp/>int).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>2.<sp/>In<sp/>MSVC,<sp/>streaming<sp/>a<sp/>null<sp/>char<sp/>pointer<sp/>to<sp/>StrStream<sp/>generates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>an<sp/>access<sp/>violation,<sp/>so<sp/>we<sp/>need<sp/>to<sp/>convert<sp/>NULL<sp/>to<sp/>&quot;(null)&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>before<sp/>streaming<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classtesting_1_1internal_1_1String_13cbe51f58feabbc94809ddcb6b715554" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_13cbe51f58feabbc94809ddcb6b715554" kindref="member">ShowCString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_str<sp/>?<sp/>c_str<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>input<sp/>enclosed<sp/>in<sp/>double<sp/>quotes<sp/>if<sp/>it&apos;s<sp/>not<sp/>NULL;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise<sp/>returns<sp/>&quot;(null)&quot;.<sp/><sp/>For<sp/>example,<sp/>&quot;\&quot;Hello\&quot;&quot;<sp/>is<sp/>returned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>input<sp/>&quot;Hello&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>useful<sp/>for<sp/>printing<sp/>a<sp/>C<sp/>string<sp/>in<sp/>the<sp/>syntax<sp/>of<sp/>a<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Known<sp/>issue:<sp/>escape<sp/>sequences<sp/>are<sp/>not<sp/>handled<sp/>yet.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="classtesting_1_1internal_1_1String_1f5c2c0eadf664ff1cda67fc3bbe72417" kindref="member">ShowCStringQuoted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Clones<sp/>a<sp/>0-terminated<sp/>C<sp/>string,<sp/>allocating<sp/>memory<sp/>using<sp/>new.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return<sp/>value<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>delete[].<sp/><sp/>Returns<sp/>the<sp/>cloned<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>input<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>different<sp/>from<sp/>strdup()<sp/>in<sp/>string.h,<sp/>which<sp/>allocates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>malloc().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_154c50fccf1ec93b35f36e6f499b3f5a1" kindref="member">CloneCString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32_WCE</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Windows<sp/>CE<sp/>does<sp/>not<sp/>have<sp/>the<sp/>&apos;ANSI&apos;<sp/>versions<sp/>of<sp/>Win32<sp/>APIs.<sp/>To<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>able<sp/>to<sp/>pass<sp/>strings<sp/>to<sp/>Win32<sp/>APIs<sp/>on<sp/>CE<sp/>we<sp/>need<sp/>to<sp/>convert<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>&apos;Unicode&apos;,<sp/>UTF-16.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>UTF-16<sp/>wide<sp/>string<sp/>from<sp/>the<sp/>given<sp/>ANSI<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>wide<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>wide<sp/>string<sp/>is<sp/>created<sp/>using<sp/>the<sp/>ANSI<sp/>codepage<sp/>(CP_ACP)<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>behaviour<sp/>of<sp/>the<sp/>ANSI<sp/>versions<sp/>of<sp/>Win32<sp/>calls<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>LPCWSTR<sp/>AnsiToUtf16(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>ANSI<sp/>string<sp/>from<sp/>the<sp/>given<sp/>wide<sp/>string,<sp/>allocating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>memory<sp/>using<sp/>new.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>using<sp/>delete[].<sp/>Returns<sp/>the<sp/>ANSI<sp/>string,<sp/>or<sp/>NULL<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>input<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>returned<sp/>string<sp/>is<sp/>created<sp/>using<sp/>the<sp/>ANSI<sp/>codepage<sp/>(CP_ACP)<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>match<sp/>the<sp/>behaviour<sp/>of<sp/>the<sp/>ANSI<sp/>versions<sp/>of<sp/>Win32<sp/>calls<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C<sp/>runtime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>Utf16ToAnsi(LPCWSTR<sp/>utf16_str);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_1c7b1696680f24354547f802d29bffbe8" kindref="member">CStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>a<sp/>String<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>will<sp/>be<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.<sp/><sp/>If<sp/>an<sp/>error<sp/>occurred<sp/>during</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>conversion,<sp/>&quot;(failed<sp/>to<sp/>convert<sp/>from<sp/>wide<sp/>string)&quot;<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="classtesting_1_1internal_1_1String_1f1ca1c0fab05b95e63f0cce726567065" kindref="member">ShowWideCString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Similar<sp/>to<sp/>ShowWideCString(),<sp/>except<sp/>that<sp/>this<sp/>function<sp/>encloses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>converted<sp/>string<sp/>in<sp/>double<sp/>quotes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="classtesting_1_1internal_1_1String_10a5ce84bc16d51eac0d3e8d840c8a784" kindref="member">ShowWideCStringQuoted</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they<sp/>have<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).<sp/><sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_14a45aba8f993183da420220cd83a0f86" kindref="member">WideCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>strcasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_17c2a0006c33ebdd80f2bdd58c0339c49" kindref="member">CaseInsensitiveCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>rhs);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>two<sp/>wide<sp/>C<sp/>strings,<sp/>ignoring<sp/>case.<sp/><sp/>Returns<sp/>true<sp/>iff<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Unlike<sp/>wcscasecmp(),<sp/>this<sp/>function<sp/>can<sp/>handle<sp/>NULL<sp/>argument(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>NULL<sp/>C<sp/>string<sp/>is<sp/>considered<sp/>different<sp/>to<sp/>any<sp/>non-NULL<sp/>wide<sp/>C<sp/>string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>including<sp/>the<sp/>empty<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NB:<sp/>The<sp/>implementations<sp/>on<sp/>different<sp/>platforms<sp/>slightly<sp/>differ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>windows,<sp/>this<sp/>method<sp/>uses<sp/>_wcsicmp<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>environment<sp/>variable.<sp/>On<sp/>GNU<sp/>platform<sp/>this<sp/>method<sp/>uses<sp/>wcscasecmp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>compares<sp/>according<sp/>to<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>MacOS<sp/>X,<sp/>it<sp/>uses<sp/>towlower,<sp/>which<sp/>also<sp/>uses<sp/>LC_CTYPE<sp/>category<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>locale.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_118286334a243ac591b03cc2920149c62" kindref="member">CaseInsensitiveWideCStringEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>lhs,</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>rhs);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>list<sp/>of<sp/>arguments<sp/>to<sp/>a<sp/>String,<sp/>using<sp/>the<sp/>same<sp/>format</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>spec<sp/>string<sp/>as<sp/>for<sp/>printf.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>not<sp/>use<sp/>the<sp/>StringPrintf<sp/>class<sp/>as<sp/>it<sp/>is<sp/>not<sp/>universally</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>limited<sp/>to<sp/>4096<sp/>characters<sp/>(including<sp/>the<sp/>tailing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>0).<sp/><sp/>If<sp/>4096<sp/>characters<sp/>are<sp/>not<sp/>enough<sp/>to<sp/>format<sp/>the<sp/>input,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;&lt;buffer<sp/>exceeded&gt;&quot;<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="classtesting_1_1internal_1_1String_157c9a15fc48fc1b9d3d1a823d0d85829" kindref="member">Format</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>format,<sp/>...);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>C&apos;tors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>c&apos;tor<sp/>constructs<sp/>a<sp/>NULL<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" kindref="member">String</ref>()<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>(NULL)<sp/>{}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>String<sp/>by<sp/>cloning<sp/>a<sp/>0-terminated<sp/>C<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classtesting_1_1internal_1_1String_1fbb78c0e420d202b59c0d7dc8a227092" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>)<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>(NULL)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>c_str;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>String<sp/>by<sp/>copying<sp/>a<sp/>given<sp/>number<sp/>of<sp/>chars<sp/>from<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>buffer.<sp/><sp/>E.g.<sp/>String(&quot;hello&quot;,<sp/>3)<sp/>will<sp/>create<sp/>the<sp/>string<sp/>&quot;hel&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>copy<sp/>c&apos;tor<sp/>creates<sp/>a<sp/>new<sp/>copy<sp/>of<sp/>the<sp/>string.<sp/><sp/>The<sp/>two</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>objects<sp/>do<sp/>not<sp/>share<sp/>content.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="classtesting_1_1internal_1_1String_1a654e0b75e701b91441f1b6b5c191429" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" kindref="member">String</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>str)<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>(NULL)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>str;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>D&apos;tor.<sp/><sp/>String<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>a<sp/>final<sp/>class,<sp/>so<sp/>the<sp/>d&apos;tor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>need<sp/>to<sp/>be<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classtesting_1_1internal_1_1String_16984699e98f397b472f8cea6568f1627" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_16984699e98f397b472f8cea6568f1627" kindref="member">~String</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/><ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allows<sp/>a<sp/>String<sp/>to<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>an<sp/>::std::string<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>::string,<sp/>and<sp/>vice<sp/>versa.<sp/><sp/>Converting<sp/>a<sp/>String<sp/>containing<sp/>a<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>pointer<sp/>to<sp/>::std::string<sp/>or<sp/>::string<sp/>is<sp/>undefined<sp/>behavior.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converting<sp/>a<sp/>::std::string<sp/>or<sp/>::string<sp/>containing<sp/>an<sp/>embedded<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>character<sp/>to<sp/>a<sp/>String<sp/>will<sp/>result<sp/>in<sp/>the<sp/>prefix<sp/>up<sp/>to<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NUL<sp/>character.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="231"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String_135327ddfa6aab232855df3eb10198685" kindref="member">String</ref>(const<sp/>::std::string&amp;<sp/>str)<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>(NULL)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>str.c_str();<sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>operator<sp/>::std::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::std::string(<ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="235"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="237"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/>String(const<sp/>::string&amp;<sp/>str)<sp/>:<sp/>c_str_(NULL)<sp/>{<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>str.c_str();<sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>operator<sp/>::string()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/>return<sp/>::string(<ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>);<sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>is<sp/>an<sp/>empty<sp/>string<sp/>(i.e.<sp/>&quot;&quot;).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="classtesting_1_1internal_1_1String_188cfbe793f27e479d239edaaf6e76462" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>empty()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(c_str_<sp/>!=<sp/>NULL)<sp/>&amp;&amp;<sp/>(*c_str_<sp/>==<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Compares<sp/>this<sp/>with<sp/>another<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>&lt;<sp/>0<sp/>if<sp/>this<sp/>is<sp/>less<sp/>than<sp/>rhs,<sp/>0<sp/>if<sp/>this<sp/>is<sp/>equal<sp/>to<sp/>rhs,<sp/>or<sp/>&gt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>this<sp/>is<sp/>greater<sp/>than<sp/>rhs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Compare(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>String<sp/>equals<sp/>the<sp/>given<sp/>C<sp/>string.<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>and<sp/>a<sp/>non-NULL<sp/>string<sp/>are<sp/>considered<sp/>not<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classtesting_1_1internal_1_1String_1ab06f18754d0b2852eedd2cfef144ecf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1b82bd34321b3c32eb3631eda982c17d4" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CStringEquals(c_str_,<sp/>c_str);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>String<sp/>is<sp/>less<sp/>than<sp/>the<sp/>given<sp/>C<sp/>string.<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>is<sp/>considered<sp/>less<sp/>than<sp/>&quot;&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="classtesting_1_1internal_1_1String_1e8abab023eb1101aae15865c2cb57782" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Compare(rhs)<sp/>&lt;<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>String<sp/>doesn&apos;t<sp/>equal<sp/>the<sp/>given<sp/>C<sp/>string.<sp/><sp/>A<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>and<sp/>a<sp/>non-NULL<sp/>string<sp/>are<sp/>considered<sp/>not<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264" refid="classtesting_1_1internal_1_1String_157f346ebc48019945b6dd9ea28285c72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1baa4d7e27908d4cbdfaad4c0839ca048" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!CStringEquals(c_str_,<sp/>c_str);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>String<sp/>ends<sp/>with<sp/>the<sp/>given<sp/>suffix.<sp/><sp/>*Any*</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>String<sp/>is<sp/>considered<sp/>to<sp/>end<sp/>with<sp/>a<sp/>NULL<sp/>or<sp/>empty<sp/>suffix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndsWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>suffix)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>String<sp/>ends<sp/>with<sp/>the<sp/>given<sp/>suffix,<sp/>not<sp/>considering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>case.<sp/>Any<sp/>String<sp/>is<sp/>considered<sp/>to<sp/>end<sp/>with<sp/>a<sp/>NULL<sp/>or<sp/>empty<sp/>suffix.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EndsWithCaseInsensitive(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>suffix)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>length<sp/>of<sp/>the<sp/>encapsulated<sp/>string,<sp/>or<sp/>-1<sp/>if<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>string<sp/>is<sp/>NULL.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278" refid="classtesting_1_1internal_1_1String_1044d3337dc1568ab3d7aa04194331cd5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetLength()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_str_<sp/>?<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(strlen(c_str_))<sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>0-terminated<sp/>C<sp/>string<sp/>this<sp/>String<sp/>object<sp/>represents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>String<sp/>object<sp/>still<sp/>owns<sp/>the<sp/>string.<sp/><sp/>Therefore<sp/>the<sp/>caller</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>NOT<sp/>delete<sp/>the<sp/>return<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>c_str_;<sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>the<sp/>0-terminated<sp/>C<sp/>string<sp/>this<sp/>String<sp/>object<sp/>represents.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>old<sp/>string<sp/>in<sp/>this<sp/>object<sp/>is<sp/>deleted,<sp/>and<sp/>this<sp/>object<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>own<sp/>a<sp/>clone<sp/>of<sp/>the<sp/>input<sp/>string.<sp/><sp/>This<sp/>function<sp/>copies<sp/>only<sp/>up<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>bytes<sp/>(plus<sp/>a<sp/>terminating<sp/>null<sp/>byte),<sp/>or<sp/>until<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>null<sp/>byte,<sp/>whichever<sp/>comes<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>works<sp/>even<sp/>when<sp/>the<sp/>c_str<sp/>parameter<sp/>has<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value<sp/>as<sp/>that<sp/>of<sp/>the<sp/>c_str_<sp/>field.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>length);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>a<sp/>C<sp/>string<sp/>to<sp/>this<sp/>object.<sp/><sp/>Self-assignment<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Assigns<sp/>a<sp/>String<sp/>object<sp/>to<sp/>this<sp/>object.<sp/><sp/>Self-assignment<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classtesting_1_1internal_1_1String_1516ff53aa6228408d57347e43b2fc2c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>=<sp/>rhs.<ref refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" kindref="member">c_str_</ref>;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307" refid="classtesting_1_1internal_1_1String_14d42145f96c6565f7e9d750f6f21f107" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>c_str_;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>String<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="namespacetesting_1_1internal_185854cbfc0ec814a25a8d25aa31dea04" refkind="member"><highlight class="normal">inline<sp/>::std::ostream&amp;<sp/><ref refid="celda_8cpp_11ae028893035e539215673ec05256b71" kindref="member">operator &lt;&lt;</ref>(::std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref>&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>call<sp/>String::ShowCString()<sp/>to<sp/>convert<sp/>NULL<sp/>to<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Otherwise<sp/>we&apos;ll<sp/>get<sp/>an<sp/>access<sp/>violation<sp/>on<sp/>Windows.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>String::ShowCString(str.<ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>());</highlight></codeline>
<codeline lineno="315"><highlight class="normal">}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>content<sp/>of<sp/>the<sp/>StrStream&apos;s<sp/>buffer<sp/>as<sp/>a<sp/>String.<sp/><sp/>Each<sp/>&apos;\0&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>character<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_15639f5bf1b9983c51ef166207d2c62b8" kindref="member">StrStreamToString</ref>(<ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref>*<sp/>stream);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>streamable<sp/>value<sp/>to<sp/>a<sp/>String.<sp/><sp/>A<sp/>NULL<sp/>pointer<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.<sp/><sp/>When<sp/>the<sp/>input<sp/>value<sp/>is<sp/>a<sp/>::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>::wstring,<sp/>or<sp/>::std::wstring<sp/>object,<sp/>each<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>character<sp/>in<sp/>it<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declared<sp/>here<sp/>but<sp/>defined<sp/>in<sp/>gtest.h,<sp/>so<sp/>that<sp/>it<sp/>has<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>Message<sp/>class,<sp/>required<sp/>by<sp/>the<sp/>ARM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>streamable);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_</highlight></codeline>
    </programlisting>
    <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-string.h"/>
  </compounddef>
</doxygen>
