<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="gtest-internal_8h" kind="file">
    <compoundname>gtest-internal.h</compoundname>
    <includes refid="gtest-port_8h" local="no">gtest/internal/gtest-port.h</includes>
    <includes local="no">ctype.h</includes>
    <includes local="no">string.h</includes>
    <includes local="no">iomanip</includes>
    <includes local="no">limits</includes>
    <includes local="no">set</includes>
    <includes refid="gtest-string_8h" local="no">gtest/internal/gtest-string.h</includes>
    <includes refid="gtest-filepath_8h" local="no">gtest/internal/gtest-filepath.h</includes>
    <includes refid="gtest-type-util_8h" local="no">gtest/internal/gtest-type-util.h</includes>
    <includedby refid="gtest-message_8h" local="no">Escritorio/EC3/src/gtest/gtest-message.h</includedby>
    <includedby refid="gtest-test-part_8h" local="no">Escritorio/EC3/src/gtest/gtest-test-part.h</includedby>
    <includedby refid="gtest_8h" local="no">Escritorio/EC3/src/gtest/gtest.h</includedby>
    <includedby refid="gtest-death-test-internal_8h" local="no">Escritorio/EC3/src/gtest/internal/gtest-death-test-internal.h</includedby>
    <incdepgraph>
      <node id="660">
        <label>iomanip</label>
      </node>
      <node id="661">
        <label>limits</label>
      </node>
      <node id="653">
        <label>stdlib.h</label>
      </node>
      <node id="656">
        <label>string</label>
      </node>
      <node id="659">
        <label>string.h</label>
      </node>
      <node id="663">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
      </node>
      <node id="652">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="653" relation="include">
        </childnode>
        <childnode refid="654" relation="include">
        </childnode>
        <childnode refid="655" relation="include">
        </childnode>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
      </node>
      <node id="657">
        <label>sstream</label>
      </node>
      <node id="655">
        <label>iostream</label>
      </node>
      <node id="658">
        <label>ctype.h</label>
      </node>
      <node id="651">
        <label>Escritorio/EC3/src/gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal.h"/>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="658" relation="include">
        </childnode>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="665" relation="include">
        </childnode>
      </node>
      <node id="662">
        <label>set</label>
      </node>
      <node id="665">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h"/>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
      <node id="654">
        <label>stdio.h</label>
      </node>
      <node id="664">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h"/>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="673">
        <label>Escritorio/EC3/src/testcolagen.cpp</label>
        <link refid="testcolagen_8cpp"/>
      </node>
      <node id="679">
        <label>Escritorio/EC3/src/testpuerta.cpp</label>
        <link refid="testpuerta_8cpp"/>
      </node>
      <node id="677">
        <label>Escritorio/EC3/src/testplanta.cpp</label>
        <link refid="testplanta_8cpp"/>
      </node>
      <node id="680">
        <label>Escritorio/EC3/src/gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
      </node>
      <node id="678">
        <label>Escritorio/EC3/src/testprision.cpp</label>
        <link refid="testprision_8cpp"/>
      </node>
      <node id="671">
        <label>Escritorio/EC3/src/testarbol.cpp</label>
        <link refid="testarbol_8cpp"/>
      </node>
      <node id="669">
        <label>Escritorio/EC3/src/ec3.cpp</label>
        <link refid="ec3_8cpp"/>
      </node>
      <node id="675">
        <label>Escritorio/EC3/src/testllave.cpp</label>
        <link refid="testllave_8cpp"/>
      </node>
      <node id="672">
        <label>Escritorio/EC3/src/testcelda.cpp</label>
        <link refid="testcelda_8cpp"/>
      </node>
      <node id="667">
        <label>Escritorio/EC3/src/gtest/gtest-message.h</label>
        <link refid="gtest-message_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
      </node>
      <node id="682">
        <label>Escritorio/EC3/src/gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
      </node>
      <node id="670">
        <label>Escritorio/EC3/src/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h"/>
      </node>
      <node id="681">
        <label>Escritorio/EC3/src/gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h"/>
        <childnode refid="682" relation="include">
        </childnode>
      </node>
      <node id="674">
        <label>Escritorio/EC3/src/testgrafo.cpp</label>
        <link refid="testgrafo_8cpp"/>
      </node>
      <node id="668">
        <label>Escritorio/EC3/src/gtest/gtest.h</label>
        <link refid="gtest_8h"/>
        <childnode refid="669" relation="include">
        </childnode>
        <childnode refid="670" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="672" relation="include">
        </childnode>
        <childnode refid="673" relation="include">
        </childnode>
        <childnode refid="674" relation="include">
        </childnode>
        <childnode refid="675" relation="include">
        </childnode>
        <childnode refid="676" relation="include">
        </childnode>
        <childnode refid="677" relation="include">
        </childnode>
        <childnode refid="678" relation="include">
        </childnode>
        <childnode refid="679" relation="include">
        </childnode>
      </node>
      <node id="676">
        <label>Escritorio/EC3/src/testpersona.cpp</label>
        <link refid="testpersona_8cpp"/>
      </node>
      <node id="666">
        <label>Escritorio/EC3/src/gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal.h"/>
        <childnode refid="667" relation="include">
        </childnode>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1internal_1_1ScopedTrace" prot="public">testing::internal::ScopedTrace</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1FloatingPoint" prot="public">testing::internal::FloatingPoint</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TypeIdHelper" prot="public">testing::internal::TypeIdHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TestFactoryBase" prot="public">testing::internal::TestFactoryBase</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1TestFactoryImpl" prot="public">testing::internal::TestFactoryImpl</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest-internal_8h_1379cc8ac79c138b1313b8e86ce7772d3" prot="public" static="no">
        <name>GTEST_CONCAT_TOKEN_</name>
        <param><defname>foo</defname></param>
        <param><defname>bar</defname></param>
        <initializer>GTEST_CONCAT_TOKEN_IMPL_(foo, bar)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="67" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_1ffecc6107e87e253f0d2ec65ea047d76" prot="public" static="no">
        <name>GTEST_CONCAT_TOKEN_IMPL_</name>
        <param><defname>foo</defname></param>
        <param><defname>bar</defname></param>
        <initializer>foo ## bar</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="68" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_12fb2ba8dad1e80ba6033003532d1792e" prot="public" static="no">
        <name>GTEST_IS_NULL_LITERAL_</name>
        <param><defname>x</defname></param>
        <initializer>(sizeof(::testing::internal::IsNullLiteralHelper(x)) == 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="165" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" prot="public" static="no">
        <name>GTEST_FORMAT_IMPL_</name>
        <param><defname>operand2_type</defname></param>
        <param><defname>operand1_printer</defname></param>
        <initializer>inline String FormatForComparisonFailureMessage(\
    operand2_type::value_type* str, const operand2_type&amp; /*operand2*/) {\
  return operand1_printer(str);\
}\
inline String FormatForComparisonFailureMessage(\
    const operand2_type::value_type* str, const operand2_type&amp; /*operand2*/) {\
  return operand1_printer(str);\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="268" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="260" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_12c2f05a173d1ce255815db3f0941a89d" prot="public" static="no">
        <name>GTEST_MESSAGE_</name>
        <param><defname>message</defname></param>
        <param><defname>result_type</defname></param>
        <initializer>::<ref refid="classtesting_1_1internal_1_1AssertHelper" kindref="compound">testing::internal::AssertHelper</ref>(result_type, __FILE__, __LINE__, message) \
    = ::<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="756" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="754" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_172658de9b27092fb1db0c03b9b710f0f" prot="public" static="no">
        <name>GTEST_FATAL_FAILURE_</name>
        <param><defname>message</defname></param>
        <initializer>return GTEST_MESSAGE_(message, ::testing::TPRT_FATAL_FAILURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="759" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="758" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_13f0f8842dd14a389859c49760088cdee" prot="public" static="no">
        <name>GTEST_NONFATAL_FAILURE_</name>
        <param><defname>message</defname></param>
        <initializer>GTEST_MESSAGE_(message, ::testing::TPRT_NONFATAL_FAILURE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="762" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="761" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_14b58a8f280d5e2872738d4305404cc28" prot="public" static="no">
        <name>GTEST_SUCCESS_</name>
        <param><defname>message</defname></param>
        <initializer>GTEST_MESSAGE_(message, ::testing::TPRT_SUCCESS)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="765" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="764" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_10a353cb81f7d68f65063db098b73a8cf" prot="public" static="no">
        <name>GTEST_TEST_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
  if (const char* gtest_msg = &quot;&quot;) { \
    bool gtest_caught_expected = false; \
    try { \
      statement; \
    } \
    catch (expected_exception const&amp;) { \
      gtest_caught_expected = true; \
    } \
    catch (...) { \
      gtest_msg = &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
                  #expected_exception &quot;.\n  Actual: it throws a different &quot; \
                  &quot;type.&quot;; \
      goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__); \
    } \
    if (!gtest_caught_expected) { \
      gtest_msg = &quot;Expected: &quot; #statement &quot; throws an exception of type &quot; \
                  #expected_exception &quot;.\n  Actual: it throws nothing.&quot;; \
      goto GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__); \
    } \
  } else \
    GTEST_CONCAT_TOKEN_(gtest_label_testthrow_, __LINE__): \
      fail(gtest_msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="790" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="767" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_1f532432189eeefbc5f0228a7eda6a3a4" prot="public" static="no">
        <name>GTEST_TEST_NO_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
  if (const char* gtest_msg = &quot;&quot;) { \
    try { \
      statement; \
    } \
    catch (...) { \
      gtest_msg = &quot;Expected: &quot; #statement &quot; doesn&apos;t throw an exception.\n&quot; \
                  &quot;  Actual: it throws.&quot;; \
      goto GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__); \
    } \
  } else \
    GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_, __LINE__): \
      fail(gtest_msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="805" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="792" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_1296441eb7d4240ae2378daac84516e72" prot="public" static="no">
        <name>GTEST_TEST_ANY_THROW_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
  if (const char* gtest_msg = &quot;&quot;) { \
    bool gtest_caught_any = false; \
    try { \
      statement; \
    } \
    catch (...) { \
      gtest_caught_any = true; \
    } \
    if (!gtest_caught_any) { \
      gtest_msg = &quot;Expected: &quot; #statement &quot; throws an exception.\n&quot; \
                  &quot;  Actual: it doesn&apos;t.&quot;; \
      goto GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__); \
    } \
  } else \
    GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_, __LINE__): \
      fail(gtest_msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="824" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="807" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_17953c0920da3a3bcf8256aa05cc49b9d" prot="public" static="no">
        <name>GTEST_TEST_BOOLEAN_</name>
        <param><defname>boolexpr</defname></param>
        <param><defname>booltext</defname></param>
        <param><defname>actual</defname></param>
        <param><defname>expected</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
  if (boolexpr) \
    ; \
  else \
    fail(&quot;Value of: &quot; booltext &quot;\n  Actual: &quot; #actual &quot;\nExpected: &quot; #expected)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="832" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="827" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_11e9beba69154c63eeeb9cb0d0d7904ab" prot="public" static="no">
        <name>GTEST_TEST_NO_FATAL_FAILURE_</name>
        <param><defname>statement</defname></param>
        <param><defname>fail</defname></param>
        <initializer>GTEST_AMBIGUOUS_ELSE_BLOCKER_ \
  if (const char* gtest_msg = &quot;&quot;) { \
    ::<ref refid="classtesting_1_1internal_1_1HasNewFatalFailureHelper" kindref="compound">testing::internal::HasNewFatalFailureHelper</ref> gtest_fatal_failure_checker; \
    { statement; } \
    if (gtest_fatal_failure_checker.has_new_fatal_failure()) { \
      gtest_msg = &quot;Expected: &quot; #statement &quot; doesn&apos;t generate new fatal &quot; \
                  &quot;failures in the current thread.\n&quot; \
                  &quot;  Actual: it does.&quot;; \
      goto GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__); \
    } \
  } else \
    GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_, __LINE__): \
      fail(gtest_msg)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="847" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="834" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_1746d78de91616e1beb42c02d7bfaf8c6" prot="public" static="no">
        <name>GTEST_TEST_CLASS_NAME_</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>test_case_name##_##test_name##_Test</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="851" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="850" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest-internal_8h_10cc6e3639205bae2d72b3eb08d257e34" prot="public" static="no">
        <name>GTEST_TEST_</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <param><defname>parent_class</defname></param>
        <param><defname>parent_id</defname></param>
        <initializer>class GTEST_TEST_CLASS_NAME_(test_case_name, test_name) : public parent_class {\
 public:\
  GTEST_TEST_CLASS_NAME_(test_case_name, test_name)() {}\
 private:\
  virtual void TestBody();\
  static ::<ref refid="classtesting_1_1TestInfo" kindref="compound">testing::TestInfo</ref>* const test_info_;\
  GTEST_DISALLOW_COPY_AND_ASSIGN_(\
      GTEST_TEST_CLASS_NAME_(test_case_name, test_name));\
};\
\
::<ref refid="classtesting_1_1TestInfo" kindref="compound">testing::TestInfo</ref>* const GTEST_TEST_CLASS_NAME_(test_case_name, test_name)\
  ::test_info_ =\
    ::testing::internal::MakeAndRegisterTestInfo(\
        #test_case_name, #test_name, &quot;&quot;, &quot;&quot;, \
        (parent_id), \
        parent_class::SetUpTestCase, \
        parent_class::TearDownTestCase, \
        new ::<ref refid="classtesting_1_1internal_1_1TestFactoryImpl" kindref="compound">testing::internal::TestFactoryImpl</ref>&lt;\
            GTEST_TEST_CLASS_NAME_(test_case_name, test_name)&gt;);\
void GTEST_TEST_CLASS_NAME_(test_case_name, test_name)::TestBody()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="874" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="854" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void GTestStreamToHelper</definition>
        <argsstring>(std::ostream *os, const T &amp;val)</argsstring>
        <name>GTestStreamToHelper</name>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const T &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" line="96" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h" bodystart="96" bodyend="98"/>
        <referencedby refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" compoundref="gtest-message_8h" startline="115" endline="118">testing::Message::operator&lt;&lt;</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Authors:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan),<sp/>eefacm@gmail.com<sp/>(Sean<sp/>Mcafee)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>declares<sp/>functions<sp/>and<sp/>macros<sp/>used<sp/>internally<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test.<sp/><sp/>They<sp/>are<sp/>subject<sp/>to<sp/>change<sp/>without<sp/>notice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-port_8h" kindref="compound">gtest/internal/gtest-port.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_LINUX</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/wait.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unistd.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_LINUX</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iomanip&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;set&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-filepath_8h" kindref="compound">gtest/internal/gtest-filepath.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-type-util_8h" kindref="compound">gtest/internal/gtest-type-util.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Due<sp/>to<sp/>C++<sp/>preprocessor<sp/>weirdness,<sp/>we<sp/>need<sp/>double<sp/>indirection<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>concatenate<sp/>two<sp/>tokens<sp/>when<sp/>one<sp/>of<sp/>them<sp/>is<sp/>__LINE__.<sp/><sp/>Writing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>foo<sp/>##<sp/>__LINE__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>result<sp/>in<sp/>the<sp/>token<sp/>foo__LINE__,<sp/>instead<sp/>of<sp/>foo<sp/>followed<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>current<sp/>line<sp/>number.<sp/><sp/>For<sp/>more<sp/>details,<sp/>see</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>http://www.parashift.com/c++-faq-lite/misc-technical-issues.html#faq-39.6</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="gtest-internal_8h_1379cc8ac79c138b1313b8e86ce7772d3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CONCAT_TOKEN_(foo,<sp/>bar)<sp/>GTEST_CONCAT_TOKEN_IMPL_(foo,<sp/>bar)</highlight></codeline>
<codeline lineno="68" refid="gtest-internal_8h_1ffecc6107e87e253f0d2ec65ea047d76" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_CONCAT_TOKEN_IMPL_(foo,<sp/>bar)<sp/>foo<sp/>##<sp/>bar</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>defines<sp/>the<sp/>testing::Message<sp/>class<sp/>to<sp/>allow<sp/>construction<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>messages<sp/>via<sp/>the<sp/>&lt;&lt;<sp/>operator.<sp/><sp/>The<sp/>idea<sp/>is<sp/>that<sp/>anything</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>streamable<sp/>to<sp/>std::ostream<sp/>can<sp/>be<sp/>streamed<sp/>to<sp/>a<sp/>testing::Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>allows<sp/>a<sp/>user<sp/>to<sp/>use<sp/>his<sp/>own<sp/>types<sp/>in<sp/>Google<sp/>Test<sp/>assertions<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overloading<sp/>the<sp/>&lt;&lt;<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>util/gtl/stl_logging-inl.h<sp/>overloads<sp/>&lt;&lt;<sp/>for<sp/>STL<sp/>containers.<sp/><sp/>These</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overloads<sp/>cannot<sp/>be<sp/>defined<sp/>in<sp/>the<sp/>std<sp/>namespace,<sp/>as<sp/>that<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undefined<sp/>behavior.<sp/><sp/>Therefore,<sp/>they<sp/>are<sp/>defined<sp/>in<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C++&apos;s<sp/>symbol<sp/>lookup<sp/>rule<sp/>(i.e.<sp/>Koenig<sp/>lookup)<sp/>says<sp/>that<sp/>these</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>overloads<sp/>are<sp/>visible<sp/>in<sp/>either<sp/>the<sp/>std<sp/>namespace<sp/>or<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace,<sp/>but<sp/>not<sp/>other<sp/>namespaces,<sp/>including<sp/>the<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace<sp/>which<sp/>Google<sp/>Test&apos;s<sp/>Message<sp/>class<sp/>is<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>To<sp/>allow<sp/>STL<sp/>containers<sp/>(and<sp/>other<sp/>types<sp/>that<sp/>has<sp/>a<sp/>&lt;&lt;<sp/>operator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>defined<sp/>in<sp/>the<sp/>global<sp/>namespace)<sp/>to<sp/>be<sp/>used<sp/>in<sp/>Google<sp/>Test<sp/>assertions,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>testing::Message<sp/>must<sp/>access<sp/>the<sp/>custom<sp/>&lt;&lt;<sp/>operator<sp/>from<sp/>the<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>namespace.<sp/><sp/>Hence<sp/>this<sp/>helper<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:<sp/>Jeffrey<sp/>Yasskin<sp/>suggested<sp/>an<sp/>alternative<sp/>fix<sp/>by<sp/>&quot;using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::operator&lt;&lt;;&quot;<sp/>in<sp/>the<sp/>definition<sp/>of<sp/>Message&apos;s<sp/>operator&lt;&lt;.<sp/><sp/>That<sp/>fix</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doesn&apos;t<sp/>require<sp/>a<sp/>helper<sp/>function,<sp/>but<sp/>unfortunately<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile<sp/>with<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="96" refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member">GTestStreamToHelper</ref>(std::ostream*<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>*os<sp/>&lt;&lt;<sp/>val;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declaration<sp/>of<sp/>classes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Message;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Represents<sp/>a<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Test;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Represents<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestCase;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>collection<sp/>of<sp/>related<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestPartResult;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>a<sp/>test<sp/>part.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInfo;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTest;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>collection<sp/>of<sp/>test<sp/>cases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestEventListenerInterface;<sp/><sp/></highlight><highlight class="comment">//<sp/>Listens<sp/>to<sp/>Google<sp/>Test<sp/>events.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">AssertionResult;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>an<sp/>assertion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TraceInfo;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Information<sp/>about<sp/>a<sp/>trace<sp/>point.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ScopedTrace;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Implements<sp/>scoped<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestInfoImpl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>of<sp/>TestInfo</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestResult;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>a<sp/>single<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">UnitTestImpl;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>of<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">List;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>generic<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E&gt;<sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ListNode;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>node<sp/>in<sp/>a<sp/>generic<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>times<sp/>InitGoogleTest()<sp/>has<sp/>been<sp/>called.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_11602b1208df50f3769d693dd09fb33bf" kindref="member">g_init_gtest_count</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>text<sp/>used<sp/>in<sp/>failure<sp/>messages<sp/>to<sp/>indicate<sp/>the<sp/>start<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>trace.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1564f5c46b13edecc1f4556cc06fea89a" kindref="member">kStackTraceMarker</ref>[];</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>secret<sp/>type<sp/>that<sp/>Google<sp/>Test<sp/>users<sp/>don&apos;t<sp/>know<sp/>about.<sp/><sp/>It<sp/>has<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition<sp/>on<sp/>purpose.<sp/><sp/>Therefore<sp/>it&apos;s<sp/>impossible<sp/>to<sp/>create<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Secret<sp/>object,<sp/>which<sp/>is<sp/>what<sp/>we<sp/>want.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Secret;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two<sp/>overloaded<sp/>helpers<sp/>for<sp/>checking<sp/>at<sp/>compile<sp/>time<sp/>whether<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expression<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal<sp/>(i.e.<sp/>NULL<sp/>or<sp/>any<sp/>0-valued</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compile-time<sp/>integral<sp/>constant).<sp/><sp/>Their<sp/>return<sp/>values<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>different<sp/>sizes,<sp/>so<sp/>we<sp/>can<sp/>use<sp/>sizeof()<sp/>to<sp/>test<sp/>which<sp/>version<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>picked<sp/>by<sp/>the<sp/>compiler.<sp/><sp/>These<sp/>helpers<sp/>have<sp/>no<sp/>implementations,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>only<sp/>need<sp/>their<sp/>signatures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Given<sp/>IsNullLiteralHelper(x),<sp/>the<sp/>compiler<sp/>will<sp/>pick<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>if<sp/>x<sp/>can<sp/>be<sp/>implicitly<sp/>converted<sp/>to<sp/>Secret*,<sp/>and<sp/>pick<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//<sp/>second<sp/>version<sp/>otherwise.<sp/><sp/>Since<sp/>Secret<sp/>is<sp/>a<sp/>secret<sp/>and<sp/>incomplete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type,<sp/>the<sp/>only<sp/>expression<sp/>a<sp/>user<sp/>can<sp/>write<sp/>that<sp/>has<sp/>type<sp/>Secret*<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>null<sp/>pointer<sp/>literal.<sp/><sp/>Therefore,<sp/>we<sp/>know<sp/>that<sp/>x<sp/>is<sp/>a<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>pointer<sp/>literal<sp/>if<sp/>and<sp/>only<sp/>if<sp/>the<sp/>first<sp/>version<sp/>is<sp/>picked<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1adc94033b643ac8df63f8d4d75d26bcb" kindref="member">IsNullLiteralHelper</ref>(Secret*<sp/>p);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><ref refid="namespacetesting_1_1internal_1661d333b5616fc0c8ce290d86730a7f3" kindref="member">char</ref><sp/>(&amp;<ref refid="namespacetesting_1_1internal_1adc94033b643ac8df63f8d4d75d26bcb" kindref="member">IsNullLiteralHelper</ref>(...))[2];<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>compile-time<sp/>bool<sp/>constant<sp/>that<sp/>is<sp/>true<sp/>if<sp/>and<sp/>only<sp/>if<sp/>x<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/>null<sp/>pointer<sp/>literal<sp/>(i.e.<sp/>NULL<sp/>or<sp/>any<sp/>0-valued<sp/>compile-time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/>integral<sp/>constant).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_ELLIPSIS_NEEDS_COPY_</highlight></codeline>
<codeline lineno="157"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>Passing<sp/>non-POD<sp/>classes<sp/>through<sp/>ellipsis<sp/>(...)<sp/>crashes<sp/>the<sp/>ARM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.<sp/><sp/>The<sp/>Nokia<sp/>Symbian<sp/>and<sp/>the<sp/>IBM<sp/>XL<sp/>C/C++<sp/>compiler<sp/>try<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instantiate<sp/>a<sp/>copy<sp/>constructor<sp/>for<sp/>objects<sp/>passed<sp/>through<sp/>ellipsis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(...),<sp/>failing<sp/>for<sp/>uncopyable<sp/>objects.<sp/><sp/>Hence<sp/>we<sp/>define<sp/>this<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>false<sp/>(and<sp/>lose<sp/>support<sp/>for<sp/>NULL<sp/>detection).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IS_NULL_LITERAL_(x)<sp/>false</highlight></codeline>
<codeline lineno="163"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="164" refid="gtest-internal_8h_12fb2ba8dad1e80ba6033003532d1792e" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IS_NULL_LITERAL_(x)<sp/>\</highlight></codeline>
<codeline lineno="165"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(sizeof(::testing::internal::IsNullLiteralHelper(x))<sp/>==<sp/>1)</highlight></codeline>
<codeline lineno="166"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_ELLIPSIS_NEEDS_COPY_</highlight></codeline>
<codeline lineno="167"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Appends<sp/>the<sp/>user-supplied<sp/>message<sp/>to<sp/>the<sp/>Google-Test-generated<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_1901d0ae5e90567e51c455733e1e5da8d" kindref="member">AppendUserMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>gtest_msg,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Message&amp;<sp/>user_msg);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>helper<sp/>class<sp/>for<sp/>creating<sp/>scoped<sp/>traces<sp/>in<sp/>user<sp/>programs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classtesting_1_1internal_1_1ScopedTrace" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1ScopedTrace" kindref="compound">ScopedTrace</ref><sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>c&apos;tor<sp/>pushes<sp/>the<sp/>given<sp/>source<sp/>file<sp/>location<sp/>and<sp/>message<sp/>onto</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>trace<sp/>stack<sp/>maintained<sp/>by<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ScopedTrace_1b3a178be363a3461663352339987fd33" kindref="member">ScopedTrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>message);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>pops<sp/>the<sp/>info<sp/>pushed<sp/>by<sp/>the<sp/>c&apos;tor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>the<sp/>d&apos;tor<sp/>is<sp/>not<sp/>virtual<sp/>in<sp/>order<sp/>to<sp/>be<sp/>efficient.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>inherit<sp/>from<sp/>ScopedTrace!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ScopedTrace_17b0084ab8818cd4609b02d308f1e1dac" kindref="member">~ScopedTrace</ref>();</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1ScopedTrace_1643f12ea36e5f3a7a4c29371b876f9c2" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1internal_1_1ScopedTrace" kindref="compound">ScopedTrace</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal">}<sp/><ref refid="namespacetesting_1_1internal_1e7717815979cb22fd649441b12065bda" kindref="member">GTEST_ATTRIBUTE_UNUSED_</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>ScopedTrace<sp/>object<sp/>does<sp/>its<sp/>job<sp/>in<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c&apos;tor<sp/>and<sp/>d&apos;tor.<sp/><sp/>Therefore<sp/>it<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>be<sp/>used<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>streamable<sp/>value<sp/>to<sp/>a<sp/>String.<sp/><sp/>A<sp/>NULL<sp/>pointer<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.<sp/><sp/>When<sp/>the<sp/>input<sp/>value<sp/>is<sp/>a<sp/>::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>::wstring,<sp/>or<sp/>::std::wstring<sp/>object,<sp/>each<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/>character<sp/>in<sp/>it<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declared<sp/>here<sp/>but<sp/>defined<sp/>in<sp/>gtest.h,<sp/>so<sp/>that<sp/>it<sp/>has<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>Message<sp/>class,<sp/>required<sp/>by<sp/>the<sp/>ARM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>streamable);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>value<sp/>to<sp/>be<sp/>used<sp/>in<sp/>a<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_NEEDS_IS_POINTER_</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>needed<sp/>as<sp/>the<sp/>Nokia<sp/>Symbian<sp/>and<sp/>IBM<sp/>XL<sp/>C/C++<sp/>compilers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>cannot<sp/>decide<sp/>between<sp/>const<sp/>T&amp;<sp/>and<sp/>const<sp/>T*<sp/>in<sp/>a<sp/>function<sp/>template.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>compilers<sp/>_can_<sp/>decide<sp/>between<sp/>class<sp/>template<sp/>specializations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>T<sp/>and<sp/>T*,<sp/>so<sp/>a<sp/>tr1::type_traits-like<sp/>is_pointer<sp/>works,<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>overload<sp/>on<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>makes<sp/>sure<sp/>that<sp/>all<sp/>pointers<sp/>(including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">//<sp/>those<sp/>to<sp/>char<sp/>or<sp/>wchar_t)<sp/>are<sp/>printed<sp/>as<sp/>raw<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/>FormatValueForFailureMessage(<ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">internal::true_type</ref><sp/>dummy,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(static_cast&lt;const<sp/>void*&gt;(pointer));</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/>FormatValueForFailureMessage(<ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">internal::false_type</ref><sp/>dummy,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(value);</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FormatValueForFailureMessage(</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::is_pointer&lt;T&gt;::type(),<sp/>value);</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="232"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>needed<sp/>as<sp/>the<sp/>above<sp/>solution<sp/>using<sp/>is_pointer<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limitation<sp/>that<sp/>T<sp/>cannot<sp/>be<sp/>a<sp/>type<sp/>without<sp/>external<sp/>linkage,<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiled<sp/>using<sp/>MSVC.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="238" refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(value);</highlight></codeline>
<codeline lineno="240"><highlight class="normal">}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overload<sp/>makes<sp/>sure<sp/>that<sp/>all<sp/>pointers<sp/>(including</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>those<sp/>to<sp/>char<sp/>or<sp/>wchar_t)<sp/>are<sp/>printed<sp/>as<sp/>raw<sp/>pointers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="245" refid="namespacetesting_1_1internal_1acc76e6a6f2148c5852b3cc31bd0d4c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(T*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(static_cast&lt;const<sp/>void*&gt;(pointer));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_NEEDS_IS_POINTER_</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>overloaded<sp/>versions<sp/>handle<sp/>narrow<sp/>and<sp/>wide<sp/>characters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>ch);</highlight></codeline>
<codeline lineno="253"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal"><sp/>wchar);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>this<sp/>operand<sp/>is<sp/>a<sp/>const<sp/>char*<sp/>or<sp/>char*,<sp/>and<sp/>the<sp/>other<sp/>operand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>::std::string<sp/>or<sp/>::string,<sp/>we<sp/>print<sp/>this<sp/>operand<sp/>as<sp/>a<sp/>C<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rather<sp/>than<sp/>a<sp/>pointer.<sp/><sp/>We<sp/>do<sp/>the<sp/>same<sp/>for<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>internal<sp/>macro<sp/>is<sp/>used<sp/>to<sp/>avoid<sp/>duplicated<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FORMAT_IMPL_(operand2_type,<sp/>operand1_printer)\</highlight></codeline>
<codeline lineno="261"><highlight class="preprocessor">inline<sp/>String<sp/>FormatForComparisonFailureMessage(\</highlight></codeline>
<codeline lineno="262"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>operand2_type::value_type*<sp/>str,<sp/>const<sp/>operand2_type&amp;<sp/></highlight><highlight class="comment">/*operand2*/</highlight><highlight class="normal">)<sp/>{\</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>return<sp/>operand1_printer(str);\</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}\</highlight></codeline>
<codeline lineno="265"><highlight class="normal">inline<sp/>String<sp/>FormatForComparisonFailureMessage(\</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>operand2_type::value_type*<sp/>str,<sp/>const<sp/>operand2_type&amp;<sp/></highlight><highlight class="comment">/*operand2*/</highlight><highlight class="normal">)<sp/>{\</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>return<sp/>operand1_printer(str);\</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="271"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" kindref="member">GTEST_FORMAT_IMPL_</ref>(::std::string,<sp/><ref refid="classtesting_1_1internal_1_1String_1f5c2c0eadf664ff1cda67fc3bbe72417" kindref="member">String::ShowCStringQuoted</ref>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="273"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="274"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" kindref="member">GTEST_FORMAT_IMPL_</ref>(::std::wstring,<sp/><ref refid="classtesting_1_1internal_1_1String_10a5ce84bc16d51eac0d3e8d840c8a784" kindref="member">String::ShowWideCStringQuoted</ref>)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="276"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="278"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" kindref="member">GTEST_FORMAT_IMPL_</ref>(::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">,<sp/><ref refid="classtesting_1_1internal_1_1String_1f5c2c0eadf664ff1cda67fc3bbe72417" kindref="member">String::ShowCStringQuoted</ref>)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="280"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="281"><highlight class="preprocessor"></highlight><highlight class="normal"><ref refid="gtest-internal_8h_1b28df812a3f2058e7055b99b81f9b329" kindref="member">GTEST_FORMAT_IMPL_</ref>(::wstring,<sp/><ref refid="classtesting_1_1internal_1_1String_10a5ce84bc16d51eac0d3e8d840c8a784" kindref="member">String::ShowWideCStringQuoted</ref>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="283"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_FORMAT_IMPL_</highlight></codeline>
<codeline lineno="285"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constructs<sp/>and<sp/>returns<sp/>the<sp/>message<sp/>for<sp/>an<sp/>equality<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_STREQ,<sp/>etc)<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>four<sp/>parameters<sp/>are<sp/>the<sp/>expressions<sp/>used<sp/>in<sp/>the<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>their<sp/>values,<sp/>as<sp/>strings.<sp/><sp/>For<sp/>example,<sp/>for<sp/>ASSERT_EQ(foo,<sp/>bar)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>where<sp/>foo<sp/>is<sp/>5<sp/>and<sp/>bar<sp/>is<sp/>6,<sp/>we<sp/>have:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_expression:<sp/>&quot;foo&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_expression:<sp/><sp/><sp/>&quot;bar&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>expected_value:<sp/><sp/><sp/><sp/><sp/><sp/>&quot;5&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>actual_value:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;6&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ignoring_case<sp/>parameter<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>is<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*_STRCASEEQ*.<sp/><sp/>When<sp/>it&apos;s<sp/>true,<sp/>the<sp/>string<sp/>&quot;<sp/>(ignoring<sp/>case)&quot;<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="comment">//<sp/>be<sp/>inserted<sp/>into<sp/>the<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_1edef6e77f267b3a60fabda1428c6742c" kindref="member">EqFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>expected_value,</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>String&amp;<sp/>actual_value,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ignoring_case);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>template<sp/>class<sp/>represents<sp/>an<sp/>IEEE<sp/>floating-point<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(either<sp/>single-precision<sp/>or<sp/>double-precision,<sp/>depending<sp/>on<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>parameters).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>purpose<sp/>of<sp/>this<sp/>class<sp/>is<sp/>to<sp/>do<sp/>more<sp/>sophisticated<sp/>number</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparison.<sp/><sp/>(Due<sp/>to<sp/>round-off<sp/>error,<sp/>etc,<sp/>it&apos;s<sp/>very<sp/>unlikely<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>two<sp/>floating-points<sp/>will<sp/>be<sp/>equal<sp/>exactly.<sp/><sp/>Hence<sp/>a<sp/>naive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//<sp/>comparison<sp/>by<sp/>the<sp/>==<sp/>operation<sp/>often<sp/>doesn&apos;t<sp/>work.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Format<sp/>of<sp/>IEEE<sp/>floating-point:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>The<sp/>most-significant<sp/>bit<sp/>being<sp/>the<sp/>leftmost,<sp/>an<sp/>IEEE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>floating-point<sp/>looks<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>sign_bit<sp/>exponent_bits<sp/>fraction_bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Here,<sp/>sign_bit<sp/>is<sp/>a<sp/>single<sp/>bit<sp/>that<sp/>designates<sp/>the<sp/>sign<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>For<sp/>float,<sp/>there<sp/>are<sp/>8<sp/>exponent<sp/>bits<sp/>and<sp/>23<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>For<sp/>double,<sp/>there<sp/>are<sp/>11<sp/>exponent<sp/>bits<sp/>and<sp/>52<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>More<sp/>details<sp/>can<sp/>be<sp/>found<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://en.wikipedia.org/wiki/IEEE_floating-point_standard.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>parameter:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>RawType:<sp/>the<sp/>raw<sp/>floating-point<sp/>type<sp/>(either<sp/>float<sp/>or<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="338" refid="classtesting_1_1internal_1_1FloatingPoint" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint</ref><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>the<sp/>unsigned<sp/>integer<sp/>type<sp/>that<sp/>has<sp/>the<sp/>same<sp/>size<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>floating<sp/>point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1TypeWithSize" kindref="compound">TypeWithSize&lt;sizeof(RawType)&gt;::UInt</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref>;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constants.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classtesting_1_1internal_1_1FloatingPoint_10d1a52d7247b49ffd89b55cc269fa3ae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10d1a52d7247b49ffd89b55cc269fa3ae" kindref="member">kBitCount</ref><sp/>=<sp/>8*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(RawType);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>fraction<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350" refid="classtesting_1_1internal_1_1FloatingPoint_12e4bfc4760ad22b9d5ee2065a576ab1f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_12e4bfc4760ad22b9d5ee2065a576ab1f" kindref="member">kFractionBitCount</ref><sp/>=</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>std::numeric_limits&lt;RawType&gt;::digits<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>#<sp/>of<sp/>exponent<sp/>bits<sp/>in<sp/>a<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classtesting_1_1internal_1_1FloatingPoint_15790439a5d695303b59362ba54732611" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_15790439a5d695303b59362ba54732611" kindref="member">kExponentBitCount</ref><sp/>=<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10d1a52d7247b49ffd89b55cc269fa3ae" kindref="member">kBitCount</ref><sp/>-<sp/>1<sp/>-<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_12e4bfc4760ad22b9d5ee2065a576ab1f" kindref="member">kFractionBitCount</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>sign<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" kindref="member">kSignBitMask</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(1)<sp/>&lt;&lt;<sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_10d1a52d7247b49ffd89b55cc269fa3ae" kindref="member">kBitCount</ref><sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>fraction<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classtesting_1_1internal_1_1FloatingPoint_1a11b71352cfaea7de9194099116ac79a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1a11b71352cfaea7de9194099116ac79a" kindref="member">kFractionBitMask</ref><sp/>=</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>~static_cast&lt;<ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref>&gt;(0)<sp/>&gt;&gt;<sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_15790439a5d695303b59362ba54732611" kindref="member">kExponentBitCount</ref><sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>mask<sp/>for<sp/>the<sp/>exponent<sp/>bits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classtesting_1_1internal_1_1FloatingPoint_123227160d528a7d76ef02135b2ca21bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_123227160d528a7d76ef02135b2ca21bf" kindref="member">kExponentBitMask</ref><sp/>=<sp/>~(<ref refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" kindref="member">kSignBitMask</ref><sp/>|<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1a11b71352cfaea7de9194099116ac79a" kindref="member">kFractionBitMask</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>How<sp/>many<sp/>ULP&apos;s<sp/>(Units<sp/>in<sp/>the<sp/>Last<sp/>Place)<sp/>we<sp/>want<sp/>to<sp/>tolerate<sp/>when</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>comparing<sp/>two<sp/>numbers.<sp/><sp/>The<sp/>larger<sp/>the<sp/>value,<sp/>the<sp/>more<sp/>error<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>allow.<sp/><sp/>A<sp/>0<sp/>value<sp/>means<sp/>that<sp/>two<sp/>numbers<sp/>must<sp/>be<sp/>exactly<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>considered<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>error<sp/>of<sp/>a<sp/>single<sp/>floating-point<sp/>operation<sp/>is<sp/>0.5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>units<sp/>in<sp/>the<sp/>last<sp/>place.<sp/><sp/>On<sp/>Intel<sp/>CPU&apos;s,<sp/>all<sp/>floating-point</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>calculations<sp/>are<sp/>done<sp/>with<sp/>80-bit<sp/>precision,<sp/>while<sp/>double<sp/>has<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>bits.<sp/><sp/>Therefore,<sp/>4<sp/>should<sp/>be<sp/>enough<sp/>for<sp/>ordinary<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>See<sp/>the<sp/>following<sp/>article<sp/>for<sp/>more<sp/>details<sp/>on<sp/>ULP:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://www.cygnus-software.com/papers/comparingfloats/comparingfloats.htm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="classtesting_1_1internal_1_1FloatingPoint_1313c816e4bb05a9b39ec42a7a8446551" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1313c816e4bb05a9b39ec42a7a8446551" kindref="member">kMaxUlps</ref><sp/>=<sp/>4;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>FloatingPoint<sp/>from<sp/>a<sp/>raw<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>an<sp/>Intel<sp/>CPU,<sp/>passing<sp/>a<sp/>non-normalized<sp/>NAN<sp/>(Not<sp/>a<sp/>Number)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>around<sp/>may<sp/>change<sp/>its<sp/>bits,<sp/>although<sp/>the<sp/>new<sp/>value<sp/>is<sp/>guaranteed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>also<sp/>a<sp/>NAN.<sp/><sp/>Therefore,<sp/>don&apos;t<sp/>expect<sp/>this<sp/>constructor<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>preserve<sp/>the<sp/>bits<sp/>in<sp/>x<sp/>when<sp/>x<sp/>is<sp/>a<sp/>NAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="classtesting_1_1internal_1_1FloatingPoint_1bb43acfcef65679c9b31556d0c98f4cc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1bb43acfcef65679c9b31556d0c98f4cc" kindref="member">FloatingPoint</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RawType&amp;<sp/>x)<sp/>:<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1e3e22daded9add08de0ce23d04c1834d" kindref="member">value_</ref>(x)<sp/>{}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reinterprets<sp/>a<sp/>bit<sp/>pattern<sp/>as<sp/>a<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>needed<sp/>to<sp/>test<sp/>the<sp/>AlmostEquals()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393" refid="classtesting_1_1internal_1_1FloatingPoint_103a1d12251225bfc26c6f728603c94d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_103a1d12251225bfc26c6f728603c94d2" kindref="member">ReinterpretBits</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1f158aced1acff96e66c0975aacbb7356" kindref="member">bits</ref>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint</ref><sp/>fp(0);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>fp.<ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref><sp/>=<sp/>bits;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fp.<ref refid="classtesting_1_1internal_1_1FloatingPoint_1e3e22daded9add08de0ce23d04c1834d" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>floating-point<sp/>number<sp/>that<sp/>represent<sp/>positive<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400" refid="classtesting_1_1internal_1_1FloatingPoint_1162b38c51330902d3a36ab8fb24fc5cd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>RawType<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1162b38c51330902d3a36ab8fb24fc5cd" kindref="member">Infinity</ref>()<sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_103a1d12251225bfc26c6f728603c94d2" kindref="member">ReinterpretBits</ref>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_123227160d528a7d76ef02135b2ca21bf" kindref="member">kExponentBitMask</ref>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-static<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>bits<sp/>that<sp/>represents<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407" refid="classtesting_1_1internal_1_1FloatingPoint_1f158aced1acff96e66c0975aacbb7356" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>&amp;<ref refid="classtesting_1_1internal_1_1FloatingPoint_1f158aced1acff96e66c0975aacbb7356" kindref="member">bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>exponent<sp/>bits<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="classtesting_1_1internal_1_1FloatingPoint_15460e7fb06a67182e2327fb4833412e4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_15460e7fb06a67182e2327fb4833412e4" kindref="member">exponent_bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_123227160d528a7d76ef02135b2ca21bf" kindref="member">kExponentBitMask</ref><sp/>&amp;<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>fraction<sp/>bits<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413" refid="classtesting_1_1internal_1_1FloatingPoint_1cfe5d82d36d0a8de4b703184f76cc149" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1cfe5d82d36d0a8de4b703184f76cc149" kindref="member">fraction_bits</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1a11b71352cfaea7de9194099116ac79a" kindref="member">kFractionBitMask</ref><sp/>&amp;<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>sign<sp/>bit<sp/>of<sp/>this<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416" refid="classtesting_1_1internal_1_1FloatingPoint_1d4fa25be27e9956a332dcc3ec8f26abb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1d4fa25be27e9956a332dcc3ec8f26abb" kindref="member">sign_bit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" kindref="member">kSignBitMask</ref><sp/>&amp;<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>is<sp/>NAN<sp/>(not<sp/>a<sp/>number).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="classtesting_1_1internal_1_1FloatingPoint_19c07831fe70814a891999c2874125d88" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_19c07831fe70814a891999c2874125d88" kindref="member">is_nan</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>It&apos;s<sp/>a<sp/>NAN<sp/>if<sp/>the<sp/>exponent<sp/>bits<sp/>are<sp/>all<sp/>ones<sp/>and<sp/>the<sp/>fraction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bits<sp/>are<sp/>not<sp/>entirely<sp/>zeros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_15460e7fb06a67182e2327fb4833412e4" kindref="member">exponent_bits</ref>()<sp/>==<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_123227160d528a7d76ef02135b2ca21bf" kindref="member">kExponentBitMask</ref>)<sp/>&amp;&amp;<sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_1cfe5d82d36d0a8de4b703184f76cc149" kindref="member">fraction_bits</ref>()<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>this<sp/>number<sp/>is<sp/>at<sp/>most<sp/>kMaxUlps<sp/>ULP&apos;s<sp/>away<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>rhs.<sp/><sp/>In<sp/>particular,<sp/>this<sp/>function:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>returns<sp/>false<sp/>if<sp/>either<sp/>number<sp/>is<sp/>(or<sp/>both<sp/>are)<sp/>NAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>treats<sp/>really<sp/>large<sp/>numbers<sp/>as<sp/>almost<sp/>equal<sp/>to<sp/>infinity.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>thinks<sp/>+0.0<sp/>and<sp/>-0.0<sp/>are<sp/>0<sp/>DLP&apos;s<sp/>apart.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431" refid="classtesting_1_1internal_1_1FloatingPoint_1f1f6e996f98579f783c71e856073607f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1f1f6e996f98579f783c71e856073607f" kindref="member">AlmostEquals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint</ref>&amp;<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>IEEE<sp/>standard<sp/>says<sp/>that<sp/>any<sp/>comparison<sp/>operation<sp/>involving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>NAN<sp/>must<sp/>return<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_19c07831fe70814a891999c2874125d88" kindref="member">is_nan</ref>()<sp/>||<sp/>rhs.<ref refid="classtesting_1_1internal_1_1FloatingPoint_19c07831fe70814a891999c2874125d88" kindref="member">is_nan</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1f5d019f10fb65eb17a95f807cfe48e02" kindref="member">DistanceBetweenSignAndMagnitudeNumbers</ref>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>,<sp/>rhs.<ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>)<sp/>&lt;=<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1313c816e4bb05a9b39ec42a7a8446551" kindref="member">kMaxUlps</ref>;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>an<sp/>integer<sp/>from<sp/>the<sp/>sign-and-magnitude<sp/>representation<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>biased<sp/>representation.<sp/><sp/>More<sp/>precisely,<sp/>let<sp/>N<sp/>be<sp/>2<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>power<sp/>of<sp/>(kBitCount<sp/>-<sp/>1),<sp/>an<sp/>integer<sp/>x<sp/>is<sp/>represented<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>unsigned<sp/>number<sp/>x<sp/>+<sp/>N.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>instance,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-N<sp/>+<sp/>1<sp/>(the<sp/>most<sp/>negative<sp/>number<sp/>representable<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign-and-magnitude)<sp/>is<sp/>represented<sp/>by<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>0<sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>represented<sp/>by<sp/>N;<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>N<sp/>-<sp/>1<sp/><sp/>(the<sp/>biggest<sp/>number<sp/>representable<sp/>using</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sign-and-magnitude)<sp/>is<sp/>represented<sp/>by<sp/>2N<sp/>-<sp/>1.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>http://en.wikipedia.org/wiki/Signed_number_representations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>more<sp/>details<sp/>on<sp/>signed<sp/>number<sp/>representations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455" refid="classtesting_1_1internal_1_1FloatingPoint_15ced567cb80c6deec814b66fdd90e8fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_15ced567cb80c6deec814b66fdd90e8fc" kindref="member">SignAndMagnitudeToBiased</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>&amp;sam)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" kindref="member">kSignBitMask</ref><sp/>&amp;<sp/>sam)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sam<sp/>represents<sp/>a<sp/>negative<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>~sam<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sam<sp/>represents<sp/>a<sp/>positive<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_14cdfe31dcfc38670299d0ab202d94a8d" kindref="member">kSignBitMask</ref><sp/>|<sp/>sam;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Given<sp/>two<sp/>numbers<sp/>in<sp/>the<sp/>sign-and-magnitude<sp/>representation,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>distance<sp/>between<sp/>them<sp/>as<sp/>an<sp/>unsigned<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="classtesting_1_1internal_1_1FloatingPoint_1f5d019f10fb65eb17a95f807cfe48e02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1f5d019f10fb65eb17a95f807cfe48e02" kindref="member">DistanceBetweenSignAndMagnitudeNumbers</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>&amp;sam1,</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>&amp;sam2)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>biased1<sp/>=<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_15ced567cb80c6deec814b66fdd90e8fc" kindref="member">SignAndMagnitudeToBiased</ref>(sam1);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/>biased2<sp/>=<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_15ced567cb80c6deec814b66fdd90e8fc" kindref="member">SignAndMagnitudeToBiased</ref>(sam2);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(biased1<sp/>&gt;=<sp/>biased2)<sp/>?<sp/>(biased1<sp/>-<sp/>biased2)<sp/>:<sp/>(biased2<sp/>-<sp/>biased1);</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="475" refid="classtesting_1_1internal_1_1FloatingPoint_1e3e22daded9add08de0ce23d04c1834d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>RawType<sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_1e3e22daded9add08de0ce23d04c1834d" kindref="member">value_</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>raw<sp/>floating-point<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_162f65c1c1a218664ad46092e6bf43bb3" kindref="member">Bits</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint_10447c6c2bdd9eaf07b79f8a3c1702f2b" kindref="member">bits_</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>bits<sp/>that<sp/>represent<sp/>the<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="478"><highlight class="normal">};</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typedefs<sp/>the<sp/>instances<sp/>of<sp/>the<sp/>FloatingPoint<sp/>template<sp/>class<sp/>that<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>care<sp/>to<sp/>use.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="namespacetesting_1_1internal_1bb33dd123f87b562b6da629e2951a447" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint&lt;float&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">Float</ref>;</highlight></codeline>
<codeline lineno="483" refid="namespacetesting_1_1internal_1e0e9f41d755c89030f16e5fce899c9bd" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint&lt;double&gt;</ref><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">Double</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>order<sp/>to<sp/>catch<sp/>the<sp/>mistake<sp/>of<sp/>putting<sp/>tests<sp/>that<sp/>use<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">//<sp/>test<sp/>fixture<sp/>classes<sp/>in<sp/>the<sp/>same<sp/>test<sp/>case,<sp/>we<sp/>need<sp/>to<sp/>assign</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>unique<sp/>IDs<sp/>to<sp/>fixture<sp/>classes<sp/>and<sp/>compare<sp/>them.<sp/><sp/>The<sp/>TypeId<sp/>type<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>to<sp/>hold<sp/>such<sp/>IDs.<sp/><sp/>The<sp/>user<sp/>should<sp/>treat<sp/>TypeId<sp/>as<sp/>an<sp/>opaque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>type:<sp/>the<sp/>only<sp/>operation<sp/>allowed<sp/>on<sp/>TypeId<sp/>values<sp/>is<sp/>to<sp/>compare</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>them<sp/>for<sp/>equality<sp/>using<sp/>the<sp/>==<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">TypeId</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="494" refid="classtesting_1_1internal_1_1TypeIdHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TypeIdHelper" kindref="compound">TypeIdHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>dummy_<sp/>must<sp/>not<sp/>have<sp/>a<sp/>const<sp/>type.<sp/><sp/>Otherwise<sp/>an<sp/>overly<sp/>eager</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler<sp/>(e.g.<sp/>MSVC<sp/>7.1<sp/>&amp;<sp/>8.0)<sp/>may<sp/>try<sp/>to<sp/>merge</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeIdHelper&lt;T&gt;::dummy_<sp/>for<sp/>different<sp/>Ts<sp/>as<sp/>an<sp/>&quot;optimization&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classtesting_1_1internal_1_1TypeIdHelper_1fda8535da3b83a244c0728dee7d5e805" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1TypeIdHelper_1fda8535da3b83a244c0728dee7d5e805" kindref="member">dummy_</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal">};</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1TypeIdHelper" kindref="compound">TypeIdHelper&lt;T&gt;::dummy_</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetTypeId&lt;T&gt;()<sp/>returns<sp/>the<sp/>ID<sp/>of<sp/>type<sp/>T.<sp/><sp/>Different<sp/>values<sp/>will<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returned<sp/>for<sp/>different<sp/>types.<sp/><sp/>Calling<sp/>the<sp/>function<sp/>twice<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="comment">//<sp/>same<sp/>type<sp/>argument<sp/>is<sp/>guaranteed<sp/>to<sp/>return<sp/>the<sp/>same<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="509" refid="namespacetesting_1_1internal_1931b4abea2beb1bd7d50bde8ccd934c5" refkind="member"><highlight class="normal"><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">TypeId</ref><sp/><ref refid="namespacetesting_1_1internal_1931b4abea2beb1bd7d50bde8ccd934c5" kindref="member">GetTypeId</ref>()<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>compiler<sp/>is<sp/>required<sp/>to<sp/>allocate<sp/>a<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TypeIdHelper&lt;T&gt;::dummy_<sp/>variable<sp/>for<sp/>each<sp/>T<sp/>used<sp/>to<sp/>instantiate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>template.<sp/><sp/>Therefore,<sp/>the<sp/>address<sp/>of<sp/>dummy_<sp/>is<sp/>guaranteed<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>unique.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(<ref refid="classtesting_1_1internal_1_1TypeIdHelper" kindref="compound">TypeIdHelper&lt;T&gt;::dummy_</ref>);</highlight></codeline>
<codeline lineno="515"><highlight class="normal">}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>::testing::Test.<sp/><sp/>Always<sp/>call<sp/>this<sp/>instead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>GetTypeId&lt;<sp/>::testing::Test&gt;()<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test,<sp/>as<sp/>the<sp/>latter<sp/>may<sp/>give<sp/>the<sp/>wrong<sp/>result<sp/>due<sp/>to<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight><highlight class="comment">//<sp/>suspected<sp/>linker<sp/>bug<sp/>when<sp/>compiling<sp/>Google<sp/>Test<sp/>as<sp/>a<sp/>Mac<sp/>OS<sp/>X</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight><highlight class="comment">//<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">TypeId</ref><sp/><ref refid="namespacetesting_1_1internal_1618463a60211a8e13bf0478f1219cd4e" kindref="member">GetTestTypeId</ref>();</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>the<sp/>abstract<sp/>factory<sp/>interface<sp/>that<sp/>creates<sp/>instances</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526" refid="classtesting_1_1internal_1_1TestFactoryBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">TestFactoryBase</ref><sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="528" refid="classtesting_1_1internal_1_1TestFactoryBase_12658d02fa0f996176b0130094b606c17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase_12658d02fa0f996176b0130094b606c17" kindref="member">~TestFactoryBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>test<sp/>instance<sp/>to<sp/>run.<sp/>The<sp/>instance<sp/>is<sp/>both<sp/>created<sp/>and<sp/>destroyed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>TestInfoImpl::Run()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref>*<sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase_184e74bad4eccb3eb7df7c2a8f6f4d7b3" kindref="member">CreateTest</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="535" refid="classtesting_1_1internal_1_1TestFactoryBase_1fe6283d25da1b66b7a92ebeb5db867d3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase_1fe6283d25da1b66b7a92ebeb5db867d3" kindref="member">TestFactoryBase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase_175cdf36c4859f15ca8d853c75cfa397f" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">TestFactoryBase</ref>);</highlight></codeline>
<codeline lineno="539"><highlight class="normal">};</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>provides<sp/>implementation<sp/>of<sp/>TeastFactoryBase<sp/>interface.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>It<sp/>is<sp/>used<sp/>in<sp/>TEST<sp/>and<sp/>TEST_F<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestClass&gt;</highlight></codeline>
<codeline lineno="544" refid="classtesting_1_1internal_1_1TestFactoryImpl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1TestFactoryImpl" kindref="compound">TestFactoryImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">TestFactoryBase</ref><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="546" refid="classtesting_1_1internal_1_1TestFactoryImpl_14ab23677c6c41e57de97d2142c959f18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref>*<sp/><ref refid="classtesting_1_1internal_1_1TestFactoryImpl_14ab23677c6c41e57de97d2142c959f18" kindref="member">CreateTest</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TestClass;<sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal">};</highlight></codeline>
<codeline lineno="548"><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight></codeline>
<codeline lineno="550"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Predicate-formatters<sp/>for<sp/>implementing<sp/>the<sp/>HRESULT<sp/>checking<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>pass<sp/>a<sp/>long<sp/>instead<sp/>of<sp/>HRESULT<sp/>to<sp/>avoid<sp/>causing<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//<sp/>include<sp/>dependency<sp/>for<sp/>the<sp/>HRESULT<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/>IsHRESULTSuccess(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/>IsHRESULTFailure(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr,<sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>hr);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight></codeline>
<codeline lineno="559"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>source<sp/>file<sp/>path<sp/>and<sp/>a<sp/>line<sp/>number<sp/>as<sp/>they<sp/>would<sp/>appear</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>compiler<sp/>error<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="namespacetesting_1_1internal_167e13a54c56c7495bac6f91447c84aa7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_167e13a54c56c7495bac6f91447c84aa7" kindref="member">FormatFileLocation</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>file_name<sp/>=<sp/>file<sp/>==<sp/>NULL<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;unknown<sp/>file&quot;</highlight><highlight class="normal"><sp/>:<sp/>file;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(line<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_157c9a15fc48fc1b9d3d1a823d0d85829" kindref="member">String::Format</ref>(</highlight><highlight class="stringliteral">&quot;%s:&quot;</highlight><highlight class="normal">,<sp/>file_name);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="568"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_157c9a15fc48fc1b9d3d1a823d0d85829" kindref="member">String::Format</ref>(</highlight><highlight class="stringliteral">&quot;%s(%d):&quot;</highlight><highlight class="normal">,<sp/>file_name,<sp/>line);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="570"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String_157c9a15fc48fc1b9d3d1a823d0d85829" kindref="member">String::Format</ref>(</highlight><highlight class="stringliteral">&quot;%s:%d:&quot;</highlight><highlight class="normal">,<sp/>file_name,<sp/>line);</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>_MSC_VER</highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Types<sp/>of<sp/>SetUpTestCase()<sp/>and<sp/>TearDownTestCase()<sp/>functions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575" refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" kindref="member">SetUpTestCaseFunc</ref>)();</highlight></codeline>
<codeline lineno="576" refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" kindref="member">TearDownTestCaseFunc</ref>)();</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>new<sp/>TestInfo<sp/>object<sp/>and<sp/>registers<sp/>it<sp/>with<sp/>Google<sp/>Test;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>the<sp/>created<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Arguments:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_name:<sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>name:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>of<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>test_case_comment:<sp/>a<sp/>comment<sp/>on<sp/>the<sp/>test<sp/>case<sp/>that<sp/>will<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>test<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>comment:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>comment<sp/>on<sp/>the<sp/>test<sp/>that<sp/>will<sp/>be<sp/>included<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>fixture_class_id:<sp/>ID<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>set_up_tc:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>sets<sp/>up<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>tear_down_tc:<sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>function<sp/>that<sp/>tears<sp/>down<sp/>the<sp/>test<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>factory:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointer<sp/>to<sp/>the<sp/>factory<sp/>that<sp/>creates<sp/>a<sp/>test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>newly<sp/>created<sp/>TestInfo<sp/>instance<sp/>will<sp/>assume</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/><ref refid="namespacetesting_1_1internal_1c8a4baccf925ac1c597b5bf7956d680e" kindref="member">MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_comment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment,</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">TypeId</ref><sp/>fixture_class_id,</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" kindref="member">SetUpTestCaseFunc</ref><sp/>set_up_tc,</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" kindref="member">TearDownTestCaseFunc</ref><sp/>tear_down_tc,</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">TestFactoryBase</ref>*<sp/>factory);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(GTEST_HAS_TYPED_TEST)<sp/>||<sp/>defined(GTEST_HAS_TYPED_TEST_P)</highlight></codeline>
<codeline lineno="604"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="comment">//<sp/>State<sp/>of<sp/>the<sp/>definition<sp/>of<sp/>a<sp/>type-parameterized<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypedTestCasePState<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/>TypedTestCasePState()<sp/>:<sp/>registered_(false)<sp/>{}</highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>the<sp/>given<sp/>test<sp/>name<sp/>to<sp/>defined_test_names_<sp/>and<sp/>return<sp/>true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>test<sp/>case<sp/>hasn&apos;t<sp/>been<sp/>registered;<sp/>otherwise<sp/>aborts<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>AddTestName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_name)<sp/>{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(registered_)<sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>fprintf(stderr,<sp/></highlight><highlight class="stringliteral">&quot;%s<sp/>Test<sp/>%s<sp/>must<sp/>be<sp/>defined<sp/>before<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;REGISTER_TYPED_TEST_CASE_P(%s,<sp/>...).\n&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_167e13a54c56c7495bac6f91447c84aa7" kindref="member">FormatFileLocation</ref>(file,<sp/>line).c_str(),<sp/>test_name,<sp/>case_name);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_14745413dab28201711f46860bdf5f8df" kindref="member">abort</ref>();</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>defined_test_names_.insert(test_name);</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Verifies<sp/>that<sp/>registered_tests<sp/>match<sp/>the<sp/>test<sp/>names<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>defined_test_names_;<sp/>returns<sp/>registered_tests<sp/>if<sp/>successful,<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>aborts<sp/>the<sp/>program<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>VerifyRegisteredTestNames(</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>registered_tests);</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>registered_;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>::std::set&lt;const<sp/>char*&gt;<sp/>defined_test_names_;</highlight></codeline>
<codeline lineno="634"><highlight class="normal">};</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Skips<sp/>to<sp/>the<sp/>first<sp/>non-space<sp/>char<sp/>after<sp/>the<sp/>first<sp/>comma<sp/>in<sp/>&apos;str&apos;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>returns<sp/>NULL<sp/>if<sp/>no<sp/>comma<sp/>is<sp/>found<sp/>in<sp/>&apos;str&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>SkipComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comma<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comma<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(*(++comma)))<sp/>{}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comma;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>prefix<sp/>of<sp/>&apos;str&apos;<sp/>before<sp/>the<sp/>first<sp/>comma<sp/>in<sp/>it;<sp/>returns</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>entire<sp/>string<sp/>if<sp/>it<sp/>contains<sp/>no<sp/>comma.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/>GetPrefixUntilComma(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comma<sp/>=<sp/>strchr(str,<sp/></highlight><highlight class="charliteral">&apos;,&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>comma<sp/>==<sp/>NULL<sp/>?<sp/>String(str)<sp/>:<sp/>String(str,<sp/>comma<sp/>-<sp/>str);</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>Types&gt;::Register()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registers<sp/>a<sp/>list<sp/>of<sp/>type-parameterized<sp/>tests<sp/>with<sp/>Google<sp/>Test.<sp/><sp/>The</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="comment">//<sp/>return<sp/>value<sp/>is<sp/>insignificant<sp/>-<sp/>we<sp/>just<sp/>need<sp/>to<sp/>return<sp/>something</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight><highlight class="comment">//<sp/>such<sp/>that<sp/>we<sp/>can<sp/>call<sp/>this<sp/>function<sp/>in<sp/>a<sp/>namespace<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implementation<sp/>note:<sp/>The<sp/>GTEST_TEMPLATE_<sp/>macro<sp/>declares<sp/>a<sp/>template</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight><highlight class="comment">//<sp/>template<sp/>parameter.<sp/><sp/>It&apos;s<sp/>defined<sp/>in<sp/>gtest-type-util.h.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestSel,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTest<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;index&apos;<sp/>is<sp/>the<sp/>index<sp/>of<sp/>the<sp/>test<sp/>in<sp/>the<sp/>type<sp/>list<sp/>&apos;Types&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>in<sp/>INSTANTIATE_TYPED_TEST_CASE_P(Prefix,<sp/>TestCase,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Types).<sp/><sp/>Valid<sp/>values<sp/>for<sp/>&apos;index&apos;<sp/>are<sp/>[0,<sp/>N<sp/>-<sp/>1]<sp/>where<sp/>N<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>length<sp/>of<sp/>Types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_names,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types::Head<sp/>Type;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>Fixture&lt;Type&gt;<sp/>FixtureClass;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>GTEST_BIND_(TestSel,<sp/>Type)<sp/>TestClass;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>registers<sp/>the<sp/>first<sp/>type-parameterized<sp/>test<sp/>in<sp/>the<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1c8a4baccf925ac1c597b5bf7956d680e" kindref="member">MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(&quot;%s%s%s/%d&quot;,<sp/>prefix,<sp/>prefix[0]<sp/>==<sp/>&apos;\0&apos;<sp/>?<sp/>&quot;&quot;<sp/>:<sp/>&quot;/&quot;,</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case_name,<sp/>index).c_str(),</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetPrefixUntilComma(test_names).c_str(),</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>String::Format(&quot;TypeParam<sp/>=<sp/>%s&quot;,<sp/>GetTypeName&lt;Type&gt;().c_str()).c_str(),</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;&quot;,</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1931b4abea2beb1bd7d50bde8ccd934c5" kindref="member">GetTypeId</ref>&lt;FixtureClass&gt;(),</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestClass::SetUpTestCase,</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>TestClass::TearDownTestCase,</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>TestFactoryImpl&lt;TestClass&gt;);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>recurses<sp/>(at<sp/>compile<sp/>time)<sp/>with<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>type<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>typename<sp/>Types::Tail&gt;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Register(prefix,<sp/>case_name,<sp/>test_names,<sp/>index<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="691"><highlight class="normal">};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>case<sp/>for<sp/>the<sp/>compile<sp/>time<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal">template<sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/>class<sp/>TestSel&gt;</highlight></codeline>
<codeline lineno="695"><highlight class="normal">class<sp/>TypeParameterizedTest&lt;Fixture,<sp/>TestSel,<sp/>Types0&gt;<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*prefix*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*case_name*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*test_names*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*index*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal">};</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TypeParameterizedTestCase&lt;Fixture,<sp/>Tests,<sp/>Types&gt;::Register()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registers<sp/>*all<sp/>combinations*<sp/>of<sp/>&apos;Tests&apos;<sp/>and<sp/>&apos;Types&apos;<sp/>with<sp/>Google</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test.<sp/><sp/>The<sp/>return<sp/>value<sp/>is<sp/>insignificant<sp/>-<sp/>we<sp/>just<sp/>need<sp/>to<sp/>return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>something<sp/>such<sp/>that<sp/>we<sp/>can<sp/>call<sp/>this<sp/>function<sp/>in<sp/>a<sp/>namespace<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tests,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTestCase<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_names)<sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tests::Head<sp/>Head;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>register<sp/>the<sp/>first<sp/>test<sp/>in<sp/>&apos;Test&apos;<sp/>for<sp/>each<sp/>type<sp/>in<sp/>&apos;Types&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>TypeParameterizedTest&lt;Fixture,<sp/>Head,<sp/>Types&gt;::Register(</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prefix,<sp/>case_name,<sp/>test_names,<sp/>0);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Next,<sp/>recurses<sp/>(at<sp/>compile<sp/>time)<sp/>with<sp/>the<sp/>tail<sp/>of<sp/>the<sp/>test<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TypeParameterizedTestCase&lt;Fixture,<sp/>typename<sp/>Tests::Tail,<sp/>Types&gt;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::Register(prefix,<sp/>case_name,<sp/>SkipComma(test_names));</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="722"><highlight class="normal">};</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>base<sp/>case<sp/>for<sp/>the<sp/>compile<sp/>time<sp/>recursion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;GTEST_TEMPLATE_<sp/>Fixture,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Types&gt;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TypeParameterizedTestCase&lt;Fixture,<sp/>Templates0,<sp/>Types&gt;<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>prefix,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>case_name,</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_names)<sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal">};</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_TYPED_TEST<sp/>||<sp/>GTEST_HAS_TYPED_TEST_P</highlight></codeline>
<codeline lineno="735"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>current<sp/>OS<sp/>stack<sp/>trace<sp/>as<sp/>a<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be<sp/>included<sp/>is<sp/>specified<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>gtest_stack_trace_depth<sp/>flag.<sp/><sp/>The<sp/>skip_count<sp/>parameter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specifies<sp/>the<sp/>number<sp/>of<sp/>top<sp/>frames<sp/>to<sp/>be<sp/>skipped,<sp/>which<sp/>doesn&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>count<sp/>against<sp/>the<sp/>number<sp/>of<sp/>frames<sp/>to<sp/>be<sp/>included.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>if<sp/>Foo()<sp/>calls<sp/>Bar(),<sp/>which<sp/>in<sp/>turn<sp/>calls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GetCurrentOsStackTraceExceptTop(...,<sp/>1),<sp/>Foo()<sp/>will<sp/>be<sp/>included<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>trace<sp/>but<sp/>Bar()<sp/>and<sp/>GetCurrentOsStackTraceExceptTop()<sp/>won&apos;t.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal">String<sp/><ref refid="namespacetesting_1_1internal_1f9f668c4c45e9655cd0567a8375c34a0" kindref="member">GetCurrentOsStackTraceExceptTop</ref>(UnitTest*<sp/>unit_test,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skip_count);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>failed<sp/>test<sp/>parts<sp/>in<sp/>the<sp/>given<sp/>test<sp/>result<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1ea1457d3f671c83a060c7221de36f307" kindref="member">GetFailedPartCount</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestResult*<sp/>result);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="gtest-internal_8h_12c2f05a173d1ce255815db3f0941a89d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_MESSAGE_(message,<sp/>result_type)<sp/>\</highlight></codeline>
<codeline lineno="755"><highlight class="preprocessor"><sp/><sp/>::testing::internal::AssertHelper(result_type,<sp/>__FILE__,<sp/>__LINE__,<sp/>message)<sp/>\</highlight></codeline>
<codeline lineno="756"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>=<sp/>::testing::Message()</highlight></codeline>
<codeline lineno="757"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758" refid="gtest-internal_8h_172658de9b27092fb1db0c03b9b710f0f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_FATAL_FAILURE_(message)<sp/>\</highlight></codeline>
<codeline lineno="759"><highlight class="preprocessor"><sp/><sp/>return<sp/>GTEST_MESSAGE_(message,<sp/>::testing::TPRT_FATAL_FAILURE)</highlight></codeline>
<codeline lineno="760"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="gtest-internal_8h_13f0f8842dd14a389859c49760088cdee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_NONFATAL_FAILURE_(message)<sp/>\</highlight></codeline>
<codeline lineno="762"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_(message,<sp/>::testing::TPRT_NONFATAL_FAILURE)</highlight></codeline>
<codeline lineno="763"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764" refid="gtest-internal_8h_14b58a8f280d5e2872738d4305404cc28" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_SUCCESS_(message)<sp/>\</highlight></codeline>
<codeline lineno="765"><highlight class="preprocessor"><sp/><sp/>GTEST_MESSAGE_(message,<sp/>::testing::TPRT_SUCCESS)</highlight></codeline>
<codeline lineno="766"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="gtest-internal_8h_10a353cb81f7d68f65063db098b73a8cf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="768"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="769"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>char*<sp/>gtest_msg<sp/>=<sp/>&quot;&quot;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="770"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>gtest_caught_expected<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="771"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="772"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>statement;<sp/>\</highlight></codeline>
<codeline lineno="773"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="774"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(expected_exception<sp/>const&amp;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="775"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_caught_expected<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="776"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="777"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="778"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg<sp/>=<sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="779"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expected_exception<sp/>&quot;.\n<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>a<sp/>different<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="780"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;type.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="781"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="782"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="783"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!gtest_caught_expected)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="784"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg<sp/>=<sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception<sp/>of<sp/>type<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="785"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#expected_exception<sp/>&quot;.\n<sp/><sp/>Actual:<sp/>it<sp/>throws<sp/>nothing.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="786"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="787"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="788"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="789"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testthrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="790"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(gtest_msg)</highlight></codeline>
<codeline lineno="791"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792" refid="gtest-internal_8h_1f532432189eeefbc5f0228a7eda6a3a4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_NO_THROW_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="793"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="794"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>char*<sp/>gtest_msg<sp/>=<sp/>&quot;&quot;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="795"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="796"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>statement;<sp/>\</highlight></codeline>
<codeline lineno="797"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="798"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="799"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg<sp/>=<sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>doesn&apos;t<sp/>throw<sp/>an<sp/>exception.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="800"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>throws.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="801"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="802"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="803"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="804"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnothrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="805"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(gtest_msg)</highlight></codeline>
<codeline lineno="806"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807" refid="gtest-internal_8h_1296441eb7d4240ae2378daac84516e72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="808"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="809"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>char*<sp/>gtest_msg<sp/>=<sp/>&quot;&quot;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="810"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>bool<sp/>gtest_caught_any<sp/>=<sp/>false;<sp/>\</highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>try<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="812"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>statement;<sp/>\</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="814"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>catch<sp/>(...)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="815"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_caught_any<sp/>=<sp/>true;<sp/>\</highlight></codeline>
<codeline lineno="816"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="817"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!gtest_caught_any)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="818"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg<sp/>=<sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>throws<sp/>an<sp/>exception.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="819"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>doesn&apos;t.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="821"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="823"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testanythrow_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="824"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(gtest_msg)</highlight></codeline>
<codeline lineno="825"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="827" refid="gtest-internal_8h_17953c0920da3a3bcf8256aa05cc49b9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_BOOLEAN_(boolexpr,<sp/>booltext,<sp/>actual,<sp/>expected,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="828"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"><sp/><sp/>if<sp/>(boolexpr)<sp/>\</highlight></codeline>
<codeline lineno="830"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>;<sp/>\</highlight></codeline>
<codeline lineno="831"><highlight class="preprocessor"><sp/><sp/>else<sp/>\</highlight></codeline>
<codeline lineno="832"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>fail(&quot;Value<sp/>of:<sp/>&quot;<sp/>booltext<sp/>&quot;\n<sp/><sp/>Actual:<sp/>&quot;<sp/>#actual<sp/>&quot;\nExpected:<sp/>&quot;<sp/>#expected)</highlight></codeline>
<codeline lineno="833"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834" refid="gtest-internal_8h_11e9beba69154c63eeeb9cb0d0d7904ab" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>fail)<sp/>\</highlight></codeline>
<codeline lineno="835"><highlight class="preprocessor"><sp/><sp/>GTEST_AMBIGUOUS_ELSE_BLOCKER_<sp/>\</highlight></codeline>
<codeline lineno="836"><highlight class="preprocessor"><sp/><sp/>if<sp/>(const<sp/>char*<sp/>gtest_msg<sp/>=<sp/>&quot;&quot;)<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="837"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::HasNewFatalFailureHelper<sp/>gtest_fatal_failure_checker;<sp/>\</highlight></codeline>
<codeline lineno="838"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/>statement;<sp/>}<sp/>\</highlight></codeline>
<codeline lineno="839"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(gtest_fatal_failure_checker.has_new_fatal_failure())<sp/>{<sp/>\</highlight></codeline>
<codeline lineno="840"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>gtest_msg<sp/>=<sp/>&quot;Expected:<sp/>&quot;<sp/>#statement<sp/>&quot;<sp/>doesn&apos;t<sp/>generate<sp/>new<sp/>fatal<sp/>&quot;<sp/>\</highlight></codeline>
<codeline lineno="841"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;failures<sp/>in<sp/>the<sp/>current<sp/>thread.\n&quot;<sp/>\</highlight></codeline>
<codeline lineno="842"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;<sp/><sp/>Actual:<sp/>it<sp/>does.&quot;;<sp/>\</highlight></codeline>
<codeline lineno="843"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>goto<sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_,<sp/>__LINE__);<sp/>\</highlight></codeline>
<codeline lineno="844"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/>\</highlight></codeline>
<codeline lineno="845"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>\</highlight></codeline>
<codeline lineno="846"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_CONCAT_TOKEN_(gtest_label_testnofatal_,<sp/>__LINE__):<sp/>\</highlight></codeline>
<codeline lineno="847"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>fail(gtest_msg)</highlight></codeline>
<codeline lineno="848"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Expands<sp/>to<sp/>the<sp/>name<sp/>of<sp/>the<sp/>class<sp/>that<sp/>implements<sp/>the<sp/>given<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="850" refid="gtest-internal_8h_1746d78de91616e1beb42c02d7bfaf8c6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)<sp/>\</highlight></codeline>
<codeline lineno="851"><highlight class="preprocessor"><sp/><sp/>test_case_name##_##test_name##_Test</highlight></codeline>
<codeline lineno="852"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>macro<sp/>for<sp/>defining<sp/>tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854" refid="gtest-internal_8h_10cc6e3639205bae2d72b3eb08d257e34" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_TEST_(test_case_name,<sp/>test_name,<sp/>parent_class,<sp/>parent_id)\</highlight></codeline>
<codeline lineno="855"><highlight class="preprocessor">class<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)<sp/>:<sp/>public<sp/>parent_class<sp/>{\</highlight></codeline>
<codeline lineno="856"><highlight class="preprocessor"><sp/>public:\</highlight></codeline>
<codeline lineno="857"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)()<sp/>{}\</highlight></codeline>
<codeline lineno="858"><highlight class="preprocessor"><sp/>private:\</highlight></codeline>
<codeline lineno="859"><highlight class="preprocessor"><sp/><sp/>virtual<sp/>void<sp/>TestBody();\</highlight></codeline>
<codeline lineno="860"><highlight class="preprocessor"><sp/><sp/>static<sp/>::testing::TestInfo*<sp/>const<sp/>test_info_;\</highlight></codeline>
<codeline lineno="861"><highlight class="preprocessor"><sp/><sp/>GTEST_DISALLOW_COPY_AND_ASSIGN_(\</highlight></codeline>
<codeline lineno="862"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name));\</highlight></codeline>
<codeline lineno="863"><highlight class="preprocessor">};\</highlight></codeline>
<codeline lineno="864"><highlight class="preprocessor">\</highlight></codeline>
<codeline lineno="865"><highlight class="preprocessor">::testing::TestInfo*<sp/>const<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)\</highlight></codeline>
<codeline lineno="866"><highlight class="preprocessor"><sp/><sp/>::test_info_<sp/>=\</highlight></codeline>
<codeline lineno="867"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>::testing::internal::MakeAndRegisterTestInfo(\</highlight></codeline>
<codeline lineno="868"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#test_case_name,<sp/>#test_name,<sp/>&quot;&quot;,<sp/>&quot;&quot;,<sp/>\</highlight></codeline>
<codeline lineno="869"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(parent_id),<sp/>\</highlight></codeline>
<codeline lineno="870"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class::SetUpTestCase,<sp/>\</highlight></codeline>
<codeline lineno="871"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_class::TearDownTestCase,<sp/>\</highlight></codeline>
<codeline lineno="872"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>::testing::internal::TestFactoryImpl&lt;\</highlight></codeline>
<codeline lineno="873"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)&gt;);\</highlight></codeline>
<codeline lineno="874"><highlight class="preprocessor">void<sp/>GTEST_TEST_CLASS_NAME_(test_case_name,<sp/>test_name)::TestBody()</highlight></codeline>
<codeline lineno="875"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_</highlight></codeline>
    </programlisting>
    <location file="/home/Mario/Escritorio/EC3/src/gtest/internal/gtest-internal.h"/>
  </compounddef>
</doxygen>
