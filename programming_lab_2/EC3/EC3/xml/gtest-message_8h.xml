<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="gtest-message_8h" kind="file">
    <compoundname>gtest-message.h</compoundname>
    <includes refid="gtest-string_8h" local="no">gtest/internal/gtest-string.h</includes>
    <includes refid="gtest-internal_8h" local="no">gtest/internal/gtest-internal.h</includes>
    <includedby refid="gtest_8h" local="no">Escritorio/EC3/src/gtest/gtest.h</includedby>
    <incdepgraph>
      <node id="408">
        <label>iomanip</label>
      </node>
      <node id="409">
        <label>limits</label>
      </node>
      <node id="401">
        <label>stdlib.h</label>
      </node>
      <node id="404">
        <label>string</label>
      </node>
      <node id="397">
        <label>Escritorio/EC3/src/gtest/gtest-message.h</label>
        <link refid="gtest-message.h"/>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="406" relation="include">
        </childnode>
      </node>
      <node id="399">
        <label>string.h</label>
      </node>
      <node id="398">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h"/>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="400" relation="include">
        </childnode>
      </node>
      <node id="400">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="401" relation="include">
        </childnode>
        <childnode refid="402" relation="include">
        </childnode>
        <childnode refid="403" relation="include">
        </childnode>
        <childnode refid="404" relation="include">
        </childnode>
        <childnode refid="405" relation="include">
        </childnode>
      </node>
      <node id="405">
        <label>sstream</label>
      </node>
      <node id="403">
        <label>iostream</label>
      </node>
      <node id="407">
        <label>ctype.h</label>
      </node>
      <node id="406">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h"/>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="407" relation="include">
        </childnode>
        <childnode refid="399" relation="include">
        </childnode>
        <childnode refid="408" relation="include">
        </childnode>
        <childnode refid="409" relation="include">
        </childnode>
        <childnode refid="410" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
        <childnode refid="411" relation="include">
        </childnode>
        <childnode refid="412" relation="include">
        </childnode>
      </node>
      <node id="410">
        <label>set</label>
      </node>
      <node id="412">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h"/>
        <childnode refid="400" relation="include">
        </childnode>
        <childnode refid="398" relation="include">
        </childnode>
      </node>
      <node id="402">
        <label>stdio.h</label>
      </node>
      <node id="411">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h"/>
        <childnode refid="398" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="419">
        <label>Escritorio/EC3/src/testcolagen.cpp</label>
        <link refid="testcolagen_8cpp"/>
      </node>
      <node id="425">
        <label>Escritorio/EC3/src/testpuerta.cpp</label>
        <link refid="testpuerta_8cpp"/>
      </node>
      <node id="423">
        <label>Escritorio/EC3/src/testplanta.cpp</label>
        <link refid="testplanta_8cpp"/>
      </node>
      <node id="424">
        <label>Escritorio/EC3/src/testprision.cpp</label>
        <link refid="testprision_8cpp"/>
      </node>
      <node id="417">
        <label>Escritorio/EC3/src/testarbol.cpp</label>
        <link refid="testarbol_8cpp"/>
      </node>
      <node id="415">
        <label>Escritorio/EC3/src/ec3.cpp</label>
        <link refid="ec3_8cpp"/>
      </node>
      <node id="421">
        <label>Escritorio/EC3/src/testllave.cpp</label>
        <link refid="testllave_8cpp"/>
      </node>
      <node id="418">
        <label>Escritorio/EC3/src/testcelda.cpp</label>
        <link refid="testcelda_8cpp"/>
      </node>
      <node id="413">
        <label>Escritorio/EC3/src/gtest/gtest-message.h</label>
        <link refid="gtest-message.h"/>
        <childnode refid="414" relation="include">
        </childnode>
      </node>
      <node id="416">
        <label>Escritorio/EC3/src/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h"/>
      </node>
      <node id="420">
        <label>Escritorio/EC3/src/testgrafo.cpp</label>
        <link refid="testgrafo_8cpp"/>
      </node>
      <node id="414">
        <label>Escritorio/EC3/src/gtest/gtest.h</label>
        <link refid="gtest_8h"/>
        <childnode refid="415" relation="include">
        </childnode>
        <childnode refid="416" relation="include">
        </childnode>
        <childnode refid="417" relation="include">
        </childnode>
        <childnode refid="418" relation="include">
        </childnode>
        <childnode refid="419" relation="include">
        </childnode>
        <childnode refid="420" relation="include">
        </childnode>
        <childnode refid="421" relation="include">
        </childnode>
        <childnode refid="422" relation="include">
        </childnode>
        <childnode refid="423" relation="include">
        </childnode>
        <childnode refid="424" relation="include">
        </childnode>
        <childnode refid="425" relation="include">
        </childnode>
      </node>
      <node id="422">
        <label>Escritorio/EC3/src/testpersona.cpp</label>
        <link refid="testpersona_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1Message" prot="public">testing::Message</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>defines<sp/>the<sp/>Message<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPORTANT<sp/>NOTE:<sp/>Due<sp/>to<sp/>limitation<sp/>of<sp/>the<sp/>C++<sp/>language,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leave<sp/>some<sp/>internal<sp/>implementation<sp/>details<sp/>in<sp/>this<sp/>header<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>They<sp/>are<sp/>clearly<sp/>marked<sp/>by<sp/>comments<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>code<sp/>is<sp/>NOT<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>by<sp/>a<sp/>user<sp/>directly,<sp/>and<sp/>is<sp/>subject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>CHANGE<sp/>WITHOUT<sp/>NOTICE.<sp/><sp/>Therefore<sp/>DO<sp/>NOT<sp/>DEPEND<sp/>ON<sp/>IT<sp/>in<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-internal_8h" kindref="compound">gtest/internal/gtest-internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Message<sp/>class<sp/>works<sp/>like<sp/>an<sp/>ostream<sp/>repeater.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Typical<sp/>usage:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>You<sp/>stream<sp/>a<sp/>bunch<sp/>of<sp/>values<sp/>to<sp/>a<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>It<sp/>will<sp/>remember<sp/>the<sp/>text<sp/>in<sp/>a<sp/>StrStream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>Then<sp/>you<sp/>stream<sp/>the<sp/>Message<sp/>object<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>causes<sp/>the<sp/>text<sp/>in<sp/>the<sp/>Message<sp/>to<sp/>be<sp/>streamed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::Message<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>foo<sp/>&lt;&lt;<sp/>1<sp/>&lt;&lt;<sp/>&quot;<sp/>!=<sp/>&quot;<sp/>&lt;&lt;<sp/>2;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>will<sp/>print<sp/>&quot;1<sp/>!=<sp/>2&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Message<sp/>is<sp/>not<sp/>intended<sp/>to<sp/>be<sp/>inherited<sp/>from.<sp/><sp/>In<sp/>particular,<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor<sp/>is<sp/>not<sp/>virtual.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>StrStream<sp/>behaves<sp/>differently<sp/>in<sp/>gcc<sp/>and<sp/>in<sp/>MSVC.<sp/><sp/>You</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>stream<sp/>a<sp/>NULL<sp/>char<sp/>pointer<sp/>to<sp/>it<sp/>in<sp/>the<sp/>former,<sp/>but<sp/>not<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>latter<sp/>(it<sp/>causes<sp/>an<sp/>access<sp/>violation<sp/>if<sp/>you<sp/>do).<sp/><sp/>The<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>hides<sp/>this<sp/>difference<sp/>by<sp/>treating<sp/>a<sp/>NULL<sp/>char<sp/>pointer<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classtesting_1_1Message" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Message" kindref="compound">Message</ref><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>type<sp/>of<sp/>basic<sp/>IO<sp/>manipulators<sp/>(endl,<sp/>ends,<sp/>and<sp/>flush)<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>narrow<sp/>streams.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84" refid="classtesting_1_1Message_1d6592b46e80a587f99786b9a5a30eb17" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>(*BasicNarrowIoManip)(std::ostream&amp;);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>an<sp/>empty<sp/>Message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>allocate<sp/>the<sp/>StrStream<sp/>separately<sp/>because<sp/>it<sp/>otherwise<sp/>each<sp/>use<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ASSERT/EXPECT<sp/>in<sp/>a<sp/>procedure<sp/>adds<sp/>over<sp/>200<sp/>bytes<sp/>to<sp/>the<sp/>procedure&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stack<sp/>frame<sp/>leading<sp/>to<sp/>huge<sp/>stack<sp/>frames<sp/>in<sp/>some<sp/>cases;<sp/>gcc<sp/>does<sp/>not<sp/>reuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>stack<sp/>space.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="classtesting_1_1Message_12d0cd79d4b67c118d558c4e5a435bc62" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message_12d0cd79d4b67c118d558c4e5a435bc62" kindref="member">Message</ref>()<sp/>:<sp/><ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>(new<sp/>internal::<ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classtesting_1_1Message_17785c2b6d507a324c48336929b2faf3d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message_12d0cd79d4b67c118d558c4e5a435bc62" kindref="member">Message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>msg)<sp/>:<sp/><ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>(new<sp/>internal::<ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref>)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref><sp/>&lt;&lt;<sp/>msg.<ref refid="classtesting_1_1Message_16143ce78324693b7b505c4a0c862c033" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>Message<sp/>from<sp/>a<sp/>C-string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="classtesting_1_1Message_1f7cdc4dce6187411fd1ce5cb96f55d63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message_12d0cd79d4b67c118d558c4e5a435bc62" kindref="member">Message</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>str)<sp/>:<sp/><ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>(new<sp/>internal::<ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref>)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref><sp/>&lt;&lt;<sp/>str;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="classtesting_1_1Message_1e205ceac5588868de2368db75c26a9cf" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message_1e205ceac5588868de2368db75c26a9cf" kindref="member">~Message</ref>()<sp/>{<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_SYMBIAN</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>value<sp/>(either<sp/>a<sp/>pointer<sp/>or<sp/>not)<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>StreamHelper(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1internal_1_1is__pointer" kindref="compound">internal::is_pointer&lt;T&gt;::type</ref>(),<sp/>value);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>non-pointer<sp/>value<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="115" refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>val)<sp/>{<ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member"></ref></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member">    ::GTestStreamToHelper</ref>(<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>,<sp/>val);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>pointer<sp/>value<sp/>to<sp/>this<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>function<sp/>is<sp/>an<sp/>overload<sp/>of<sp/>the<sp/>previous<sp/>one.<sp/><sp/>When<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>a<sp/>pointer<sp/>to<sp/>a<sp/>Message,<sp/>this<sp/>definition<sp/>will<sp/>be<sp/>used<sp/>as<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>more<sp/>specialized.<sp/><sp/>(The<sp/>C++<sp/>Standard,<sp/>section</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>[temp.func.order].)<sp/><sp/>If<sp/>you<sp/>stream<sp/>a<sp/>non-pointer,<sp/>then<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>previous<sp/>definition<sp/>will<sp/>be<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>reason<sp/>for<sp/>this<sp/>overload<sp/>is<sp/>that<sp/>streaming<sp/>a<sp/>NULL<sp/>pointer<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ostream<sp/>is<sp/>undefined<sp/>behavior.<sp/><sp/>Depending<sp/>on<sp/>the<sp/>compiler,<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>get<sp/>&quot;0&quot;,<sp/>&quot;(nil)&quot;,<sp/>&quot;(null)&quot;,<sp/>or<sp/>an<sp/>access<sp/>violation.<sp/><sp/>To</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>consistent<sp/>result<sp/>across<sp/>compilers,<sp/>we<sp/>always<sp/>treat<sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>as<sp/>&quot;(null)&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="134" refid="classtesting_1_1Message_168575c2d7ba8cb70456880e7b8422121" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(T*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>pointer)<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member"></ref></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member">      ::GTestStreamToHelper</ref>(<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>,<sp/>pointer);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_SYMBIAN</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>basic<sp/>IO<sp/>manipulators<sp/>are<sp/>overloaded<sp/>for<sp/>both<sp/>narrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>wide<sp/>streams,<sp/>we<sp/>have<sp/>to<sp/>provide<sp/>this<sp/>specialized<sp/>definition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>operator<sp/>&lt;&lt;,<sp/>even<sp/>though<sp/>its<sp/>body<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>templatized<sp/>version<sp/>above.<sp/><sp/>Without<sp/>this<sp/>definition,<sp/>streaming</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>endl<sp/>or<sp/>other<sp/>basic<sp/>IO<sp/>manipulators<sp/>to<sp/>Message<sp/>will<sp/>confuse<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classtesting_1_1Message_1253269cbcb113ee43bd69b2ef7f72140" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(<ref refid="classtesting_1_1Message_1d6592b46e80a587f99786b9a5a30eb17" kindref="member">BasicNarrowIoManip</ref><sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref><sp/>&lt;&lt;<sp/>val;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead<sp/>of<sp/>1/0,<sp/>we<sp/>want<sp/>to<sp/>see<sp/>true/false<sp/>for<sp/>bool<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classtesting_1_1Message_18ea6366f309631bbbb487ebff903f777" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>(b<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;true&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;false&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>two<sp/>overloads<sp/>allow<sp/>streaming<sp/>a<sp/>wide<sp/>C<sp/>string<sp/>to<sp/>a<sp/>Message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>using<sp/>the<sp/>UTF-8<sp/>encoding.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classtesting_1_1Message_11a609a356e5b6dbc1a8a7525254d11ae" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classtesting_1_1internal_1_1String_1f1ca1c0fab05b95e63f0cce726567065" kindref="member">internal::String::ShowWideCString</ref>(wide_c_str);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165" refid="classtesting_1_1Message_19056fdc99c3291e31fd3a0c0a22575ba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(</highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>wide_c_str)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/><ref refid="classtesting_1_1internal_1_1String_1f1ca1c0fab05b95e63f0cce726567065" kindref="member">internal::String::ShowWideCString</ref>(wide_c_str);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(const<sp/>::std::wstring&amp;<sp/>wstr);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Converts<sp/>the<sp/>given<sp/>wide<sp/>string<sp/>to<sp/>a<sp/>narrow<sp/>string<sp/>using<sp/>the<sp/>UTF-8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>encoding,<sp/>and<sp/>streams<sp/>the<sp/>result<sp/>to<sp/>this<sp/>Message<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/><ref refid="classtesting_1_1Message_1dfe842bea389a49e1864d7e7f54f8fdc" kindref="member">operator &lt;&lt;</ref>(const<sp/>::wstring&amp;<sp/>wstr);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="180"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>so<sp/>far<sp/>as<sp/>a<sp/>String.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Each<sp/>&apos;\0&apos;<sp/>character<sp/>in<sp/>the<sp/>buffer<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classtesting_1_1Message_16143ce78324693b7b505c4a0c862c033" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">internal::String</ref><sp/><ref refid="classtesting_1_1Message_16143ce78324693b7b505c4a0c862c033" kindref="member">GetString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_15639f5bf1b9983c51ef166207d2c62b8" kindref="member">internal::StrStreamToString</ref>(<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_SYMBIAN</highlight></codeline>
<codeline lineno="191"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>needed<sp/>as<sp/>the<sp/>Nokia<sp/>Symbian<sp/>Compiler<sp/>cannot<sp/>decide<sp/>between</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>const<sp/>T&amp;<sp/>and<sp/>const<sp/>T*<sp/>in<sp/>a<sp/>function<sp/>template.<sp/>The<sp/>Nokia<sp/>compiler<sp/>_can_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>decide<sp/>between<sp/>class<sp/>template<sp/>specializations<sp/>for<sp/>T<sp/>and<sp/>T*,<sp/>so<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>tr1::type_traits-like<sp/>is_pointer<sp/>works,<sp/>and<sp/>we<sp/>can<sp/>overload<sp/>on<sp/>that.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamHelper(<ref refid="structtesting_1_1internal_1_1bool__constant" kindref="compound">internal::true_type</ref><sp/>dummy,<sp/>T*<sp/>pointer)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pointer<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member"></ref></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member">      ::GTestStreamToHelper</ref>(<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>,<sp/>pointer);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>StreamHelper(<ref refid="namespacetesting_1_1internal_1cfd63a63b1a68bf3ac3502206fe5e1aa" kindref="member">internal::false_type</ref><sp/>dummy,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>value)<sp/>{<ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member"></ref></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="gtest-internal_8h_1e4bfe31edc2850cacf0d087ee1681e22" kindref="member">    ::GTestStreamToHelper</ref>(<ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>,<sp/>value);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_SYMBIAN</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We&apos;ll<sp/>hold<sp/>the<sp/>text<sp/>streamed<sp/>to<sp/>this<sp/>object<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210" refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">internal::StrStream</ref>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message_17e03bff5728112914f4c1abba631d25a" kindref="member">ss_</ref>;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>declare<sp/>(but<sp/>don&apos;t<sp/>implement)<sp/>this<sp/>to<sp/>prevent<sp/>the<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>implementing<sp/>the<sp/>assignment<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message_13f7cad27f17733b0797950b80810de0c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;);</highlight></codeline>
<codeline lineno="215"><highlight class="normal">};</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Streams<sp/>a<sp/>Message<sp/>to<sp/>an<sp/>ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="namespacetesting_165c959bf8be30a10b2a122c50f36305b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/><ref refid="namespacetesting_165c959bf8be30a10b2a122c50f36305b" kindref="member">operator &lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>sb)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>sb.<ref refid="classtesting_1_1Message_16143ce78324693b7b505c4a0c862c033" kindref="member">GetString</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal">}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_GTEST_MESSAGE_H_</highlight></codeline>
    </programlisting>
    <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest-message.h"/>
  </compounddef>
</doxygen>
