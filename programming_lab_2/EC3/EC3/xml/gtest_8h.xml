<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.5.2">
  <compounddef id="gtest_8h" kind="file">
    <compoundname>gtest.h</compoundname>
    <includes local="no">limits</includes>
    <includes refid="gtest-internal_8h" local="no">gtest/internal/gtest-internal.h</includes>
    <includes refid="gtest-string_8h" local="no">gtest/internal/gtest-string.h</includes>
    <includes refid="gtest-death-test_8h" local="no">gtest/gtest-death-test.h</includes>
    <includes refid="gtest-message_8h" local="no">gtest/gtest-message.h</includes>
    <includes refid="gtest-param-test_8h" local="no">gtest/gtest-param-test.h</includes>
    <includes refid="gtest__prod_8h" local="no">gtest/gtest_prod.h</includes>
    <includes refid="gtest-test-part_8h" local="no">gtest/gtest-test-part.h</includes>
    <includes refid="gtest-typed-test_8h" local="no">gtest/gtest-typed-test.h</includes>
    <includes refid="gtest__pred__impl_8h" local="no">gtest/gtest_pred_impl.h</includes>
    <includedby refid="ec3_8cpp" local="no">Escritorio/EC3/src/ec3.cpp</includedby>
    <includedby refid="gtest-spi_8h" local="no">Escritorio/EC3/src/gtest/gtest-spi.h</includedby>
    <includedby refid="testarbol_8cpp" local="no">Escritorio/EC3/src/testarbol.cpp</includedby>
    <includedby refid="testcelda_8cpp" local="no">Escritorio/EC3/src/testcelda.cpp</includedby>
    <includedby refid="testcolagen_8cpp" local="no">Escritorio/EC3/src/testcolagen.cpp</includedby>
    <includedby refid="testgrafo_8cpp" local="no">Escritorio/EC3/src/testgrafo.cpp</includedby>
    <includedby refid="testllave_8cpp" local="no">Escritorio/EC3/src/testllave.cpp</includedby>
    <includedby refid="testpersona_8cpp" local="no">Escritorio/EC3/src/testpersona.cpp</includedby>
    <includedby refid="testplanta_8cpp" local="no">Escritorio/EC3/src/testplanta.cpp</includedby>
    <includedby refid="testprision_8cpp" local="no">Escritorio/EC3/src/testprision.cpp</includedby>
    <includedby refid="testpuerta_8cpp" local="no">Escritorio/EC3/src/testpuerta.cpp</includedby>
    <incdepgraph>
      <node id="539">
        <label>iomanip</label>
      </node>
      <node id="529">
        <label>limits</label>
      </node>
      <node id="532">
        <label>stdlib.h</label>
      </node>
      <node id="550">
        <label>gtest/gtest-test-part.h</label>
        <link refid="gtest-test-part_8h"/>
        <childnode refid="551" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="547">
        <label>gtest/gtest-param-test.h</label>
        <link refid="gtest-param-test_8h"/>
        <childnode refid="548" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
      </node>
      <node id="535">
        <label>string</label>
      </node>
      <node id="546">
        <label>gtest/gtest-message.h</label>
        <link refid="gtest-message_8h"/>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
      </node>
      <node id="544">
        <label>gtest/gtest-death-test.h</label>
        <link refid="gtest-death-test_8h"/>
        <childnode refid="545" relation="include">
        </childnode>
      </node>
      <node id="545">
        <label>gtest/internal/gtest-death-test-internal.h</label>
        <link refid="gtest-death-test-internal_8h"/>
        <childnode refid="530" relation="include">
        </childnode>
      </node>
      <node id="552">
        <label>gtest/gtest-typed-test.h</label>
        <link refid="gtest-typed-test_8h"/>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="538">
        <label>string.h</label>
      </node>
      <node id="541">
        <label>gtest/internal/gtest-string.h</label>
        <link refid="gtest-string_8h"/>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="531" relation="include">
        </childnode>
      </node>
      <node id="531">
        <label>gtest/internal/gtest-port.h</label>
        <link refid="gtest-port_8h"/>
        <childnode refid="532" relation="include">
        </childnode>
        <childnode refid="533" relation="include">
        </childnode>
        <childnode refid="534" relation="include">
        </childnode>
        <childnode refid="535" relation="include">
        </childnode>
        <childnode refid="536" relation="include">
        </childnode>
      </node>
      <node id="548">
        <label>utility</label>
      </node>
      <node id="536">
        <label>sstream</label>
      </node>
      <node id="528">
        <label>Escritorio/EC3/src/gtest/gtest.h</label>
        <link refid="gtest.h"/>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="530" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="544" relation="include">
        </childnode>
        <childnode refid="546" relation="include">
        </childnode>
        <childnode refid="547" relation="include">
        </childnode>
        <childnode refid="549" relation="include">
        </childnode>
        <childnode refid="550" relation="include">
        </childnode>
        <childnode refid="552" relation="include">
        </childnode>
        <childnode refid="553" relation="include">
        </childnode>
      </node>
      <node id="551">
        <label>iosfwd</label>
      </node>
      <node id="534">
        <label>iostream</label>
      </node>
      <node id="537">
        <label>ctype.h</label>
      </node>
      <node id="530">
        <label>gtest/internal/gtest-internal.h</label>
        <link refid="gtest-internal_8h"/>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="537" relation="include">
        </childnode>
        <childnode refid="538" relation="include">
        </childnode>
        <childnode refid="539" relation="include">
        </childnode>
        <childnode refid="529" relation="include">
        </childnode>
        <childnode refid="540" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
        <childnode refid="542" relation="include">
        </childnode>
        <childnode refid="543" relation="include">
        </childnode>
      </node>
      <node id="553">
        <label>gtest/gtest_pred_impl.h</label>
        <link refid="gtest__pred__impl_8h"/>
      </node>
      <node id="540">
        <label>set</label>
      </node>
      <node id="543">
        <label>gtest/internal/gtest-type-util.h</label>
        <link refid="gtest-type-util_8h"/>
        <childnode refid="531" relation="include">
        </childnode>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="533">
        <label>stdio.h</label>
      </node>
      <node id="542">
        <label>gtest/internal/gtest-filepath.h</label>
        <link refid="gtest-filepath_8h"/>
        <childnode refid="541" relation="include">
        </childnode>
      </node>
      <node id="549">
        <label>gtest/gtest_prod.h</label>
        <link refid="gtest__prod_8h"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="559">
        <label>Escritorio/EC3/src/testcolagen.cpp</label>
        <link refid="testcolagen_8cpp"/>
      </node>
      <node id="565">
        <label>Escritorio/EC3/src/testpuerta.cpp</label>
        <link refid="testpuerta_8cpp"/>
      </node>
      <node id="563">
        <label>Escritorio/EC3/src/testplanta.cpp</label>
        <link refid="testplanta_8cpp"/>
      </node>
      <node id="564">
        <label>Escritorio/EC3/src/testprision.cpp</label>
        <link refid="testprision_8cpp"/>
      </node>
      <node id="557">
        <label>Escritorio/EC3/src/testarbol.cpp</label>
        <link refid="testarbol_8cpp"/>
      </node>
      <node id="555">
        <label>Escritorio/EC3/src/ec3.cpp</label>
        <link refid="ec3_8cpp"/>
      </node>
      <node id="561">
        <label>Escritorio/EC3/src/testllave.cpp</label>
        <link refid="testllave_8cpp"/>
      </node>
      <node id="558">
        <label>Escritorio/EC3/src/testcelda.cpp</label>
        <link refid="testcelda_8cpp"/>
      </node>
      <node id="556">
        <label>Escritorio/EC3/src/gtest/gtest-spi.h</label>
        <link refid="gtest-spi_8h"/>
      </node>
      <node id="560">
        <label>Escritorio/EC3/src/testgrafo.cpp</label>
        <link refid="testgrafo_8cpp"/>
      </node>
      <node id="554">
        <label>Escritorio/EC3/src/gtest/gtest.h</label>
        <link refid="gtest.h"/>
        <childnode refid="555" relation="include">
        </childnode>
        <childnode refid="556" relation="include">
        </childnode>
        <childnode refid="557" relation="include">
        </childnode>
        <childnode refid="558" relation="include">
        </childnode>
        <childnode refid="559" relation="include">
        </childnode>
        <childnode refid="560" relation="include">
        </childnode>
        <childnode refid="561" relation="include">
        </childnode>
        <childnode refid="562" relation="include">
        </childnode>
        <childnode refid="563" relation="include">
        </childnode>
        <childnode refid="564" relation="include">
        </childnode>
        <childnode refid="565" relation="include">
        </childnode>
      </node>
      <node id="562">
        <label>Escritorio/EC3/src/testpersona.cpp</label>
        <link refid="testpersona_8cpp"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classtesting_1_1AssertionResult" prot="public">testing::AssertionResult</innerclass>
    <innerclass refid="classtesting_1_1Test" prot="public">testing::Test</innerclass>
    <innerclass refid="structtesting_1_1Test_1_1Setup__should__be__spelled__SetUp" prot="package">testing::Test::Setup_should_be_spelled_SetUp</innerclass>
    <innerclass refid="classtesting_1_1TestInfo" prot="public">testing::TestInfo</innerclass>
    <innerclass refid="classtesting_1_1Environment" prot="public">testing::Environment</innerclass>
    <innerclass refid="structtesting_1_1Environment_1_1Setup__should__be__spelled__SetUp" prot="private">testing::Environment::Setup_should_be_spelled_SetUp</innerclass>
    <innerclass refid="classtesting_1_1UnitTest" prot="public">testing::UnitTest</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1EqHelper" prot="public">testing::internal::EqHelper</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1EqHelper_3_01true_01_4" prot="public">testing::internal::EqHelper&lt; true &gt;</innerclass>
    <innerclass refid="classtesting_1_1internal_1_1AssertHelper" prot="public">testing::internal::AssertHelper</innerclass>
    <innernamespace refid="namespacetesting">testing</innernamespace>
    <innernamespace refid="namespacetesting_1_1internal">testing::internal</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gtest_8h_159438692ad37b6d6ce9cc1930b906391" prot="public" static="no">
        <name>GTEST_IMPL_CMP_HELPER_</name>
        <param><defname>op_name</defname></param>
        <param><defname>op</defname></param>
        <initializer>template &lt;typename T1, typename T2&gt;\
AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
                                   const T1&amp; val1, const T2&amp; val2) {\
  if (val1 op val2) {\
    return AssertionSuccess();\
  } else {\
    Message msg;\
    msg &lt;&lt; &quot;Expected: (&quot; &lt;&lt; expr1 &lt;&lt; &quot;) &quot; #op &quot; (&quot; &lt;&lt; expr2\
        &lt;&lt; &quot;), actual: &quot; &lt;&lt; FormatForComparisonFailureMessage(val1, val2)\
        &lt;&lt; &quot; vs &quot; &lt;&lt; FormatForComparisonFailureMessage(val2, val1);\
    return AssertionFailure(msg);\
  }\
}\
AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \
                                   BiggestInt val1, BiggestInt val2);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="724" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="709" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1056e7339ae81e48538fae49e20995c60" prot="public" static="no">
        <name>ADD_FAILURE</name>
        <param></param>
        <initializer>GTEST_NONFATAL_FAILURE_(&quot;Failed&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="981" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="981" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_16585f842dda141356b034c8fa99fe50b" prot="public" static="no">
        <name>FAIL</name>
        <param></param>
        <initializer>GTEST_FATAL_FAILURE_(&quot;Failed&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="984" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="984" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1397afb4cfffe2967500d24102fa8a5ec" prot="public" static="no">
        <name>SUCCEED</name>
        <param></param>
        <initializer>GTEST_SUCCESS_(&quot;Succeeded&quot;)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="987" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="987" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_13575afec9214ef9782034ae9305102f5" prot="public" static="no">
        <name>EXPECT_THROW</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <initializer>GTEST_TEST_THROW_(statement, expected_exception, GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="999" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="998" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_11b299f9d875d6725e27d8cce8c4f1946" prot="public" static="no">
        <name>EXPECT_NO_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_NO_THROW_(statement, GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1001" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1000" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1b5eafb78f18c7f678844c12342f5e0fb" prot="public" static="no">
        <name>EXPECT_ANY_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_ANY_THROW_(statement, GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1003" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1002" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1fe452d4e4b830946c36434fb2043cfa2" prot="public" static="no">
        <name>ASSERT_THROW</name>
        <param><defname>statement</defname></param>
        <param><defname>expected_exception</defname></param>
        <initializer>GTEST_TEST_THROW_(statement, expected_exception, GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1005" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1004" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1847284796652b28fae5da442c1525c9a" prot="public" static="no">
        <name>ASSERT_NO_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_NO_THROW_(statement, GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1007" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1006" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1150089479ffce17438115a50442c56ca" prot="public" static="no">
        <name>ASSERT_ANY_THROW</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_ANY_THROW_(statement, GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1009" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1008" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_10954fea9252af6aea1df2d8e6e6caa0e" prot="public" static="no">
        <name>EXPECT_TRUE</name>
        <param><defname>condition</defname></param>
        <initializer>GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \
                      GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1014" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1012" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1588210b9be54e776cc7901a14a21bd31" prot="public" static="no">
        <name>EXPECT_FALSE</name>
        <param><defname>condition</defname></param>
        <initializer>GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \
                      GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1017" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1015" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1bc8edefe2dbf52f5d12542a8e0acc3a3" prot="public" static="no">
        <name>ASSERT_TRUE</name>
        <param><defname>condition</defname></param>
        <initializer>GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \
                      GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1020" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1018" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_19e00bbd67f469acb8893a2ec0a08806d" prot="public" static="no">
        <name>ASSERT_FALSE</name>
        <param><defname>condition</defname></param>
        <initializer>GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \
                      GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1023" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1021" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_125e2998b97daf08eafcc1b5abc7dd622" prot="public" static="no">
        <name>EXPECT_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal:: \
                      EqHelper&lt;GTEST_IS_NULL_LITERAL_(expected)&gt;::Compare, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1078" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1075" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_135f03ed1d38bce3c0e3854fe391feca9" prot="public" static="no">
        <name>EXPECT_NE</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE, expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1080" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1079" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1b390c93c4955deac6112e6653661a0dd" prot="public" static="no">
        <name>EXPECT_LE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1082" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1081" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_155bda7934729999a4ab79c534b6c24dc" prot="public" static="no">
        <name>EXPECT_LT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1084" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1083" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1728dbe0c8d6e93c4e5a192b7296a2ab1" prot="public" static="no">
        <name>EXPECT_GE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1086" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1085" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_121ab104b356bb282b221b95387cf31eb" prot="public" static="no">
        <name>EXPECT_GT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1088" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1087" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1f2f962e2200ec490248e50436826cc60" prot="public" static="no">
        <name>ASSERT_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal:: \
                      EqHelper&lt;GTEST_IS_NULL_LITERAL_(expected)&gt;::Compare, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1093" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1090" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_18a787c812c3e44b173da4f60ad83e869" prot="public" static="no">
        <name>ASSERT_NE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1095" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1094" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_13e6b1f3aa6de97af096edf1a32e45bb2" prot="public" static="no">
        <name>ASSERT_LE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1097" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1096" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1eeb3d8146f648fc6be63b975a9e243bd" prot="public" static="no">
        <name>ASSERT_LT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1099" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_183affb552bff41687f6a6631acd5e2ca" prot="public" static="no">
        <name>ASSERT_GE</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1101" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1f2f5a56962986487f93b14f99db48e91" prot="public" static="no">
        <name>ASSERT_GT</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1103" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_10876b77880bfd56fe012815bc4ff9ed5" prot="public" static="no">
        <name>EXPECT_STREQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1122" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1647e43522cc2175b566ba531b461a0b5" prot="public" static="no">
        <name>EXPECT_STRNE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1124" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_19fa7428fad648293f15d8d59558c6d15" prot="public" static="no">
        <name>EXPECT_STRCASEEQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1126" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1aeea193c70fcfc82b0c83c3dc51307dd" prot="public" static="no">
        <name>EXPECT_STRCASENE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1128" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1089f4a9f6397a8d03717b07c4ccf2704" prot="public" static="no">
        <name>ASSERT_STREQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1131" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1130" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1bd0f5611645bebac41d8f9f5434dfa89" prot="public" static="no">
        <name>ASSERT_STRNE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1133" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1a5730f5d00d9fc0cc84ad1ed7a221beb" prot="public" static="no">
        <name>ASSERT_STRCASEEQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1135" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_190d237b56ead141b6a1f194d2500a129" prot="public" static="no">
        <name>ASSERT_STRCASENE</name>
        <param><defname>s1</defname></param>
        <param><defname>s2</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1137" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1e1c0b7434cf078fda15a96eadea0dc68" prot="public" static="no">
        <name>EXPECT_FLOAT_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1155" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1153" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_11341fe299076bdac4e9a04d7f42f7e79" prot="public" static="no">
        <name>EXPECT_DOUBLE_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1159" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1b595d36cf2b1e35ce5a3035432b0ba9c" prot="public" static="no">
        <name>ASSERT_FLOAT_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1163" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1161" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_183dda6fa372bc1f88db2f29a00de147a" prot="public" static="no">
        <name>ASSERT_DOUBLE_EQ</name>
        <param><defname>expected</defname></param>
        <param><defname>actual</defname></param>
        <initializer>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;, \
                      expected, actual)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1167" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1165" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_129bed5ba2dfd25740dfecc27eaaaa6e2" prot="public" static="no">
        <name>EXPECT_NEAR</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <param><defname>abs_error</defname></param>
        <initializer>EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \
                      val1, val2, abs_error)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1171" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1e50b7af8705487a5ce950fa9851ac760" prot="public" static="no">
        <name>ASSERT_NEAR</name>
        <param><defname>val1</defname></param>
        <param><defname>val2</defname></param>
        <param><defname>abs_error</defname></param>
        <initializer>ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, \
                      val1, val2, abs_error)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1175" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1173" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1b957ba33b4f4c2b1418ae88fc659982f" prot="public" static="no">
        <name>ASSERT_NO_FATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_FATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1226" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_172b583d5983c08d7126b36ca5e59be23" prot="public" static="no">
        <name>EXPECT_NO_FATAL_FAILURE</name>
        <param><defname>statement</defname></param>
        <initializer>GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_NONFATAL_FAILURE_)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1228" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_103d8a92d5a8cf13e60510636300807b2" prot="public" static="no">
        <name>SCOPED_TRACE</name>
        <param><defname>message</defname></param>
        <initializer>::<ref refid="classtesting_1_1internal_1_1ScopedTrace" kindref="compound">testing::internal::ScopedTrace</ref> GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)(\
    __FILE__, __LINE__, ::<ref refid="classtesting_1_1Message" kindref="compound">testing::Message</ref>() &lt;&lt; (message))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1243" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1598efb903152a27abbe3562ea890d1b9" prot="public" static="no">
        <name>TEST</name>
        <param><defname>test_case_name</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>GTEST_TEST_(test_case_name, test_name,\
              ::<ref refid="classtesting_1_1Test" kindref="compound">testing::Test</ref>, ::testing::internal::GetTestTypeId())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1273" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1271" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_165252d195eb5c09683b70370e9447b2f" prot="public" static="no">
        <name>TEST_F</name>
        <param><defname>test_fixture</defname></param>
        <param><defname>test_name</defname></param>
        <initializer>GTEST_TEST_(test_fixture, test_name, test_fixture,\
              ::testing::internal::GetTypeId&lt;test_fixture&gt;())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1304" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1302" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="gtest_8h_1e5b480275b42e3957841ee3e7acf6dbc" prot="public" static="no">
        <name>RUN_ALL_TESTS</name>
        <param></param>
        <initializer>(::testing::UnitTest::GetInstance()-&gt;Run())</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" line="1313" bodyfile="/home/Mario/Escritorio/EC3/src/gtest/gtest.h" bodystart="1312" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>2005,<sp/>Google<sp/>Inc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>All<sp/>rights<sp/>reserved.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>met:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>copyright<sp/>notice,<sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>documentation<sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distribution.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>*<sp/>Neither<sp/>the<sp/>name<sp/>of<sp/>Google<sp/>Inc.<sp/>nor<sp/>the<sp/>names<sp/>of<sp/>its</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>contributors<sp/>may<sp/>be<sp/>used<sp/>to<sp/>endorse<sp/>or<sp/>promote<sp/>products<sp/>derived<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>software<sp/>without<sp/>specific<sp/>prior<sp/>written<sp/>permission.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>COPYRIGHT<sp/>HOLDERS<sp/>AND<sp/>CONTRIBUTORS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>ANY<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>COPYRIGHT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OWNER<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>(INCLUDING,<sp/>BUT<sp/>NOT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="comment">//<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;<sp/>LOSS<sp/>OF<sp/>USE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND<sp/>ON<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="comment">//<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>OF<sp/>THIS<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>wan@google.com<sp/>(Zhanyong<sp/>Wan)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Google<sp/>C++<sp/>Testing<sp/>Framework<sp/>(Google<sp/>Test)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>header<sp/>file<sp/>defines<sp/>the<sp/>public<sp/>API<sp/>for<sp/>Google<sp/>Test.<sp/><sp/>It<sp/>should<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>included<sp/>by<sp/>any<sp/>test<sp/>program<sp/>that<sp/>uses<sp/>Google<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IMPORTANT<sp/>NOTE:<sp/>Due<sp/>to<sp/>limitation<sp/>of<sp/>the<sp/>C++<sp/>language,<sp/>we<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">//<sp/>leave<sp/>some<sp/>internal<sp/>implementation<sp/>details<sp/>in<sp/>this<sp/>header<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>They<sp/>are<sp/>clearly<sp/>marked<sp/>by<sp/>comments<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Such<sp/>code<sp/>is<sp/>NOT<sp/>meant<sp/>to<sp/>be<sp/>used<sp/>by<sp/>a<sp/>user<sp/>directly,<sp/>and<sp/>is<sp/>subject</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>CHANGE<sp/>WITHOUT<sp/>NOTICE.<sp/><sp/>Therefore<sp/>DO<sp/>NOT<sp/>DEPEND<sp/>ON<sp/>IT<sp/>in<sp/>a<sp/>user</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Acknowledgment:<sp/>Google<sp/>Test<sp/>borrowed<sp/>the<sp/>idea<sp/>of<sp/>automatic<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>registration<sp/>from<sp/>Barthelemy<sp/>Dagenais&apos;<sp/>(barthelemy@prologique.com)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>easyUnit<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>platform<sp/>macros<sp/>are<sp/>used<sp/>throughout<sp/>Google<sp/>Test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>_WIN32_WCE<sp/><sp/><sp/><sp/><sp/><sp/>Windows<sp/>CE<sp/><sp/><sp/><sp/><sp/>(set<sp/>in<sp/>project<sp/>files)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>even<sp/>though<sp/>_MSC_VER<sp/>and<sp/>_WIN32_WCE<sp/>really<sp/>indicate<sp/>a<sp/>compiler</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>a<sp/>Win32<sp/>implementation,<sp/>respectively,<sp/>we<sp/>use<sp/>them<sp/>to<sp/>indicate<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//<sp/>combination<sp/>of<sp/>compiler<sp/>-<sp/>Win<sp/>32<sp/>API<sp/>-<sp/>C<sp/>library,<sp/>since<sp/>the<sp/>code<sp/>currently</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>supports:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>proper<sp/>with<sp/>Visual<sp/>C++<sp/>and<sp/>MS<sp/>C<sp/>library<sp/>(_MSC_VER<sp/>&amp;&amp;<sp/>!_WIN32_WCE)<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Windows<sp/>Mobile<sp/>with<sp/>Visual<sp/>C++<sp/>and<sp/>no<sp/>C<sp/>library<sp/>(_WIN32_WCE).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-internal_8h" kindref="compound">gtest/internal/gtest-internal.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-string_8h" kindref="compound">gtest/internal/gtest-string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-death-test_8h" kindref="compound">gtest/gtest-death-test.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-message_8h" kindref="compound">gtest/gtest-message.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-param-test_8h" kindref="compound">gtest/gtest-param-test.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest__prod_8h" kindref="compound">gtest/gtest_prod.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-test-part_8h" kindref="compound">gtest/gtest-test-part.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest-typed-test_8h" kindref="compound">gtest/gtest-typed-test.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Depending<sp/>on<sp/>the<sp/>platform,<sp/>different<sp/>string<sp/>classes<sp/>are<sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>On<sp/>Windows,<sp/>::std::string<sp/>compiles<sp/>only<sp/>when<sp/>exceptions<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>enabled.<sp/><sp/>On<sp/>Linux,<sp/>in<sp/>addition<sp/>to<sp/>::std::string,<sp/>Google<sp/>also<sp/>makes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>of<sp/>class<sp/>::string,<sp/>which<sp/>has<sp/>the<sp/>same<sp/>interface<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>but<sp/>has<sp/>a<sp/>different<sp/>implementation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>can<sp/>tell<sp/>us<sp/>whether<sp/>::std::string<sp/>is<sp/>available<sp/>in<sp/>his</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment<sp/>by<sp/>defining<sp/>the<sp/>macro<sp/>GTEST_HAS_STD_STRING<sp/>to<sp/>either<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>0<sp/>on<sp/>the<sp/>compiler<sp/>command<sp/>line.<sp/><sp/>He<sp/>can<sp/>also<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING<sp/>to<sp/>1<sp/>to<sp/>indicate<sp/>that<sp/>::string<sp/>is<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>AND<sp/>is<sp/>a<sp/>distinct<sp/>type<sp/>to<sp/>::std::string,<sp/>or<sp/>define<sp/>it<sp/>to<sp/>0<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>indicate<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>user&apos;s<sp/>::std::string<sp/>and<sp/>::string<sp/>are<sp/>the<sp/>same<sp/>class<sp/>due<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//<sp/>aliasing,<sp/>he<sp/>should<sp/>define<sp/>GTEST_HAS_STD_STRING<sp/>to<sp/>1<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING<sp/>to<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>user<sp/>doesn&apos;t<sp/>define<sp/>GTEST_HAS_STD_STRING<sp/>and/or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GTEST_HAS_GLOBAL_STRING,<sp/>they<sp/>are<sp/>defined<sp/>heuristically.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">testing<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>upper<sp/>limit<sp/>for<sp/>valid<sp/>stack<sp/>trace<sp/>depths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="namespacetesting_19cac1f5e8a177c033ab6b61c230dc0b8" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_19cac1f5e8a177c033ab6b61c230dc0b8" kindref="member">kMaxStackTraceDepth</ref><sp/>=<sp/>100;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>specifies<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>stack<sp/>frames<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>printed<sp/>in<sp/>a<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><ref refid="namespacetesting_1984f1c280ed67aa6fba294883a6fb0c9" kindref="member">GTEST_DECLARE_int32_</ref>(stack_trace_depth);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>flag<sp/>controls<sp/>whether<sp/>Google<sp/>Test<sp/>includes<sp/>Google<sp/>Test<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="comment">//<sp/>stack<sp/>frames<sp/>in<sp/>failure<sp/>stack<sp/>traces.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="namespacetesting_1d442d8de4238b60c7e5971ff926a433b" kindref="member">GTEST_DECLARE_bool_</ref>(show_internal_stack_frames);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">GTestFlagSaver;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Converts<sp/>a<sp/>streamable<sp/>value<sp/>to<sp/>a<sp/>String.<sp/><sp/>A<sp/>NULL<sp/>pointer<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>converted<sp/>to<sp/>&quot;(null)&quot;.<sp/><sp/>When<sp/>the<sp/>input<sp/>value<sp/>is<sp/>a<sp/>::string,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::std::string,<sp/>::wstring,<sp/>or<sp/>::std::wstring<sp/>object,<sp/>each<sp/>NUL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>character<sp/>in<sp/>it<sp/>is<sp/>replaced<sp/>with<sp/>&quot;\\0&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Declared<sp/>in<sp/>gtest-internal.h<sp/>but<sp/>defined<sp/>here,<sp/>so<sp/>that<sp/>it<sp/>has<sp/>access</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>definition<sp/>of<sp/>the<sp/>Message<sp/>class,<sp/>required<sp/>by<sp/>the<sp/>ARM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>compiler.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="119" refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" refkind="member"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_10406702dd38ef95c6b71991da985c6a5" kindref="member">StreamableToString</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>streamable)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="classtesting_1_1Message" kindref="compound">Message</ref>()<sp/>&lt;&lt;<sp/>streamable).GetString();</highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>for<sp/>indicating<sp/>whether<sp/>an<sp/>assertion<sp/>was<sp/>successful.<sp/><sp/>When</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>assertion<sp/>wasn&apos;t<sp/>successful,<sp/>the<sp/>AssertionResult<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="comment">//<sp/>remembers<sp/>a<sp/>non-empty<sp/>message<sp/>that<sp/>described<sp/>how<sp/>it<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>useful<sp/>for<sp/>defining<sp/>predicate-format<sp/>functions<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>used<sp/>with<sp/>predicate<sp/>assertions<sp/>(ASSERT_PRED_FORMAT*,<sp/>etc).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>of<sp/>AssertionResult<sp/>is<sp/>private.<sp/><sp/>To<sp/>create<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instance<sp/>of<sp/>this<sp/>class,<sp/>use<sp/>one<sp/>of<sp/>the<sp/>factory<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(AssertionSuccess()<sp/>and<sp/>AssertionFailure()).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>in<sp/>order<sp/>to<sp/>be<sp/>able<sp/>to<sp/>write:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Verifies<sp/>that<sp/>Foo()<sp/>returns<sp/>an<sp/>even<sp/>number.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_PRED_FORMAT1(IsEven,<sp/>Foo());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">//<sp/>you<sp/>just<sp/>need<sp/>to<sp/>define:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::AssertionResult<sp/>IsEven(const<sp/>char*<sp/>expr,<sp/>int<sp/>n)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>if<sp/>((n<sp/>%<sp/>2)<sp/>==<sp/>0)<sp/>return<sp/>testing::AssertionSuccess();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Message<sp/>msg;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>&quot;Expected:<sp/>&quot;<sp/>&lt;&lt;<sp/>expr<sp/>&lt;&lt;<sp/>&quot;<sp/>is<sp/>even\n&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/><sp/>Actual:<sp/>it&apos;s<sp/>&quot;<sp/>&lt;&lt;<sp/>n;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>return<sp/>testing::AssertionFailure(msg);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>Foo()<sp/>returns<sp/>5,<sp/>you<sp/>will<sp/>see<sp/>the<sp/>following<sp/>message:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Expected:<sp/>Foo()<sp/>is<sp/>even</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Actual:<sp/>it&apos;s<sp/>5</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156" refid="classtesting_1_1AssertionResult" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Declares<sp/>factory<sp/>functions<sp/>for<sp/>making<sp/>successful<sp/>and<sp/>failed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assertion<sp/>results<sp/>as<sp/>friends.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1AssertionResult_1267aaa36088ac85912d7419f8fe0341f" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1AssertionResult_1985d9ec766c8ba052e1608c35406e355" kindref="member">AssertionFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>assertion<sp/>succeeded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164" refid="classtesting_1_1AssertionResult_1ab619647c071b6e2cca9cd1efa2d4bd6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1AssertionResult_1ab619647c071b6e2cca9cd1efa2d4bd6" kindref="member">operator bool</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult_115bb10ebc15892d1ae7d9cd4b1d61901" kindref="member">failure_message_</ref>.<ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>()<sp/>==<sp/>NULL;<sp/>}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>assertion&apos;s<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classtesting_1_1AssertionResult_1cea6bc1ad95e884256239f66b9bcc932" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1AssertionResult_1cea6bc1ad95e884256239f66b9bcc932" kindref="member">failure_message</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult_115bb10ebc15892d1ae7d9cd4b1d61901" kindref="member">failure_message_</ref>.<ref refid="classtesting_1_1internal_1_1String_188be98337a01ae18eb6c3f084288e0a5" kindref="member">c_str</ref>();<sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>constructor.<sp/><sp/>It<sp/>is<sp/>used<sp/>when<sp/>the<sp/>assertion<sp/>succeeded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="classtesting_1_1AssertionResult_11f2e093a8aedb6f4939d10e3ac6df302" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1AssertionResult_11f2e093a8aedb6f4939d10e3ac6df302" kindref="member">AssertionResult</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>used<sp/>when<sp/>the<sp/>assertion<sp/>failed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult_11f2e093a8aedb6f4939d10e3ac6df302" kindref="member">AssertionResult</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">internal::String</ref>&amp;<sp/><ref refid="classtesting_1_1AssertionResult_1cea6bc1ad95e884256239f66b9bcc932" kindref="member">failure_message</ref>);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Stores<sp/>the<sp/>assertion&apos;s<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classtesting_1_1AssertionResult_115bb10ebc15892d1ae7d9cd4b1d61901" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">internal::String</ref><sp/><ref refid="classtesting_1_1AssertionResult_115bb10ebc15892d1ae7d9cd4b1d61901" kindref="member">failure_message_</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal">};</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>successful<sp/>assertion<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_1b729c66d933de254c89cddb7f3c71ec4" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Makes<sp/>a<sp/>failed<sp/>assertion<sp/>result<sp/>with<sp/>the<sp/>given<sp/>failure<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_107666fd50196e9727d0731c056fa1957" kindref="member">AssertionFailure</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>msg);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>abstract<sp/>class<sp/>that<sp/>all<sp/>tests<sp/>inherit<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>Google<sp/>Test,<sp/>a<sp/>unit<sp/>test<sp/>program<sp/>contains<sp/>one<sp/>or<sp/>many<sp/>TestCases,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>each<sp/>TestCase<sp/>contains<sp/>one<sp/>or<sp/>many<sp/>Tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>you<sp/>define<sp/>a<sp/>test<sp/>using<sp/>the<sp/>TEST<sp/>macro,<sp/>you<sp/>don&apos;t<sp/>need<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>explicitly<sp/>derive<sp/>from<sp/>Test<sp/>-<sp/>the<sp/>TEST<sp/>macro<sp/>automatically<sp/>does</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>for<sp/>you.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>only<sp/>time<sp/>you<sp/>derive<sp/>from<sp/>Test<sp/>is<sp/>when<sp/>defining<sp/>a<sp/>test<sp/>fixture</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>used<sp/>a<sp/>TEST_F.<sp/><sp/>For<sp/>example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>TearDown()<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>Bar)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>Baz)<sp/>{<sp/>...<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Test<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classtesting_1_1Test" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="211" refid="classtesting_1_1Test_15aa7b30faff2d57475f7e9eea1bc8eaa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Test_15aa7b30faff2d57475f7e9eea1bc8eaa" kindref="member">internal::TestInfoImpl</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Defines<sp/>types<sp/>for<sp/>pointers<sp/>to<sp/>functions<sp/>that<sp/>set<sp/>up<sp/>and<sp/>tear<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="classtesting_1_1Test_1ccbfb9e722f1f1fef94248d056ed918c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" kindref="member">internal::SetUpTestCaseFunc</ref><sp/><ref refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" kindref="member">SetUpTestCaseFunc</ref>;</highlight></codeline>
<codeline lineno="216" refid="classtesting_1_1Test_1b4fbbeba80a377c0ab2ea2793c2a2a33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" kindref="member">internal::TearDownTestCaseFunc</ref><sp/><ref refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" kindref="member">TearDownTestCaseFunc</ref>;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>is<sp/>virtual<sp/>as<sp/>we<sp/>intend<sp/>to<sp/>inherit<sp/>from<sp/>Test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_1fb788db3d734171957dc11ebe5f1a9cb" kindref="member">~Test</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>stuff<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>will<sp/>call<sp/>Foo::SetUpTestCase()<sp/>before<sp/>running<sp/>the<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>in<sp/>test<sp/>case<sp/>Foo.<sp/><sp/>Hence<sp/>a<sp/>sub-class<sp/>can<sp/>define<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>SetUpTestCase()<sp/>method<sp/>to<sp/>shadow<sp/>the<sp/>one<sp/>defined<sp/>in<sp/>the<sp/>super</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="classtesting_1_1Test_123c50ad7f4dd7c23eb7bead09ca1e25b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_123c50ad7f4dd7c23eb7bead09ca1e25b" kindref="member">SetUpTestCase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>stuff<sp/>shared<sp/>by<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>will<sp/>call<sp/>Foo::TearDownTestCase()<sp/>after<sp/>running<sp/>the<sp/>last</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>test<sp/>in<sp/>test<sp/>case<sp/>Foo.<sp/><sp/>Hence<sp/>a<sp/>sub-class<sp/>can<sp/>define<sp/>its<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TearDownTestCase()<sp/>method<sp/>to<sp/>shadow<sp/>the<sp/>one<sp/>defined<sp/>in<sp/>the<sp/>super</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="classtesting_1_1Test_1a9a9d7e19e41c660b6880d2d25918726" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_1a9a9d7e19e41c660b6880d2d25918726" kindref="member">TearDownTestCase</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>a<sp/>fatal<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_1765821feda4da8debf420af85aa597b5" kindref="member">HasFatalFailure</ref>();</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Logs<sp/>a<sp/>property<sp/>for<sp/>the<sp/>current<sp/>test.<sp/><sp/>Only<sp/>the<sp/>last<sp/>value<sp/>for<sp/>a<sp/>given</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>key<sp/>is<sp/>remembered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>public<sp/>static<sp/>so<sp/>they<sp/>can<sp/>be<sp/>called<sp/>from<sp/>utility<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>are<sp/>not<sp/>members<sp/>of<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>arguments<sp/>are<sp/>const<sp/>char*<sp/>instead<sp/>strings,<sp/>as<sp/>Google<sp/>Test<sp/>is<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>platforms<sp/>where<sp/>string<sp/>doesn&apos;t<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>a<sp/>driving<sp/>consideration<sp/>for<sp/>these<sp/>RecordProperty<sp/>methods</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>to<sp/>produce<sp/>xml<sp/>output<sp/>suited<sp/>to<sp/>the<sp/>Greenspan<sp/>charting<sp/>utility,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>at<sp/>present<sp/>will<sp/>only<sp/>chart<sp/>values<sp/>that<sp/>fit<sp/>in<sp/>a<sp/>32-bit<sp/>int.<sp/>It</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>the<sp/>user&apos;s<sp/>responsibility<sp/>to<sp/>restrict<sp/>their<sp/>values<sp/>to<sp/>32-bit<sp/>ints</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>they<sp/>intend<sp/>them<sp/>to<sp/>be<sp/>used<sp/>with<sp/>Greenspan.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_191032b7a73c1881bbab4db263fa44447" kindref="member">RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_191032b7a73c1881bbab4db263fa44447" kindref="member">RecordProperty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>a<sp/>Test<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Test_143ef73098874414f6c9fbfa32f90ba95" kindref="member">Test</ref>();</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_1aa64e7ad495ea976b98f97a5f3738c35" kindref="member">SetUp</ref>();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Tears<sp/>down<sp/>the<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_11f5480b7d2c1067f7bba77a8993cf12f" kindref="member">TearDown</ref>();</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>iff<sp/>the<sp/>current<sp/>test<sp/>has<sp/>the<sp/>same<sp/>fixture<sp/>class<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>first<sp/>test<sp/>in<sp/>the<sp/>current<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_1b3e94213b33ebf1443b00c11b777ef98" kindref="member">HasSameFixtureClass</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>the<sp/>test<sp/>after<sp/>the<sp/>test<sp/>fixture<sp/>has<sp/>been<sp/>set<sp/>up.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sub-class<sp/>must<sp/>implement<sp/>this<sp/>to<sp/>define<sp/>the<sp/>test<sp/>logic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>OVERRIDE<sp/>THIS<sp/>FUNCTION<sp/>DIRECTLY<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Instead,<sp/>use<sp/>the<sp/>TEST<sp/>or<sp/>TEST_F<sp/>macro.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_17c987a80f78dec5eba1aee0b9bb726a8" kindref="member">TestBody</ref>()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>up,<sp/>executes,<sp/>and<sp/>tears<sp/>down<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test_19cc0df5ee0753f4578f12e0e72c1aa85" kindref="member">Run</ref>();</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Uses<sp/>a<sp/>GTestFlagSaver<sp/>to<sp/>save<sp/>and<sp/>restore<sp/>all<sp/>Google<sp/>Test<sp/>flags.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282" refid="classtesting_1_1Test_111223d23ca155b8a85bf63b8f1b0074c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::GTestFlagSaver*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>gtest_flag_saver_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Often<sp/>a<sp/>user<sp/>mis-spells<sp/>SetUp()<sp/>as<sp/>Setup()<sp/>and<sp/>spends<sp/>a<sp/>long<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>wondering<sp/>why<sp/>it<sp/>is<sp/>never<sp/>called<sp/>by<sp/>Google<sp/>Test.<sp/><sp/>The<sp/>declaration<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>following<sp/>method<sp/>is<sp/>solely<sp/>for<sp/>catching<sp/>such<sp/>an<sp/>error<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compile<sp/>time:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>The<sp/>return<sp/>type<sp/>is<sp/>deliberately<sp/>chosen<sp/>to<sp/>be<sp/>not<sp/>void,<sp/>so<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>will<sp/>be<sp/>a<sp/>conflict<sp/>if<sp/>a<sp/>user<sp/>declares<sp/>void<sp/>Setup()<sp/>in<sp/>his<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>-<sp/>This<sp/>method<sp/>is<sp/>private,<sp/>so<sp/>it<sp/>will<sp/>be<sp/>another<sp/>compiler<sp/>error</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>a<sp/>user<sp/>calls<sp/>it<sp/>from<sp/>his<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DO<sp/>NOT<sp/>OVERRIDE<sp/>THIS<sp/>FUNCTION.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>see<sp/>an<sp/>error<sp/>about<sp/>overriding<sp/>the<sp/>following<sp/>function<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>it<sp/>being<sp/>private,<sp/>you<sp/>have<sp/>mis-spelled<sp/>SetUp()<sp/>as<sp/>Setup().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="structtesting_1_1Test_1_1Setup__should__be__spelled__SetUp" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1Test_1_1Setup__should__be__spelled__SetUp" kindref="compound">Setup_should_be_spelled_SetUp</ref><sp/>{};</highlight></codeline>
<codeline lineno="301" refid="classtesting_1_1Test_19d4162224b354f9d29e0816d89dde567" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Test_1_1Setup__should__be__spelled__SetUp" kindref="compound">Setup_should_be_spelled_SetUp</ref>*<sp/><ref refid="classtesting_1_1Test_19d4162224b354f9d29e0816d89dde567" kindref="member">Setup</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>Tests.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Test_129540d1bf03baf570118c6e56e4ae901" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1Test" kindref="compound">Test</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>TestInfo<sp/>object<sp/>stores<sp/>the<sp/>following<sp/>information<sp/>about<sp/>a<sp/>test:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>case<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Whether<sp/>the<sp/>test<sp/>should<sp/>be<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>A<sp/>function<sp/>pointer<sp/>that<sp/>creates<sp/>the<sp/>test<sp/>object<sp/>when<sp/>invoked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Test<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constructor<sp/>of<sp/>TestInfo<sp/>registers<sp/>itself<sp/>with<sp/>the<sp/>UnitTest</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="comment">//<sp/>singleton<sp/>such<sp/>that<sp/>the<sp/>RUN_ALL_TESTS()<sp/>macro<sp/>knows<sp/>which<sp/>tests<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="comment">//<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="classtesting_1_1TestInfo" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destructs<sp/>a<sp/>TestInfo<sp/>object.<sp/><sp/>This<sp/>function<sp/>is<sp/>not<sp/>virtual,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>inherit<sp/>from<sp/>TestInfo.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo_15a6046a6bc1990cd3d34b777d1ea2efb" kindref="member">~TestInfo</ref>();</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>case<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1TestInfo_1ce66c230c07aadcacb59fe050b10048c" kindref="member">test_case_name</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>name.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1TestInfo_198187c43314e8e23cc6ccdccb5465d50" kindref="member">name</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>case<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1TestInfo_1000a4260add151f8f8fdb5f94b0d4f74" kindref="member">test_case_comment</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>test<sp/>comment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1TestInfo_1f2dd6a2ad5fccba8f0bbcc52d5664bca" kindref="member">comment</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>this<sp/>test<sp/>should<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>allows<sp/>the<sp/>user<sp/>to<sp/>filter<sp/>the<sp/>tests<sp/>by<sp/>their<sp/>full<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>full<sp/>name<sp/>of<sp/>a<sp/>test<sp/>Bar<sp/>in<sp/>test<sp/>case<sp/>Foo<sp/>is<sp/>defined<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Foo.Bar&quot;.<sp/><sp/>Only<sp/>the<sp/>tests<sp/>that<sp/>match<sp/>the<sp/>filter<sp/>will<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>filter<sp/>is<sp/>a<sp/>colon-separated<sp/>list<sp/>of<sp/>glob<sp/>(not<sp/>regex)<sp/>patterns,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally<sp/>followed<sp/>by<sp/>a<sp/>&apos;-&apos;<sp/>and<sp/>a<sp/>colon-separated<sp/>list<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>negative<sp/>patterns<sp/>(tests<sp/>to<sp/>exclude).<sp/><sp/>A<sp/>test<sp/>is<sp/>run<sp/>if<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>matches<sp/>one<sp/>of<sp/>the<sp/>positive<sp/>patterns<sp/>and<sp/>does<sp/>not<sp/>match<sp/>any<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>negative<sp/>patterns.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>*A*:Foo.*<sp/>is<sp/>a<sp/>filter<sp/>that<sp/>matches<sp/>any<sp/>string<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>the<sp/>character<sp/>&apos;A&apos;<sp/>or<sp/>starts<sp/>with<sp/>&quot;Foo.&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo_127e8a3d5b459a30df5e9981645c190b0" kindref="member">should_run</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>result<sp/>of<sp/>the<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classtesting_1_1TestInfo_18351d36043af6c595e9662daea88bea3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TestResult*<sp/>result()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_DEATH_TEST</highlight></codeline>
<codeline lineno="357"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::DefaultDeathTestFactory;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_DEATH_TEST</highlight></codeline>
<codeline lineno="359" refid="classtesting_1_1TestInfo_15aa7b30faff2d57475f7e9eea1bc8eaa" refkind="member"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfo_15aa7b30faff2d57475f7e9eea1bc8eaa" kindref="member">internal::TestInfoImpl</ref>;</highlight></codeline>
<codeline lineno="360" refid="classtesting_1_1TestInfo_1417e83bada4513ea82ec1daf57acefe0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfo_1417e83bada4513ea82ec1daf57acefe0" kindref="member">internal::UnitTestImpl</ref>;</highlight></codeline>
<codeline lineno="361" refid="classtesting_1_1TestInfo_1e7f33bcfe8b908f68c5bd4dfc6012078" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Test" kindref="compound">Test</ref>;</highlight></codeline>
<codeline lineno="362" refid="classtesting_1_1TestInfo_12831345fc3341f246c8c26ed33205687" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1TestInfo_12831345fc3341f246c8c26ed33205687" kindref="member">TestCase</ref>;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/><ref refid="namespacetesting_1_1internal_1c8a4baccf925ac1c597b5bf7956d680e" kindref="member">internal::MakeAndRegisterTestInfo</ref>(</highlight></codeline>
<codeline lineno="364" refid="classtesting_1_1TestInfo_1f52d0a54d1988531c00a50ce9ca64e59" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_comment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">internal::TypeId</ref><sp/><ref refid="classtesting_1_1TestInfo_1a50374588be33bcee7b1b28c4a0d89fb" kindref="member">fixture_class_id</ref>,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_11b8518e7b2cdc051b4379b923be61d5d" kindref="member">Test::SetUpTestCaseFunc</ref><sp/><ref refid="classtesting_1_1TestInfo_18191266a160e91d889bbea316a7883ef" kindref="member">set_up_tc</ref>,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1b87631eabafc70771cf3fb20be8b3adc" kindref="member">Test::TearDownTestCaseFunc</ref><sp/><ref refid="classtesting_1_1TestInfo_1beba20073b35ead7e153d76034918252" kindref="member">tear_down_tc</ref>,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">internal::TestFactoryBase</ref>*<sp/><ref refid="classtesting_1_1TestInfo_1b02555c7691ca9d0fb0bcca5ca328d2d" kindref="member">factory</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Increments<sp/>the<sp/>number<sp/>of<sp/>death<sp/>tests<sp/>encountered<sp/>in<sp/>this<sp/>test<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>far.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo_14e9380275eed7e67174b07336ebcb58f" kindref="member">increment_death_test_count</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors<sp/>for<sp/>the<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classtesting_1_1TestInfo_1a1283eab082d57978d8c5b88ae552320" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo_15aa7b30faff2d57475f7e9eea1bc8eaa" kindref="member">internal::TestInfoImpl</ref>*<sp/><ref refid="classtesting_1_1TestInfo_1a1283eab082d57978d8c5b88ae552320" kindref="member">impl</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo_1a7cba6a8092514424ef3929120ba4e11" kindref="member">impl_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="377" refid="classtesting_1_1TestInfo_1786579989a4ac4253f63c41f71690098" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo_15aa7b30faff2d57475f7e9eea1bc8eaa" kindref="member">internal::TestInfoImpl</ref>*<sp/><ref refid="classtesting_1_1TestInfo_1a1283eab082d57978d8c5b88ae552320" kindref="member">impl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo_1a7cba6a8092514424ef3929120ba4e11" kindref="member">impl_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructs<sp/>a<sp/>TestInfo<sp/>object.<sp/>The<sp/>newly<sp/>constructed<sp/>instance<sp/>assumes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ownership<sp/>of<sp/>the<sp/>factory<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo_10c48a55b93a44fbdc86311e095d03443" kindref="member">TestInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>test_case_comment,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>comment,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_134ce8e1aa9380799f8456ee3a81ceb82" kindref="member">internal::TypeId</ref><sp/><ref refid="classtesting_1_1TestInfo_1a50374588be33bcee7b1b28c4a0d89fb" kindref="member">fixture_class_id</ref>,</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtesting_1_1internal_1_1TestFactoryBase" kindref="compound">internal::TestFactoryBase</ref>*<sp/><ref refid="classtesting_1_1TestInfo_1b02555c7691ca9d0fb0bcca5ca328d2d" kindref="member">factory</ref>);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>An<sp/>opaque<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387" refid="classtesting_1_1TestInfo_1a7cba6a8092514424ef3929120ba4e11" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo_15aa7b30faff2d57475f7e9eea1bc8eaa" kindref="member">internal::TestInfoImpl</ref>*<sp/><ref refid="classtesting_1_1TestInfo_1a7cba6a8092514424ef3929120ba4e11" kindref="member">impl_</ref>;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1TestInfo_13f510e71137f11b5a90ecf843a171b0f" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>);</highlight></codeline>
<codeline lineno="390"><highlight class="normal">};</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Environment<sp/>object<sp/>is<sp/>capable<sp/>of<sp/>setting<sp/>up<sp/>and<sp/>tearing<sp/>down<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment.<sp/><sp/>The<sp/>user<sp/>should<sp/>subclass<sp/>this<sp/>to<sp/>define<sp/>his<sp/>own</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="comment">//<sp/>environment(s).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>Environment<sp/>object<sp/>does<sp/>the<sp/>set-up<sp/>and<sp/>tear-down<sp/>in<sp/>virtual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>methods<sp/>SetUp()<sp/>and<sp/>TearDown()<sp/>instead<sp/>of<sp/>the<sp/>constructor<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>destructor,<sp/>as:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>You<sp/>cannot<sp/>safely<sp/>throw<sp/>from<sp/>a<sp/>destructor.<sp/><sp/>This<sp/>is<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>as<sp/>in<sp/>some<sp/>cases<sp/>Google<sp/>Test<sp/>is<sp/>used<sp/>where<sp/>exceptions<sp/>are<sp/>enabled,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>we<sp/>may<sp/>want<sp/>to<sp/>implement<sp/>ASSERT_*<sp/>using<sp/>exceptions<sp/>where<sp/>they<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>available.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>You<sp/>cannot<sp/>use<sp/>ASSERT_*<sp/>directly<sp/>in<sp/>a<sp/>constructor<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/>destructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406" refid="classtesting_1_1Environment" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>d&apos;tor<sp/>is<sp/>virtual<sp/>as<sp/>we<sp/>need<sp/>to<sp/>subclass<sp/>Environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classtesting_1_1Environment_11febe35c894ab431777a8ef7079f86c3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment_11febe35c894ab431777a8ef7079f86c3" kindref="member">~Environment</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>set<sp/>up<sp/>the<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412" refid="classtesting_1_1Environment_1562c61c7087bc48651cfc1557af349ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment_1562c61c7087bc48651cfc1557af349ef" kindref="member">SetUp</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Override<sp/>this<sp/>to<sp/>define<sp/>how<sp/>to<sp/>tear<sp/>down<sp/>the<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classtesting_1_1Environment_184a68fe128e6d09494c01c6031c0d8f7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment_184a68fe128e6d09494c01c6031c0d8f7" kindref="member">TearDown</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>you<sp/>see<sp/>an<sp/>error<sp/>about<sp/>overriding<sp/>the<sp/>following<sp/>function<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>about<sp/>it<sp/>being<sp/>private,<sp/>you<sp/>have<sp/>mis-spelled<sp/>SetUp()<sp/>as<sp/>Setup().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419" refid="structtesting_1_1Environment_1_1Setup__should__be__spelled__SetUp" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtesting_1_1Environment_1_1Setup__should__be__spelled__SetUp" kindref="compound">Setup_should_be_spelled_SetUp</ref><sp/>{};</highlight></codeline>
<codeline lineno="420" refid="classtesting_1_1Environment_14c1b9884d3ce6eb9a9866ea3b328c0c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structtesting_1_1Environment_1_1Setup__should__be__spelled__SetUp" kindref="compound">Setup_should_be_spelled_SetUp</ref>*<sp/><ref refid="classtesting_1_1Environment_14c1b9884d3ce6eb9a9866ea3b328c0c1" kindref="member">Setup</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal">};</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>UnitTest<sp/>consists<sp/>of<sp/>a<sp/>list<sp/>of<sp/>TestCases.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>a<sp/>singleton<sp/>class.<sp/><sp/>The<sp/>only<sp/>instance<sp/>of<sp/>UnitTest<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>created<sp/>when<sp/>UnitTest::GetInstance()<sp/>is<sp/>first<sp/>called.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>instance<sp/>is<sp/>never<sp/>deleted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UnitTest<sp/>is<sp/>not<sp/>copyable.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>is<sp/>thread-safe<sp/>as<sp/>long<sp/>as<sp/>the<sp/>methods<sp/>are<sp/>called</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight><highlight class="comment">//<sp/>according<sp/>to<sp/>their<sp/>specification.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433" refid="classtesting_1_1UnitTest" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref><sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>singleton<sp/>UnitTest<sp/>object.<sp/><sp/>The<sp/>first<sp/>time<sp/>this<sp/>method</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>called,<sp/>a<sp/>UnitTest<sp/>object<sp/>is<sp/>constructed<sp/>and<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consecutive<sp/>calls<sp/>will<sp/>return<sp/>the<sp/>same<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>*<sp/><ref refid="classtesting_1_1UnitTest_1db04e1d682a2d7cfc3aa2c5afe3cac5f" kindref="member">GetInstance</ref>();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Registers<sp/>and<sp/>returns<sp/>a<sp/>global<sp/>test<sp/>environment.<sp/><sp/>When<sp/>a<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>program<sp/>is<sp/>run,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>set-up<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>order<sp/>they<sp/>were<sp/>registered.<sp/><sp/>After<sp/>all<sp/>tests<sp/>in<sp/>the<sp/>program</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>finished,<sp/>all<sp/>global<sp/>test<sp/>environments<sp/>will<sp/>be<sp/>torn-down<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>*reverse*<sp/>order<sp/>they<sp/>were<sp/>registered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>UnitTest<sp/>object<sp/>takes<sp/>ownership<sp/>of<sp/>the<sp/>given<sp/>environment.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>can<sp/>only<sp/>be<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref>*<sp/><ref refid="classtesting_1_1UnitTest_1b1427eccd1c7b3fd6a033e22d52cbdee" kindref="member">AddEnvironment</ref>(<ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref>*<sp/>env);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestPartResult<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object.<sp/><sp/>All</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>assertion<sp/>macros<sp/>(e.g.<sp/>ASSERT_TRUE,<sp/>EXPECT_EQ,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>eventually<sp/>call<sp/>this<sp/>to<sp/>report<sp/>their<sp/>results.<sp/><sp/>The<sp/>user<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>should<sp/>use<sp/>the<sp/>assertion<sp/>macros<sp/>instead<sp/>of<sp/>calling<sp/>this<sp/>directly.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1fad5417ce02bc444a32f6e1659729a80" kindref="member">AddTestPartResult</ref>(<ref refid="namespacetesting_1e87109d90628580ab2d751fcb36fc975" kindref="member">TestPartResultType</ref><sp/>result_type,</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file_name,</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line_number,</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">internal::String</ref>&amp;<sp/>message,</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">internal::String</ref>&amp;<sp/>os_stack_trace);</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Adds<sp/>a<sp/>TestProperty<sp/>to<sp/>the<sp/>current<sp/>TestResult<sp/>object.<sp/>If<sp/>the<sp/>result<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>contains<sp/>a<sp/>property<sp/>with<sp/>the<sp/>same<sp/>key,<sp/>the<sp/>value<sp/>will<sp/>be<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1aa1fa510a34fb035d88bc5e615fbbd1e" kindref="member">RecordPropertyForCurrentTest</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Runs<sp/>all<sp/>tests<sp/>in<sp/>this<sp/>UnitTest<sp/>object<sp/>and<sp/>prints<sp/>the<sp/>result.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>0<sp/>if<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>method<sp/>can<sp/>only<sp/>be<sp/>called<sp/>from<sp/>the<sp/>main<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_15fd408b9dd00b8b3495ef66428fa6d1c" kindref="member">Run</ref>()<sp/><ref refid="gtest-port_8h_1278b3d9816b7f2389f2cf362e8ba6a3c" kindref="member">GTEST_MUST_USE_RESULT_</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>working<sp/>directory<sp/>when<sp/>the<sp/>first<sp/>TEST()<sp/>or<sp/>TEST_F()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>was<sp/>executed.<sp/><sp/>The<sp/>UnitTest<sp/>object<sp/>owns<sp/>the<sp/>string.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classtesting_1_1UnitTest_18e3dd65ddd6627667a394e909c0687b4" kindref="member">original_working_dir</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestCase<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TestCase*<sp/><ref refid="classtesting_1_1UnitTest_1d40c5de4a9dada54bbb7b9d4b5f28925" kindref="member">current_test_case</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>TestInfo<sp/>object<sp/>for<sp/>the<sp/>test<sp/>that&apos;s<sp/>currently<sp/>running,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>test<sp/>is<sp/>running.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1TestInfo" kindref="compound">TestInfo</ref>*<sp/><ref refid="classtesting_1_1UnitTest_15e8e59d2d42a24233183a0974d02dd40" kindref="member">current_test_info</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_PARAM_TEST</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ParameterizedTestCaseRegistry<sp/>object<sp/>used<sp/>to<sp/>keep<sp/>track<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>value-parameterized<sp/>tests<sp/>and<sp/>instantiate<sp/>and<sp/>register<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>internal::ParameterizedTestCaseRegistry&amp;<sp/>parameterized_test_registry();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_PARAM_TEST</highlight></codeline>
<codeline lineno="492"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Accessors<sp/>for<sp/>the<sp/>implementation<sp/>object.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="classtesting_1_1UnitTest_1c6c28ca92bf6f5341970f01987f16711" refkind="member"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/><ref refid="classtesting_1_1UnitTest_1c6c28ca92bf6f5341970f01987f16711" kindref="member">impl</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1bdbc21d9a1264600a85748daef2a0c5a" kindref="member">impl_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="495" refid="classtesting_1_1UnitTest_103aec0a97ab57c012431c86abdf69942" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::UnitTestImpl*<sp/><ref refid="classtesting_1_1UnitTest_1c6c28ca92bf6f5341970f01987f16711" kindref="member">impl</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1bdbc21d9a1264600a85748daef2a0c5a" kindref="member">impl_</ref>;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ScopedTrace<sp/>is<sp/>a<sp/>friend<sp/>as<sp/>it<sp/>needs<sp/>to<sp/>modify<sp/>the<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>trace<sp/>stack,<sp/>which<sp/>is<sp/>a<sp/>private<sp/>member<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499" refid="classtesting_1_1UnitTest_1d38a4df6f8f4b5b203b71edc50a4b815" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1ScopedTrace" kindref="compound">internal::ScopedTrace</ref>;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Creates<sp/>an<sp/>empty<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1UnitTest_1ad2f55aa951b8975930d7f4022feff08" kindref="member">UnitTest</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>D&apos;tor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1c320ce8c6d7eb6d02240c181ef30bb07" kindref="member">~UnitTest</ref>();</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pushes<sp/>a<sp/>trace<sp/>defined<sp/>by<sp/>SCOPED_TRACE()<sp/>on<sp/>to<sp/>the<sp/>per-thread</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_18b32d06aa2322afcef8496aede274d70" kindref="member">PushGTestTrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>internal::TraceInfo&amp;<sp/>trace);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Pops<sp/>a<sp/>trace<sp/>from<sp/>the<sp/>per-thread<sp/>Google<sp/>Test<sp/>trace<sp/>stack.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_159b3b5d0b33814363fd9d4ff37c251f9" kindref="member">PopGTestTrace</ref>();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protects<sp/>mutable<sp/>state<sp/>in<sp/>*impl_.<sp/><sp/>This<sp/>is<sp/>mutable<sp/>as<sp/>some<sp/>const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>methods<sp/>need<sp/>to<sp/>lock<sp/>it<sp/>too.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="516" refid="classtesting_1_1UnitTest_1700e6b4b815535175165bfca2f3a57b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1Mutex" kindref="compound">internal::Mutex</ref><sp/><ref refid="classtesting_1_1UnitTest_1700e6b4b815535175165bfca2f3a57b4" kindref="member">mutex_</ref>;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Opaque<sp/>implementation<sp/>object.<sp/><sp/>This<sp/>field<sp/>is<sp/>never<sp/>changed<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>object<sp/>is<sp/>constructed.<sp/><sp/>We<sp/>don&apos;t<sp/>mark<sp/>it<sp/>as<sp/>const<sp/>here,<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>doing<sp/>so<sp/>will<sp/>cause<sp/>a<sp/>warning<sp/>in<sp/>the<sp/>constructor<sp/>of<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mutable<sp/>state<sp/>in<sp/>*impl_<sp/>is<sp/>protected<sp/>by<sp/>mutex_.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522" refid="classtesting_1_1UnitTest_1bdbc21d9a1264600a85748daef2a0c5a" refkind="member"><highlight class="normal"><sp/><sp/>internal::UnitTestImpl*<sp/><ref refid="classtesting_1_1UnitTest_1bdbc21d9a1264600a85748daef2a0c5a" kindref="member">impl_</ref>;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>disallow<sp/>copying<sp/>UnitTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1UnitTest_1599d5ac196b5b3408db7c44e3abc4e11" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1UnitTest" kindref="compound">UnitTest</ref>);</highlight></codeline>
<codeline lineno="526"><highlight class="normal">};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>convenient<sp/>wrapper<sp/>for<sp/>adding<sp/>an<sp/>environment<sp/>for<sp/>the<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="comment">//<sp/>program.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>should<sp/>call<sp/>this<sp/>before<sp/>RUN_ALL_TESTS()<sp/>is<sp/>called,<sp/>probably<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight><highlight class="comment">//<sp/>main().<sp/><sp/>If<sp/>you<sp/>use<sp/>gtest_main,<sp/>you<sp/>need<sp/>to<sp/>call<sp/>this<sp/>before<sp/>main()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight><highlight class="comment">//<sp/>starts<sp/>for<sp/>it<sp/>to<sp/>take<sp/>effect.<sp/><sp/>For<sp/>example,<sp/>you<sp/>can<sp/>define<sp/>a<sp/>global</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight><highlight class="comment">//<sp/>variable<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>testing::Environment*<sp/>const<sp/>foo_env<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>testing::AddGlobalTestEnvironment(new<sp/>FooEnvironment);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight><highlight class="comment">//<sp/>However,<sp/>we<sp/>strongly<sp/>recommend<sp/>you<sp/>to<sp/>write<sp/>your<sp/>own<sp/>main()<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight><highlight class="comment">//<sp/>call<sp/>AddGlobalTestEnvironment()<sp/>there,<sp/>as<sp/>relying<sp/>on<sp/>initialization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>global<sp/>variables<sp/>makes<sp/>the<sp/>code<sp/>harder<sp/>to<sp/>read<sp/>and<sp/>may<sp/>cause</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight><highlight class="comment">//<sp/>problems<sp/>when<sp/>you<sp/>register<sp/>multiple<sp/>environments<sp/>from<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight><highlight class="comment">//<sp/>translation<sp/>units<sp/>and<sp/>the<sp/>environments<sp/>have<sp/>dependencies<sp/>among<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(remember<sp/>that<sp/>the<sp/>compiler<sp/>doesn&apos;t<sp/>guarantee<sp/>the<sp/>order<sp/>in<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="comment">//<sp/>global<sp/>variables<sp/>from<sp/>different<sp/>translation<sp/>units<sp/>are<sp/>initialized).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="namespacetesting_114f739e29da2c05e23eb563597f31b22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref>*<sp/><ref refid="namespacetesting_114f739e29da2c05e23eb563597f31b22" kindref="member">AddGlobalTestEnvironment</ref>(<ref refid="classtesting_1_1Environment" kindref="compound">Environment</ref>*<sp/>env)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1UnitTest_1db04e1d682a2d7cfc3aa2c5afe3cac5f" kindref="member">UnitTest::GetInstance</ref>()-&gt;<ref refid="classtesting_1_1UnitTest_1b1427eccd1c7b3fd6a033e22d52cbdee" kindref="member">AddEnvironment</ref>(env);</highlight></codeline>
<codeline lineno="548"><highlight class="normal">}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Initializes<sp/>Google<sp/>Test.<sp/><sp/>This<sp/>must<sp/>be<sp/>called<sp/>before<sp/>calling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS().<sp/><sp/>In<sp/>particular,<sp/>it<sp/>parses<sp/>a<sp/>command<sp/>line<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight><highlight class="comment">//<sp/>flags<sp/>that<sp/>Google<sp/>Test<sp/>recognizes.<sp/><sp/>Whenever<sp/>a<sp/>Google<sp/>Test<sp/>flag<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="comment">//<sp/>seen,<sp/>it<sp/>is<sp/>removed<sp/>from<sp/>argv,<sp/>and<sp/>*argc<sp/>is<sp/>decremented.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="comment">//<sp/>No<sp/>value<sp/>is<sp/>returned.<sp/><sp/>Instead,<sp/>the<sp/>Google<sp/>Test<sp/>flag<sp/>variables<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight><highlight class="comment">//<sp/>updated.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Calling<sp/>the<sp/>function<sp/>for<sp/>the<sp/>second<sp/>time<sp/>has<sp/>no<sp/>user-visible<sp/>effect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_11995fbe86612c912ccc86d18f7e9ef6a" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>overloaded<sp/>version<sp/>can<sp/>be<sp/>used<sp/>in<sp/>Windows<sp/>programs<sp/>compiled<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="comment">//<sp/>UNICODE<sp/>mode.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_11995fbe86612c912ccc86d18f7e9ef6a" kindref="member">InitGoogleTest</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>argc,<sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">**<sp/>argv);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>overloaded<sp/>versions<sp/>handle<sp/>::std::string<sp/>and<sp/>::std::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="569"><highlight class="preprocessor"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(const<sp/>::std::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">).GetString();</highlight></codeline>
<codeline lineno="571"><highlight class="normal">}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="573"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="575"><highlight class="preprocessor"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(const<sp/>::std::wstring&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>wstr<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">).GetString();</highlight></codeline>
<codeline lineno="577"><highlight class="normal">}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>overloaded<sp/>versions<sp/>handle<sp/>::string<sp/>and<sp/>::wstring.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="582"><highlight class="preprocessor"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(const<sp/>::string&amp;<sp/>str)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>str<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">).GetString();</highlight></codeline>
<codeline lineno="584"><highlight class="normal">}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_STRING</highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="588"><highlight class="preprocessor"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>String<sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(const<sp/>::wstring&amp;<sp/>wstr)<sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(Message()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;L\&quot;&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>wstr<sp/>&lt;&lt;<sp/></highlight><highlight class="charliteral">&apos;&quot;&apos;</highlight><highlight class="normal">).GetString();</highlight></codeline>
<codeline lineno="590"><highlight class="normal">}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_GLOBAL_WSTRING</highlight></codeline>
<codeline lineno="592"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Formats<sp/>a<sp/>comparison<sp/>assertion<sp/>(e.g.<sp/>ASSERT_EQ,<sp/>EXPECT_LT,<sp/>and<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight><highlight class="comment">//<sp/>operand<sp/>to<sp/>be<sp/>used<sp/>in<sp/>a<sp/>failure<sp/>message.<sp/><sp/>The<sp/>type<sp/>(but<sp/>not<sp/>value)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>other<sp/>operand<sp/>may<sp/>affect<sp/>the<sp/>format.<sp/><sp/>This<sp/>allows<sp/>us<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight><highlight class="comment">//<sp/>print<sp/>a<sp/>char*<sp/>as<sp/>a<sp/>raw<sp/>pointer<sp/>when<sp/>it<sp/>is<sp/>compared<sp/>against<sp/>another</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="comment">//<sp/>char*,<sp/>and<sp/>print<sp/>it<sp/>as<sp/>a<sp/>C<sp/>string<sp/>when<sp/>it<sp/>is<sp/>compared<sp/>against<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight><highlight class="comment">//<sp/>std::string<sp/>object,<sp/>for<sp/>example.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>implementation<sp/>ignores<sp/>the<sp/>type<sp/>of<sp/>the<sp/>other<sp/>operand.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Some<sp/>specialized<sp/>versions<sp/>are<sp/>used<sp/>to<sp/>handle<sp/>formatting<sp/>wide<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight><highlight class="comment">//<sp/>narrow<sp/>C<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="606" refid="namespacetesting_1_1internal_1e47d3997f2f60c466b59eb389761ceed" refkind="member"><highlight class="normal"><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><ref refid="namespacetesting_1_1internal_1e47d3997f2f60c466b59eb389761ceed" kindref="member">FormatForComparisonFailureMessage</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>value,</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/></highlight><highlight class="comment">/*<sp/>other_operand<sp/>*/</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_153f1b197f129e00eb934a988dd5133c0" kindref="member">FormatForFailureMessage</ref>(value);</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_EQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="613" refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" refkind="member"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(expected<sp/>==<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1b729c66d933de254c89cddb7f3c71ec4" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1edef6e77f267b3a60fabda1428c6742c" kindref="member">EqFailure</ref>(expected_expression,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1e47d3997f2f60c466b59eb389761ceed" kindref="member">FormatForComparisonFailureMessage</ref>(expected,<sp/>actual),</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_1e47d3997f2f60c466b59eb389761ceed" kindref="member">FormatForComparisonFailureMessage</ref>(actual,<sp/>expected),</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"></highlight><highlight class="comment">//<sp/>With<sp/>this<sp/>overloaded<sp/>version,<sp/>we<sp/>allow<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>{ASSERT|EXPECT}_EQ<sp/>when<sp/>compiled<sp/>with<sp/>gcc<sp/>4,<sp/>as<sp/>anonymous<sp/>enums</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>implicitly<sp/>cast<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_19992177d67caf887d92231eb20bc23f7" kindref="member">BiggestInt</ref><sp/>expected,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_19992177d67caf887d92231eb20bc23f7" kindref="member">BiggestInt</ref><sp/>actual);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>class<sp/>for<sp/>{ASSERT|EXPECT}_EQ.<sp/><sp/>The<sp/>template<sp/>argument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lhs_is_null_literal<sp/>is<sp/>true<sp/>iff<sp/>the<sp/>first<sp/>argument<sp/>to<sp/>ASSERT_EQ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal.<sp/><sp/>The<sp/>following<sp/>default<sp/>implementation<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>lhs_is_null_literal<sp/>being<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>lhs_is_null_literal&gt;</highlight></codeline>
<codeline lineno="641" refid="classtesting_1_1internal_1_1EqHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1EqHelper" kindref="compound">EqHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>templatized<sp/>version<sp/>is<sp/>for<sp/>the<sp/>general<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="645" refid="classtesting_1_1internal_1_1EqHelper_1b60379c1c1456b9901ac99b9a9a3b0bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1internal_1_1EqHelper_1b60379c1c1456b9901ac99b9a9a3b0bf" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(expected_expression,<sp/>actual_expression,<sp/>expected,</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>With<sp/>this<sp/>overloaded<sp/>version,<sp/>we<sp/>allow<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>{ASSERT|EXPECT}_EQ<sp/>when<sp/>compiled<sp/>with<sp/>gcc<sp/>4,<sp/>as<sp/>anonymous</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>enums<sp/>can<sp/>be<sp/>implicitly<sp/>cast<sp/>to<sp/>BiggestInt.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Even<sp/>though<sp/>its<sp/>body<sp/>looks<sp/>the<sp/>same<sp/>as<sp/>the<sp/>above<sp/>version,<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>merge<sp/>the<sp/>two,<sp/>as<sp/>it<sp/>will<sp/>make<sp/>anonymous<sp/>enums<sp/>unhappy.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="659" refid="classtesting_1_1internal_1_1EqHelper_16e08bfbe40299a13f7ecfc1e83dffa47" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1internal_1_1EqHelper_1b60379c1c1456b9901ac99b9a9a3b0bf" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_19992177d67caf887d92231eb20bc23f7" kindref="member">BiggestInt</ref><sp/>expected,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_19992177d67caf887d92231eb20bc23f7" kindref="member">BiggestInt</ref><sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(expected_expression,<sp/>actual_expression,<sp/>expected,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="666"><highlight class="normal">};</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>specialization<sp/>is<sp/>used<sp/>when<sp/>the<sp/>first<sp/>argument<sp/>to<sp/>ASSERT_EQ()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>null<sp/>pointer<sp/>literal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="671" refid="classtesting_1_1internal_1_1EqHelper_3_01true_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1EqHelper" kindref="compound">EqHelper</ref>&lt;true&gt;<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>define<sp/>two<sp/>overloaded<sp/>versions<sp/>of<sp/>Compare().<sp/><sp/>The<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>version<sp/>will<sp/>be<sp/>picked<sp/>when<sp/>the<sp/>second<sp/>argument<sp/>to<sp/>ASSERT_EQ()<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOT<sp/>a<sp/>pointer,<sp/>e.g.<sp/>ASSERT_EQ(0,<sp/>AnIntFunction())<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>EXPECT_EQ(false,<sp/>a_bool).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="678" refid="classtesting_1_1internal_1_1EqHelper_3_01true_01_4_15282d5770e00c45f40ba4824425e230c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1internal_1_1EqHelper_1b60379c1c1456b9901ac99b9a9a3b0bf" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T2&amp;<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(expected_expression,<sp/>actual_expression,<sp/>expected,</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>version<sp/>will<sp/>be<sp/>picked<sp/>when<sp/>the<sp/>second<sp/>argument<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ASSERT_EQ()<sp/>is<sp/>a<sp/>pointer,<sp/>e.g.<sp/>ASSERT_EQ(NULL,<sp/>a_pointer).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="689" refid="classtesting_1_1internal_1_1EqHelper_3_01true_01_4_1fca81649a11ff352e877756d6954b0be" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="classtesting_1_1internal_1_1EqHelper_1b60379c1c1456b9901ac99b9a9a3b0bf" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T1&amp;<sp/>expected,</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T2*<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>already<sp/>know<sp/>that<sp/>&apos;expected&apos;<sp/>is<sp/>a<sp/>null<sp/>pointer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_145932ad30a954e99267502602cb8f7d4" kindref="member">CmpHelperEQ</ref>(expected_expression,<sp/>actual_expression,</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;T2*&gt;(NULL),<sp/>actual);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>macro<sp/>for<sp/>implementing<sp/>the<sp/>helper<sp/>functions<sp/>needed<sp/>to<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ASSERT_??<sp/>and<sp/>EXPECT_??.<sp/><sp/>It<sp/>is<sp/>here<sp/>just<sp/>to<sp/>avoid<sp/>copy-and-paste</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>similar<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>each<sp/>templatized<sp/>helper<sp/>function,<sp/>we<sp/>also<sp/>define<sp/>an<sp/>overloaded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>version<sp/>for<sp/>BiggestInt<sp/>in<sp/>order<sp/>to<sp/>reduce<sp/>code<sp/>bloat<sp/>and<sp/>allow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>anonymous<sp/>enums<sp/>to<sp/>be<sp/>used<sp/>with<sp/>{ASSERT|EXPECT}_??<sp/>when<sp/>compiled</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>gcc<sp/>4.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709" refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>GTEST_IMPL_CMP_HELPER_(op_name,<sp/>op)\</highlight></codeline>
<codeline lineno="710"><highlight class="preprocessor">template<sp/>&lt;typename<sp/>T1,<sp/>typename<sp/>T2&gt;\</highlight></codeline>
<codeline lineno="711"><highlight class="preprocessor">AssertionResult<sp/>CmpHelper##op_name(const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>\</highlight></codeline>
<codeline lineno="712"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>T1&amp;<sp/>val1,<sp/>const<sp/>T2&amp;<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="713"><highlight class="preprocessor"><sp/><sp/>if<sp/>(val1<sp/>op<sp/>val2)<sp/>{\</highlight></codeline>
<codeline lineno="714"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionSuccess();\</highlight></codeline>
<codeline lineno="715"><highlight class="preprocessor"><sp/><sp/>}<sp/>else<sp/>{\</highlight></codeline>
<codeline lineno="716"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>Message<sp/>msg;\</highlight></codeline>
<codeline lineno="717"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>msg<sp/>&lt;&lt;<sp/>&quot;Expected:<sp/>(&quot;<sp/>&lt;&lt;<sp/>expr1<sp/>&lt;&lt;<sp/>&quot;)<sp/>&quot;<sp/>#op<sp/>&quot;<sp/>(&quot;<sp/>&lt;&lt;<sp/>expr2\</highlight></codeline>
<codeline lineno="718"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;),<sp/>actual:<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val1,<sp/>val2)\</highlight></codeline>
<codeline lineno="719"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;<sp/>vs<sp/>&quot;<sp/>&lt;&lt;<sp/>FormatForComparisonFailureMessage(val2,<sp/>val1);\</highlight></codeline>
<codeline lineno="720"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>AssertionFailure(msg);\</highlight></codeline>
<codeline lineno="721"><highlight class="preprocessor"><sp/><sp/>}\</highlight></codeline>
<codeline lineno="722"><highlight class="preprocessor">}\</highlight></codeline>
<codeline lineno="723"><highlight class="preprocessor">AssertionResult<sp/>CmpHelper##op_name(const<sp/>char*<sp/>expr1,<sp/>const<sp/>char*<sp/>expr2,<sp/>\</highlight></codeline>
<codeline lineno="724"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BiggestInt<sp/>val1,<sp/>BiggestInt<sp/>val2);</highlight></codeline>
<codeline lineno="725"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_NE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><ref refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(NE,<sp/>!=)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><ref refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LE,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_LT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><ref refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(LT,<sp/>&lt;<sp/>)</highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><ref refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GE,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Implements<sp/>the<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_GT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><ref refid="gtest_8h_159438692ad37b6d6ce9cc1930b906391" kindref="member">GTEST_IMPL_CMP_HELPER_</ref>(GT,<sp/>&gt;<sp/>)</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>GTEST_IMPL_CMP_HELPER_</highlight></codeline>
<codeline lineno="740"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STREQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_10fa5116298109df6acd3d919223e14db" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASEEQ.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_1d8dddafb54dad2b1aba566a0d5dbbe5c" kindref="member">CmpHelperSTRCASEEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRNE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_151488673d7489dbbabf399905632070c" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>helper<sp/>function<sp/>for<sp/>{ASSERT|EXPECT}_STRCASENE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_133d1ce02617d6effefd951178e5036a9" kindref="member">CmpHelperSTRCASENE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STREQ<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_10fa5116298109df6acd3d919223e14db" kindref="member">CmpHelperSTREQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>expected,</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>actual);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>*_STRNE<sp/>on<sp/>wide<sp/>strings.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1_1internal_151488673d7489dbbabf399905632070c" kindref="member">CmpHelperSTRNE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s1_expression,</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>s2_expression,</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s1,</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>s2);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IsSubstring()<sp/>and<sp/>IsNotSubstring()<sp/>are<sp/>intended<sp/>to<sp/>be<sp/>used<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>argument<sp/>to<sp/>{EXPECT,ASSERT}_PRED_FORMAT2(),<sp/>not<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight><highlight class="comment">//<sp/>themselves.<sp/><sp/>They<sp/>check<sp/>whether<sp/>needle<sp/>is<sp/>a<sp/>substring<sp/>of<sp/>haystack</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight><highlight class="comment">//<sp/>(NULL<sp/>is<sp/>considered<sp/>a<sp/>substring<sp/>of<sp/>itself<sp/>only),<sp/>and<sp/>return<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight><highlight class="comment">//<sp/>appropriate<sp/>error<sp/>message<sp/>when<sp/>they<sp/>fail.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>{needle,haystack}_expr<sp/>arguments<sp/>are<sp/>the<sp/>stringified</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expressions<sp/>that<sp/>generated<sp/>the<sp/>two<sp/>real<sp/>arguments.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="800"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1009f08dca0562680a5704f6f88858ed3" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="803"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1009f08dca0562680a5704f6f88858ed3" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="806"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_11301ced25bb95bc43c5c9e9fd01d5270" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="809"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_11301ced25bb95bc43c5c9e9fd01d5270" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>needle,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">wchar_t</highlight><highlight class="normal">*<sp/>haystack);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="813"><highlight class="preprocessor"></highlight><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1009f08dca0562680a5704f6f88858ed3" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string&amp;<sp/>needle,<sp/>const<sp/>::std::string&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="816"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_11301ced25bb95bc43c5c9e9fd01d5270" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::string&amp;<sp/>needle,<sp/>const<sp/>::std::string&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_STRING</highlight></codeline>
<codeline lineno="820"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="822"><highlight class="preprocessor"></highlight><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_1009f08dca0562680a5704f6f88858ed3" kindref="member">IsSubstring</ref>(</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::wstring&amp;<sp/>needle,<sp/>const<sp/>::std::wstring&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="825"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_11301ced25bb95bc43c5c9e9fd01d5270" kindref="member">IsNotSubstring</ref>(</highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>needle_expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>haystack_expr,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>::std::wstring&amp;<sp/>needle,<sp/>const<sp/>::std::wstring&amp;<sp/>haystack);</highlight></codeline>
<codeline lineno="828"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_STD_WSTRING</highlight></codeline>
<codeline lineno="829"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>template<sp/>function<sp/>for<sp/>comparing<sp/>floating-points.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Template<sp/>parameter:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>RawType:<sp/>the<sp/>raw<sp/>floating-point<sp/>type<sp/>(either<sp/>float<sp/>or<sp/>double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RawType&gt;</highlight></codeline>
<codeline lineno="840" refid="namespacetesting_1_1internal_10cbdac3d4f193f9e41b888a23967ce49" refkind="member"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_1_1internal_10cbdac3d4f193f9e41b888a23967ce49" kindref="member">CmpHelperFloatingPointEQ</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expected_expression,</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>actual_expression,</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>expected,</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RawType<sp/>actual)<sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1FloatingPoint" kindref="compound">FloatingPoint&lt;RawType&gt;</ref><sp/>lhs(expected),<sp/>rhs(actual);</highlight></codeline>
<codeline lineno="845"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(lhs.AlmostEquals(rhs))<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1b729c66d933de254c89cddb7f3c71ec4" kindref="member">AssertionSuccess</ref>();</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref><sp/>expected_ss;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>expected_ss<sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;RawType&gt;::digits10<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>expected;</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1_1internal_12f325a1ea8cfd7eab6843eb4592dde44" kindref="member">StrStream</ref><sp/>actual_ss;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>actual_ss<sp/>&lt;&lt;<sp/>std::setprecision(std::numeric_limits&lt;RawType&gt;::digits10<sp/>+<sp/>2)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>actual;</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacetesting_1_1internal_1edef6e77f267b3a60fabda1428c6742c" kindref="member">EqFailure</ref>(expected_expression,</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actual_expression,</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_15639f5bf1b9983c51ef166207d2c62b8" kindref="member">StrStreamToString</ref>(&amp;expected_ss),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacetesting_1_1internal_15639f5bf1b9983c51ef166207d2c62b8" kindref="member">StrStreamToString</ref>(&amp;actual_ss),</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="863"><highlight class="normal">}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Helper<sp/>function<sp/>for<sp/>implementing<sp/>ASSERT_NEAR.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>A<sp/>USER<sp/>PROGRAM.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><ref refid="classtesting_1_1AssertionResult" kindref="compound">AssertionResult</ref><sp/><ref refid="namespacetesting_1_1internal_12ffeb072172886ea1185c03dda4b0d76" kindref="member">DoubleNearPredFormat</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>abs_error_expr,</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2,</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>abs_error);</highlight></codeline>
<codeline lineno="874"><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INTERNAL<sp/>IMPLEMENTATION<sp/>-<sp/>DO<sp/>NOT<sp/>USE<sp/>IN<sp/>USER<sp/>CODE.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>class<sp/>that<sp/>enables<sp/>one<sp/>to<sp/>stream<sp/>messages<sp/>to<sp/>assertion<sp/>macros</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="classtesting_1_1internal_1_1AssertHelper" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtesting_1_1internal_1_1AssertHelper" kindref="compound">AssertHelper</ref><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_1f28f11ad1b22a81480325011929068bb" kindref="member">AssertHelper</ref>(<ref refid="namespacetesting_1e87109d90628580ab2d751fcb36fc975" kindref="member">TestPartResultType</ref><sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>file,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>line,</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>message);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Message<sp/>assignment<sp/>is<sp/>a<sp/>semantic<sp/>trick<sp/>to<sp/>enable<sp/>assertion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>streaming;<sp/>see<sp/>the<sp/>GTEST_MESSAGE_<sp/>macro<sp/>below.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_1f34713ddd123368c1453da566f54fe9c" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Message" kindref="compound">Message</ref>&amp;<sp/>message)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="886" refid="classtesting_1_1internal_1_1AssertHelper_18d7abde365f98254e2220f5affd41853" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacetesting_1e87109d90628580ab2d751fcb36fc975" kindref="member">TestPartResultType</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_18d7abde365f98254e2220f5affd41853" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="887" refid="classtesting_1_1internal_1_1AssertHelper_12f390e195e3b1ea244c62d77c6d39051" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_12f390e195e3b1ea244c62d77c6d39051" kindref="member">file_</ref>;</highlight></codeline>
<codeline lineno="888" refid="classtesting_1_1internal_1_1AssertHelper_17c7cef5c21780f81b597233bccaacbe3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_17c7cef5c21780f81b597233bccaacbe3" kindref="member">line_</ref>;</highlight></codeline>
<codeline lineno="889" refid="classtesting_1_1internal_1_1AssertHelper_1fa76642e1a4a34a970bcd5a2360bafa7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1String" kindref="compound">String</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_1fa76642e1a4a34a970bcd5a2360bafa7" kindref="member">message_</ref>;</highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><ref refid="classtesting_1_1internal_1_1AssertHelper_13fa661b6161d44c4fd054f7d8d47cb46" kindref="member">GTEST_DISALLOW_COPY_AND_ASSIGN_</ref>(<ref refid="classtesting_1_1internal_1_1AssertHelper" kindref="compound">AssertHelper</ref>);</highlight></codeline>
<codeline lineno="892"><highlight class="normal">};</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_HAS_PARAM_TEST</highlight></codeline>
<codeline lineno="897"><highlight class="preprocessor"></highlight><highlight class="comment">//<sp/>The<sp/>abstract<sp/>base<sp/>class<sp/>that<sp/>all<sp/>value-parameterized<sp/>tests<sp/>inherit<sp/>from.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>class<sp/>adds<sp/>support<sp/>for<sp/>accessing<sp/>the<sp/>test<sp/>parameter<sp/>value<sp/>via</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>GetParam()<sp/>method.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>it<sp/>with<sp/>one<sp/>of<sp/>the<sp/>parameter<sp/>generator<sp/>defining<sp/>functions,<sp/>like<sp/>Range(),</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Values(),<sp/>ValuesIn(),<sp/>Bool(),<sp/>and<sp/>Combine().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>::testing::TestWithParam&lt;int&gt;<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>FooTest()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>~FooTest()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>virtual<sp/>void<sp/>TearDown<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight><highlight class="comment">//<sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TEST_P(FooTest,<sp/>DoesBar)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>//<sp/>Can<sp/>use<sp/>GetParam()<sp/>method<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Foo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_TRUE(foo.DoesBar(GetParam()));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="comment">//<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight><highlight class="comment">//<sp/>INSTANTIATE_TEST_CASE_P(OneToTenRange,<sp/>FooTest,<sp/>::testing::Range(1,<sp/>10));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">TestWithParam<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classtesting_1_1Test" kindref="compound">Test</ref><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>T<sp/>ParamType;</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>parameter<sp/>value.<sp/>Is<sp/>also<sp/>available<sp/>in<sp/>the<sp/>test<sp/>fixture&apos;s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType&amp;<sp/>GetParam()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*parameter_;<sp/>}</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Sets<sp/>parameter<sp/>value.<sp/>The<sp/>caller<sp/>is<sp/>responsible<sp/>for<sp/>making<sp/>sure<sp/>the<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>remains<sp/>alive<sp/>and<sp/>unchanged<sp/>throughout<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetParam(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType*<sp/>parameter)<sp/>{</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>parameter_<sp/>=<sp/>parameter;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Static<sp/>value<sp/>used<sp/>for<sp/>accessing<sp/>parameter<sp/>during<sp/>a<sp/>test<sp/>lifetime.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ParamType*<sp/>parameter_;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TestClass<sp/>must<sp/>be<sp/>a<sp/>subclass<sp/>of<sp/>TestWithParam&lt;T&gt;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TestClass&gt;<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">internal::ParameterizedTestFactory;</highlight></codeline>
<codeline lineno="948"><highlight class="normal">};</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>TestWithParam&lt;T&gt;::parameter_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_HAS_PARAM_TEST</highlight></codeline>
<codeline lineno="954"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>indicating<sp/>success/failure<sp/>in<sp/>test<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ADD_FAILURE<sp/>unconditionally<sp/>adds<sp/>a<sp/>failure<sp/>to<sp/>the<sp/>current<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SUCCEED<sp/>generates<sp/>a<sp/>success<sp/>-<sp/>it<sp/>doesn&apos;t<sp/>automatically<sp/>make<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight><highlight class="comment">//<sp/>current<sp/>test<sp/>successful,<sp/>as<sp/>a<sp/>test<sp/>is<sp/>only<sp/>successful<sp/>when<sp/>it<sp/>has</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight><highlight class="comment">//<sp/>no<sp/>failure.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="comment">//<sp/>EXPECT_*<sp/>verifies<sp/>that<sp/>a<sp/>certain<sp/>condition<sp/>is<sp/>satisfied.<sp/><sp/>If<sp/>not,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>behaves<sp/>like<sp/>ADD_FAILURE.<sp/><sp/>In<sp/>particular:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_TRUE<sp/><sp/>verifies<sp/>that<sp/>a<sp/>Boolean<sp/>condition<sp/>is<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_FALSE<sp/>verifies<sp/>that<sp/>a<sp/>Boolean<sp/>condition<sp/>is<sp/>false.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FAIL<sp/>and<sp/>ASSERT_*<sp/>are<sp/>similar<sp/>to<sp/>ADD_FAILURE<sp/>and<sp/>EXPECT_*,<sp/>except</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>they<sp/>will<sp/>also<sp/>abort<sp/>the<sp/>current<sp/>function<sp/>on<sp/>failure.<sp/><sp/>People</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="comment">//<sp/>usually<sp/>want<sp/>the<sp/>fail-fast<sp/>behavior<sp/>of<sp/>FAIL<sp/>and<sp/>ASSERT_*,<sp/>but<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight><highlight class="comment">//<sp/>writing<sp/>data-driven<sp/>tests<sp/>often<sp/>find<sp/>themselves<sp/>using<sp/>ADD_FAILURE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>EXPECT_*<sp/>more.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_TRUE(server.StatusIsOK());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_FALSE(server.HasPendingRequest(port))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;There<sp/>are<sp/>still<sp/>pending<sp/>requests<sp/>&quot;<sp/>&lt;&lt;<sp/>&quot;on<sp/>port<sp/>&quot;<sp/>&lt;&lt;<sp/>port;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>nonfatal<sp/>failure<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981" refid="gtest_8h_1056e7339ae81e48538fae49e20995c60" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ADD_FAILURE()<sp/>GTEST_NONFATAL_FAILURE_(&quot;Failed&quot;)</highlight></codeline>
<codeline lineno="982"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="983"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>fatal<sp/>failure<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984" refid="gtest_8h_16585f842dda141356b034c8fa99fe50b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FAIL()<sp/>GTEST_FATAL_FAILURE_(&quot;Failed&quot;)</highlight></codeline>
<codeline lineno="985"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generates<sp/>a<sp/>success<sp/>with<sp/>a<sp/>generic<sp/>message.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987" refid="gtest_8h_1397afb4cfffe2967500d24102fa8a5ec" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SUCCEED()<sp/>GTEST_SUCCESS_(&quot;Succeeded&quot;)</highlight></codeline>
<codeline lineno="988"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>testing<sp/>exceptions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_THROW(statement,<sp/>expected_exception):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>throws<sp/>the<sp/>expected<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NO_THROW(statement):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>doesn&apos;t<sp/>throw<sp/>any<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_ANY_THROW(statement):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>the<sp/>statement<sp/>throws<sp/>an<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998" refid="gtest_8h_13575afec9214ef9782034ae9305102f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_THROW(statement,<sp/>expected_exception)<sp/>\</highlight></codeline>
<codeline lineno="999"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1000" refid="gtest_8h_11b299f9d875d6725e27d8cce8c4f1946" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NO_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1001"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_NO_THROW_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1002" refid="gtest_8h_1b5eafb78f18c7f678844c12342f5e0fb" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_ANY_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1003"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1004" refid="gtest_8h_1fe452d4e4b830946c36434fb2043cfa2" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_THROW(statement,<sp/>expected_exception)<sp/>\</highlight></codeline>
<codeline lineno="1005"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_THROW_(statement,<sp/>expected_exception,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1006" refid="gtest_8h_1847284796652b28fae5da442c1525c9a" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NO_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1007"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_NO_THROW_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1008" refid="gtest_8h_1150089479ffce17438115a50442c56ca" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_ANY_THROW(statement)<sp/>\</highlight></codeline>
<codeline lineno="1009"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_ANY_THROW_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1010"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boolean<sp/>assertions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1012" refid="gtest_8h_10954fea9252af6aea1df2d8e6e6caa0e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_TRUE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1013"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(condition,<sp/>#condition,<sp/>false,<sp/>true,<sp/>\</highlight></codeline>
<codeline lineno="1014"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1015" refid="gtest_8h_1588210b9be54e776cc7901a14a21bd31" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FALSE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1016"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(!(condition),<sp/>#condition,<sp/>true,<sp/>false,<sp/>\</highlight></codeline>
<codeline lineno="1017"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1018" refid="gtest_8h_1bc8edefe2dbf52f5d12542a8e0acc3a3" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_TRUE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1019"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(condition,<sp/>#condition,<sp/>false,<sp/>true,<sp/>\</highlight></codeline>
<codeline lineno="1020"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1021" refid="gtest_8h_19e00bbd67f469acb8893a2ec0a08806d" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_FALSE(condition)<sp/>\</highlight></codeline>
<codeline lineno="1022"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_BOOLEAN_(!(condition),<sp/>#condition,<sp/>true,<sp/>false,<sp/>\</highlight></codeline>
<codeline lineno="1023"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1024"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Includes<sp/>the<sp/>auto-generated<sp/>header<sp/>that<sp/>implements<sp/>a<sp/>family<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">//<sp/>generic<sp/>predicate<sp/>assertion<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gtest__pred__impl_8h" kindref="compound">gtest/gtest_pred_impl.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"></highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>testing<sp/>equalities<sp/>and<sp/>inequalities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_EQ(expected,<sp/>actual):<sp/>Tests<sp/>that<sp/>expected<sp/>==<sp/>actual</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NE(v1,<sp/>v2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>!=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_LT(v1,<sp/>v2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>&lt;<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_LE(v1,<sp/>v2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>&lt;=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_GT(v1,<sp/>v2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>&gt;<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_GE(v1,<sp/>v2):<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>&gt;=<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>they<sp/>are<sp/>not,<sp/>Google<sp/>Test<sp/>prints<sp/>both<sp/>the<sp/>tested<sp/>expressions<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>their<sp/>actual<sp/>values.<sp/><sp/>The<sp/>values<sp/>must<sp/>be<sp/>compatible<sp/>built-in<sp/>types,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>you<sp/>will<sp/>get<sp/>a<sp/>compiler<sp/>error.<sp/><sp/>By<sp/>&quot;compatible&quot;<sp/>we<sp/>mean<sp/>that<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>values<sp/>can<sp/>be<sp/>compared<sp/>by<sp/>the<sp/>respective<sp/>operator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>1.<sp/>It<sp/>is<sp/>possible<sp/>to<sp/>make<sp/>a<sp/>user-defined<sp/>type<sp/>work<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_??(),<sp/>but<sp/>that<sp/>requires<sp/>overloading<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>comparison<sp/>operators<sp/>and<sp/>is<sp/>thus<sp/>discouraged<sp/>by<sp/>the<sp/>Google<sp/>C++</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>Usage<sp/>Guide.<sp/><sp/>Therefore,<sp/>you<sp/>are<sp/>advised<sp/>to<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_TRUE()<sp/>macro<sp/>to<sp/>assert<sp/>that<sp/>two<sp/>objects<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>2.<sp/>The<sp/>{ASSERT|EXPECT}_??()<sp/>macros<sp/>do<sp/>pointer<sp/>comparisons<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>pointers<sp/>(in<sp/>particular,<sp/>C<sp/>strings).<sp/><sp/>Therefore,<sp/>if<sp/>you<sp/>use<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>with<sp/>two<sp/>C<sp/>strings,<sp/>you<sp/>are<sp/>testing<sp/>how<sp/>their<sp/>locations<sp/>in<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>are<sp/>related,<sp/>not<sp/>how<sp/>their<sp/>content<sp/>is<sp/>related.<sp/><sp/>To<sp/>compare<sp/>two<sp/>C</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>strings<sp/>by<sp/>content,<sp/>use<sp/>{ASSERT|EXPECT}_STR*().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>3.<sp/>{ASSERT|EXPECT}_EQ(expected,<sp/>actual)<sp/>is<sp/>preferred<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>{ASSERT|EXPECT}_TRUE(expected<sp/>==<sp/>actual),<sp/>as<sp/>the<sp/>former<sp/>tells<sp/>you</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>what<sp/>the<sp/>actual<sp/>value<sp/>is<sp/>when<sp/>it<sp/>fails,<sp/>and<sp/>similarly<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>other<sp/>comparisons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>4.<sp/>Do<sp/>not<sp/>depend<sp/>on<sp/>the<sp/>order<sp/>in<sp/>which<sp/>{ASSERT|EXPECT}_??()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>evaluate<sp/>their<sp/>arguments,<sp/>which<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>5.<sp/>These<sp/>macros<sp/>evaluate<sp/>their<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_NE(5,<sp/>Foo());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_EQ(NULL,<sp/>a_pointer);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_LT(i,<sp/>array_size);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_GT(records.size(),<sp/>0)<sp/>&lt;&lt;<sp/>&quot;There<sp/>is<sp/>no<sp/>record<sp/>left.&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="normal"></highlight></codeline>
<codeline lineno="1075" refid="gtest_8h_125e2998b97daf08eafcc1b5abc7dd622" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_EQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1076"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::<sp/>\</highlight></codeline>
<codeline lineno="1077"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqHelper&lt;GTEST_IS_NULL_LITERAL_(expected)&gt;::Compare,<sp/>\</highlight></codeline>
<codeline lineno="1078"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1079" refid="gtest_8h_135f03ed1d38bce3c0e3854fe391feca9" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NE(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1080"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE,<sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1081" refid="gtest_8h_1b390c93c4955deac6112e6653661a0dd" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_LE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1082"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1083" refid="gtest_8h_155bda7934729999a4ab79c534b6c24dc" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_LT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1084"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1085" refid="gtest_8h_1728dbe0c8d6e93c4e5a192b7296a2ab1" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_GE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1086"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1087" refid="gtest_8h_121ab104b356bb282b221b95387cf31eb" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_GT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1088"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1089"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090" refid="gtest_8h_1f2f962e2200ec490248e50436826cc60" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_EQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1091"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::<sp/>\</highlight></codeline>
<codeline lineno="1092"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>EqHelper&lt;GTEST_IS_NULL_LITERAL_(expected)&gt;::Compare,<sp/>\</highlight></codeline>
<codeline lineno="1093"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1094" refid="gtest_8h_18a787c812c3e44b173da4f60ad83e869" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1095"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1096" refid="gtest_8h_13e6b1f3aa6de97af096edf1a32e45bb2" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_LE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1097"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1098" refid="gtest_8h_1eeb3d8146f648fc6be63b975a9e243bd" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_LT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1099"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1100" refid="gtest_8h_183affb552bff41687f6a6631acd5e2ca" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_GE(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1101"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1102" refid="gtest_8h_1f2f5a56962986487f93b14f99db48e91" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_GT(val1,<sp/>val2)<sp/>\</highlight></codeline>
<codeline lineno="1103"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT,<sp/>val1,<sp/>val2)</highlight></codeline>
<codeline lineno="1104"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"></highlight><highlight class="comment">//<sp/>C<sp/>String<sp/>Comparisons.<sp/><sp/>All<sp/>tests<sp/>treat<sp/>NULL<sp/>and<sp/>any<sp/>non-NULL<sp/>string</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight><highlight class="comment">//<sp/>as<sp/>different.<sp/><sp/>Two<sp/>NULLs<sp/>are<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STREQ(s1,<sp/>s2):<sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>s1<sp/>==<sp/>s2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRNE(s1,<sp/>s2):<sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>s1<sp/>!=<sp/>s2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRCASEEQ(s1,<sp/>s2):<sp/>Tests<sp/>that<sp/>s1<sp/>==<sp/>s2,<sp/>ignoring<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_STRCASENE(s1,<sp/>s2):<sp/>Tests<sp/>that<sp/>s1<sp/>!=<sp/>s2,<sp/>ignoring<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>For<sp/>wide<sp/>or<sp/>narrow<sp/>string<sp/>objects,<sp/>you<sp/>can<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>{ASSERT|EXPECT}_??()<sp/>macros.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Don&apos;t<sp/>depend<sp/>on<sp/>the<sp/>order<sp/>in<sp/>which<sp/>the<sp/>arguments<sp/>are<sp/>evaluated,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>which<sp/>is<sp/>undefined.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>macros<sp/>evaluate<sp/>their<sp/>arguments<sp/>exactly<sp/>once.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"></highlight></codeline>
<codeline lineno="1121" refid="gtest_8h_10876b77880bfd56fe012815bc4ff9ed5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STREQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1122"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ,<sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1123" refid="gtest_8h_1647e43522cc2175b566ba531b461a0b5" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRNE(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="1124"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE,<sp/>s1,<sp/>s2)</highlight></codeline>
<codeline lineno="1125" refid="gtest_8h_19fa7428fad648293f15d8d59558c6d15" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRCASEEQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1126"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ,<sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1127" refid="gtest_8h_1aeea193c70fcfc82b0c83c3dc51307dd" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_STRCASENE(s1,<sp/>s2)\</highlight></codeline>
<codeline lineno="1128"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE,<sp/>s1,<sp/>s2)</highlight></codeline>
<codeline lineno="1129"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1130" refid="gtest_8h_1089f4a9f6397a8d03717b07c4ccf2704" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STREQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1131"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ,<sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1132" refid="gtest_8h_1bd0f5611645bebac41d8f9f5434dfa89" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRNE(s1,<sp/>s2)<sp/>\</highlight></codeline>
<codeline lineno="1133"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE,<sp/>s1,<sp/>s2)</highlight></codeline>
<codeline lineno="1134" refid="gtest_8h_1a5730f5d00d9fc0cc84ad1ed7a221beb" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRCASEEQ(expected,<sp/>actual)<sp/>\</highlight></codeline>
<codeline lineno="1135"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ,<sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1136" refid="gtest_8h_190d237b56ead141b6a1f194d2500a129" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_STRCASENE(s1,<sp/>s2)\</highlight></codeline>
<codeline lineno="1137"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE,<sp/>s1,<sp/>s2)</highlight></codeline>
<codeline lineno="1138"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>for<sp/>comparing<sp/>floating-point<sp/>numbers.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_FLOAT_EQ(expected,<sp/>actual):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>two<sp/>float<sp/>values<sp/>are<sp/>almost<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1143"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_DOUBLE_EQ(expected,<sp/>actual):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>two<sp/>double<sp/>values<sp/>are<sp/>almost<sp/>equal.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NEAR(v1,<sp/>v2,<sp/>abs_error):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tests<sp/>that<sp/>v1<sp/>and<sp/>v2<sp/>are<sp/>within<sp/>the<sp/>given<sp/>distance<sp/>to<sp/>each<sp/>other.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Google<sp/>Test<sp/>uses<sp/>ULP-based<sp/>comparison<sp/>to<sp/>automatically<sp/>pick<sp/>a<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>error<sp/>bound<sp/>that<sp/>is<sp/>appropriate<sp/>for<sp/>the<sp/>operands.<sp/><sp/>See<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FloatingPoint<sp/>template<sp/>class<sp/>in<sp/>gtest-internal.h<sp/>if<sp/>you<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"></highlight><highlight class="comment">//<sp/>interested<sp/>in<sp/>the<sp/>implementation<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153" refid="gtest_8h_1e1c0b7434cf078fda15a96eadea0dc68" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_FLOAT_EQ(expected,<sp/>actual)\</highlight></codeline>
<codeline lineno="1154"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;,<sp/>\</highlight></codeline>
<codeline lineno="1155"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1156"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1157" refid="gtest_8h_11341fe299076bdac4e9a04d7f42f7e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_DOUBLE_EQ(expected,<sp/>actual)\</highlight></codeline>
<codeline lineno="1158"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;,<sp/>\</highlight></codeline>
<codeline lineno="1159"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1160"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161" refid="gtest_8h_1b595d36cf2b1e35ce5a3035432b0ba9c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_FLOAT_EQ(expected,<sp/>actual)\</highlight></codeline>
<codeline lineno="1162"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;float&gt;,<sp/>\</highlight></codeline>
<codeline lineno="1163"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1164"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165" refid="gtest_8h_183dda6fa372bc1f88db2f29a00de147a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_DOUBLE_EQ(expected,<sp/>actual)\</highlight></codeline>
<codeline lineno="1166"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ&lt;double&gt;,<sp/>\</highlight></codeline>
<codeline lineno="1167"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected,<sp/>actual)</highlight></codeline>
<codeline lineno="1168"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1169" refid="gtest_8h_129bed5ba2dfd25740dfecc27eaaaa6e2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NEAR(val1,<sp/>val2,<sp/>abs_error)\</highlight></codeline>
<codeline lineno="1170"><highlight class="preprocessor"><sp/><sp/>EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat,<sp/>\</highlight></codeline>
<codeline lineno="1171"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2,<sp/>abs_error)</highlight></codeline>
<codeline lineno="1172"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173" refid="gtest_8h_1e50b7af8705487a5ce950fa9851ac760" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NEAR(val1,<sp/>val2,<sp/>abs_error)\</highlight></codeline>
<codeline lineno="1174"><highlight class="preprocessor"><sp/><sp/>ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat,<sp/>\</highlight></codeline>
<codeline lineno="1175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val1,<sp/>val2,<sp/>abs_error)</highlight></codeline>
<codeline lineno="1176"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>predicate<sp/>format<sp/>functions<sp/>work<sp/>on<sp/>floating-point<sp/>values,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>used<sp/>in<sp/>{ASSERT|EXPECT}_PRED_FORMAT2*(),<sp/>e.g.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_PRED_FORMAT2(testing::DoubleLE,<sp/>Foo(),<sp/>5.0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Asserts<sp/>that<sp/>val1<sp/>is<sp/>less<sp/>than,<sp/>or<sp/>almost<sp/>equal<sp/>to,<sp/>val2.<sp/><sp/>Fails</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>otherwise.<sp/><sp/>In<sp/>particular,<sp/>it<sp/>fails<sp/>if<sp/>either<sp/>val1<sp/>or<sp/>val2<sp/>is<sp/>NaN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_18df0239796a2652f170dd5237e5a04dc" kindref="member">FloatLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>val2);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">AssertionResult<sp/><ref refid="namespacetesting_155e89dc0f65ab5a155ffdf06e6eac327" kindref="member">DoubleLE</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>expr2,</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val1,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val2);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>GTEST_OS_WINDOWS</highlight></codeline>
<codeline lineno="1191"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>that<sp/>test<sp/>for<sp/>HRESULT<sp/>failure<sp/>and<sp/>success,<sp/>these<sp/>are<sp/>only<sp/>useful</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>on<sp/>Windows,<sp/>and<sp/>rely<sp/>on<sp/>Windows<sp/>SDK<sp/>macros<sp/>and<sp/>APIs<sp/>to<sp/>compile.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_HRESULT_{SUCCEEDED|FAILED}(expr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>expr<sp/>unexpectedly<sp/>fails<sp/>or<sp/>succeeds,<sp/>Google<sp/>Test<sp/>prints<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>expected<sp/>result<sp/>and<sp/>the<sp/>actual<sp/>result<sp/>with<sp/>both<sp/>a<sp/>human-readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>string<sp/>representation<sp/>of<sp/>the<sp/>error,<sp/>if<sp/>available,<sp/>as<sp/>well<sp/>as<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hex<sp/>result<sp/>code.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_HRESULT_SUCCEEDED(expr)<sp/>\</highlight></codeline>
<codeline lineno="1202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess,<sp/>(expr))</highlight></codeline>
<codeline lineno="1203"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_HRESULT_SUCCEEDED(expr)<sp/>\</highlight></codeline>
<codeline lineno="1205"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess,<sp/>(expr))</highlight></codeline>
<codeline lineno="1206"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_HRESULT_FAILED(expr)<sp/>\</highlight></codeline>
<codeline lineno="1208"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure,<sp/>(expr))</highlight></codeline>
<codeline lineno="1209"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_HRESULT_FAILED(expr)<sp/>\</highlight></codeline>
<codeline lineno="1211"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure,<sp/>(expr))</highlight></codeline>
<codeline lineno="1212"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_OS_WINDOWS</highlight></codeline>
<codeline lineno="1214"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Macros<sp/>that<sp/>execute<sp/>statement<sp/>and<sp/>check<sp/>that<sp/>it<sp/>doesn&apos;t<sp/>generate<sp/>new<sp/>fatal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"></highlight><highlight class="comment">//<sp/>failures<sp/>in<sp/>the<sp/>current<sp/>thread.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>*<sp/>{ASSERT|EXPECT}_NO_FATAL_FAILURE(statement);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Examples:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>EXPECT_NO_FATAL_FAILURE(Process());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>ASSERT_NO_FATAL_FAILURE(Process())<sp/>&lt;&lt;<sp/>&quot;Process()<sp/>failed&quot;;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1225" refid="gtest_8h_1b957ba33b4f4c2b1418ae88fc659982f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ASSERT_NO_FATAL_FAILURE(statement)<sp/>\</highlight></codeline>
<codeline lineno="1226"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>GTEST_FATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1227" refid="gtest_8h_172b583d5983c08d7126b36ca5e59be23" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>EXPECT_NO_FATAL_FAILURE(statement)<sp/>\</highlight></codeline>
<codeline lineno="1228"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>GTEST_TEST_NO_FATAL_FAILURE_(statement,<sp/>GTEST_NONFATAL_FAILURE_)</highlight></codeline>
<codeline lineno="1229"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Causes<sp/>a<sp/>trace<sp/>(including<sp/>the<sp/>source<sp/>file<sp/>path,<sp/>the<sp/>current<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="comment">//<sp/>number,<sp/>and<sp/>the<sp/>given<sp/>message)<sp/>to<sp/>be<sp/>included<sp/>in<sp/>every<sp/>test<sp/>failure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight><highlight class="comment">//<sp/>message<sp/>generated<sp/>by<sp/>code<sp/>in<sp/>the<sp/>current<sp/>scope.<sp/><sp/>The<sp/>effect<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="comment">//<sp/>undone<sp/>when<sp/>the<sp/>control<sp/>leaves<sp/>the<sp/>current<sp/>scope.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>message<sp/>argument<sp/>can<sp/>be<sp/>anything<sp/>streamable<sp/>to<sp/>std::ostream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>implementation,<sp/>we<sp/>include<sp/>the<sp/>current<sp/>line<sp/>number<sp/>as<sp/>part</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>dummy<sp/>variable<sp/>name,<sp/>thus<sp/>allowing<sp/>multiple<sp/>SCOPED_TRACE()s</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>appear<sp/>in<sp/>the<sp/>same<sp/>block<sp/>-<sp/>as<sp/>long<sp/>as<sp/>they<sp/>are<sp/>on<sp/>different</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"></highlight><highlight class="comment">//<sp/>lines.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1241" refid="gtest_8h_103d8a92d5a8cf13e60510636300807b2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCOPED_TRACE(message)<sp/>\</highlight></codeline>
<codeline lineno="1242"><highlight class="preprocessor"><sp/><sp/>::testing::internal::ScopedTrace<sp/>GTEST_CONCAT_TOKEN_(gtest_trace_,<sp/>__LINE__)(\</highlight></codeline>
<codeline lineno="1243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>__FILE__,<sp/>__LINE__,<sp/>::testing::Message()<sp/>&lt;&lt;<sp/>(message))</highlight></codeline>
<codeline lineno="1244"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>test.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1248"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>case,<sp/>and<sp/>the<sp/>second</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>within<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>convention<sp/>is<sp/>to<sp/>end<sp/>the<sp/>test<sp/>case<sp/>name<sp/>with<sp/>&quot;Test&quot;.<sp/><sp/>For</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="comment">//<sp/>example,<sp/>a<sp/>test<sp/>case<sp/>for<sp/>the<sp/>Foo<sp/>class<sp/>can<sp/>be<sp/>named<sp/>FooTest.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>user<sp/>should<sp/>put<sp/>his<sp/>test<sp/>code<sp/>between<sp/>braces<sp/>after<sp/>using<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="comment">//<sp/>macro.<sp/><sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST(FooTest,<sp/>InitializesCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1258"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>foo;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(foo.StatusIsOK());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>we<sp/>call<sp/>GetTestTypeId()<sp/>instead<sp/>of<sp/>GetTypeId&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test&gt;()<sp/>here<sp/>to<sp/>get<sp/>the<sp/>type<sp/>ID<sp/>of<sp/>testing::Test.<sp/><sp/>This</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1264"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>to<sp/>work<sp/>around<sp/>a<sp/>suspected<sp/>linker<sp/>bug<sp/>when<sp/>using<sp/>Google<sp/>Test<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight><highlight class="comment">//<sp/>a<sp/>framework<sp/>on<sp/>Mac<sp/>OS<sp/>X.<sp/><sp/>The<sp/>bug<sp/>causes<sp/>GetTypeId&lt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight><highlight class="comment">//<sp/>::testing::Test&gt;()<sp/>to<sp/>return<sp/>different<sp/>values<sp/>depending<sp/>on<sp/>whether</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1267"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>is<sp/>from<sp/>the<sp/>Google<sp/>Test<sp/>framework<sp/>itself<sp/>or<sp/>from<sp/>user<sp/>test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1268"><highlight class="normal"></highlight><highlight class="comment">//<sp/>code.<sp/><sp/>GetTestTypeId()<sp/>is<sp/>guaranteed<sp/>to<sp/>always<sp/>return<sp/>the<sp/>same</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight><highlight class="comment">//<sp/>value,<sp/>as<sp/>it<sp/>always<sp/>calls<sp/>GetTypeId&lt;&gt;()<sp/>from<sp/>the<sp/>Google<sp/>Test</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"></highlight><highlight class="comment">//<sp/>framework.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1271" refid="gtest_8h_1598efb903152a27abbe3562ea890d1b9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST(test_case_name,<sp/>test_name)\</highlight></codeline>
<codeline lineno="1272"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_(test_case_name,<sp/>test_name,\</highlight></codeline>
<codeline lineno="1273"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::Test,<sp/>::testing::internal::GetTestTypeId())</highlight></codeline>
<codeline lineno="1274"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Defines<sp/>a<sp/>test<sp/>that<sp/>uses<sp/>a<sp/>test<sp/>fixture.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>first<sp/>parameter<sp/>is<sp/>the<sp/>name<sp/>of<sp/>the<sp/>test<sp/>fixture<sp/>class,<sp/>which</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight><highlight class="comment">//<sp/>also<sp/>doubles<sp/>as<sp/>the<sp/>test<sp/>case<sp/>name.<sp/><sp/>The<sp/>second<sp/>parameter<sp/>is<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight><highlight class="comment">//<sp/>name<sp/>of<sp/>the<sp/>test<sp/>within<sp/>the<sp/>test<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1281"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>test<sp/>fixture<sp/>class<sp/>must<sp/>be<sp/>declared<sp/>earlier.<sp/><sp/>The<sp/>user<sp/>should<sp/>put</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>his<sp/>test<sp/>code<sp/>between<sp/>braces<sp/>after<sp/>using<sp/>this<sp/>macro.<sp/><sp/>Example:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>class<sp/>FooTest<sp/>:<sp/>public<sp/>testing::Test<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>protected:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>virtual<sp/>void<sp/>SetUp()<sp/>{<sp/>b_.AddElement(3);<sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>a_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>Foo<sp/>b_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>};</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>InitializesCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_TRUE(a_.StatusIsOK());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>TEST_F(FooTest,<sp/>ReturnsElementCountCorrectly)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(0,<sp/>a_.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>EXPECT_EQ(1,<sp/>b_.size());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"></highlight></codeline>
<codeline lineno="1302" refid="gtest_8h_165252d195eb5c09683b70370e9447b2f" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TEST_F(test_fixture,<sp/>test_name)\</highlight></codeline>
<codeline lineno="1303"><highlight class="preprocessor"><sp/><sp/>GTEST_TEST_(test_fixture,<sp/>test_name,<sp/>test_fixture,\</highlight></codeline>
<codeline lineno="1304"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::testing::internal::GetTypeId&lt;test_fixture&gt;())</highlight></codeline>
<codeline lineno="1305"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Use<sp/>this<sp/>macro<sp/>in<sp/>main()<sp/>to<sp/>run<sp/>all<sp/>tests.<sp/><sp/>It<sp/>returns<sp/>0<sp/>if<sp/>all</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight><highlight class="comment">//<sp/>tests<sp/>are<sp/>successful,<sp/>or<sp/>1<sp/>otherwise.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RUN_ALL_TESTS()<sp/>should<sp/>be<sp/>invoked<sp/>after<sp/>the<sp/>command<sp/>line<sp/>has<sp/>been</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1310"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parsed<sp/>by<sp/>InitGoogleTest().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="gtest_8h_1e5b480275b42e3957841ee3e7acf6dbc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>RUN_ALL_TESTS()\</highlight></codeline>
<codeline lineno="1313"><highlight class="preprocessor"><sp/><sp/>(::testing::UnitTest::GetInstance()-&gt;Run())</highlight></codeline>
<codeline lineno="1314"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>testing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"></highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>GTEST_INCLUDE_GTEST_GTEST_H_</highlight></codeline>
    </programlisting>
    <location file="/home/Mario/Escritorio/EC3/src/gtest/gtest.h"/>
  </compounddef>
</doxygen>
